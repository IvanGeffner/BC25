package basic46;
import battlecode.common.*;
public class VisionManager {

    static RobotController rc;

    static void init(){
        rc = MyRobot.rc;
    }

    static MapLocation l14;
    static int v14;
    static Direction d14;
    static int p14;
    static MapInfo m14;

    static MapLocation l15;
    static int v15;
    static Direction d15;
    static int p15;
    static MapInfo m15;

    static MapLocation l16;
    static int v16;
    static Direction d16;
    static int p16;
    static MapInfo m16;

    static MapLocation l17;
    static int v17;
    static Direction d17;
    static int p17;
    static MapInfo m17;

    static MapLocation l18;
    static int v18;
    static Direction d18;
    static int p18;
    static MapInfo m18;

    static MapLocation l24;
    static int v24;
    static Direction d24;
    static int p24;
    static MapInfo m24;

    static MapLocation l25;
    static int v25;
    static Direction d25;
    static int p25;
    static MapInfo m25;

    static MapLocation l26;
    static int v26;
    static Direction d26;
    static int p26;
    static MapInfo m26;

    static MapLocation l27;
    static int v27;
    static Direction d27;
    static int p27;
    static MapInfo m27;

    static MapLocation l28;
    static int v28;
    static Direction d28;
    static int p28;
    static MapInfo m28;

    static MapLocation l29;
    static int v29;
    static Direction d29;
    static int p29;
    static MapInfo m29;

    static MapLocation l30;
    static int v30;
    static Direction d30;
    static int p30;
    static MapInfo m30;

    static MapLocation l34;
    static int v34;
    static Direction d34;
    static int p34;
    static MapInfo m34;

    static MapLocation l35;
    static int v35;
    static Direction d35;
    static int p35;
    static MapInfo m35;

    static MapLocation l36;
    static int v36;
    static Direction d36;
    static int p36;
    static MapInfo m36;

    static MapLocation l37;
    static int v37;
    static Direction d37;
    static int p37;
    static MapInfo m37;

    static MapLocation l38;
    static int v38;
    static Direction d38;
    static int p38;
    static MapInfo m38;

    static MapLocation l39;
    static int v39;
    static Direction d39;
    static int p39;
    static MapInfo m39;

    static MapLocation l40;
    static int v40;
    static Direction d40;
    static int p40;
    static MapInfo m40;

    static MapLocation l41;
    static int v41;
    static Direction d41;
    static int p41;
    static MapInfo m41;

    static MapLocation l42;
    static int v42;
    static Direction d42;
    static int p42;
    static MapInfo m42;

    static MapLocation l45;
    static int v45;
    static Direction d45;
    static int p45;
    static MapInfo m45;

    static MapLocation l46;
    static int v46;
    static Direction d46;
    static int p46;
    static MapInfo m46;

    static MapLocation l47;
    static int v47;
    static Direction d47;
    static int p47;
    static MapInfo m47;

    static MapLocation l48;
    static int v48;
    static Direction d48;
    static int p48;
    static MapInfo m48;

    static MapLocation l49;
    static int v49;
    static Direction d49;
    static int p49;
    static MapInfo m49;

    static MapLocation l50;
    static int v50;
    static Direction d50;
    static int p50;
    static MapInfo m50;

    static MapLocation l51;
    static int v51;
    static Direction d51;
    static int p51;
    static MapInfo m51;

    static MapLocation l52;
    static int v52;
    static Direction d52;
    static int p52;
    static MapInfo m52;

    static MapLocation l53;
    static int v53;
    static Direction d53;
    static int p53;
    static MapInfo m53;

    static MapLocation l56;
    static int v56;
    static Direction d56;
    static int p56;
    static MapInfo m56;

    static MapLocation l57;
    static int v57;
    static Direction d57;
    static int p57;
    static MapInfo m57;

    static MapLocation l58;
    static int v58;
    static Direction d58;
    static int p58;
    static MapInfo m58;

    static MapLocation l59;
    static int v59;
    static Direction d59;
    static int p59;
    static MapInfo m59;

    static MapLocation l60;
    static int v60;
    static Direction d60;
    static int p60;
    static MapInfo m60;

    static MapLocation l61;
    static int v61;
    static Direction d61;
    static int p61;
    static MapInfo m61;

    static MapLocation l62;
    static int v62;
    static Direction d62;
    static int p62;
    static MapInfo m62;

    static MapLocation l63;
    static int v63;
    static Direction d63;
    static int p63;
    static MapInfo m63;

    static MapLocation l64;
    static int v64;
    static Direction d64;
    static int p64;
    static MapInfo m64;

    static MapLocation l67;
    static int v67;
    static Direction d67;
    static int p67;
    static MapInfo m67;

    static MapLocation l68;
    static int v68;
    static Direction d68;
    static int p68;
    static MapInfo m68;

    static MapLocation l69;
    static int v69;
    static Direction d69;
    static int p69;
    static MapInfo m69;

    static MapLocation l70;
    static int v70;
    static Direction d70;
    static int p70;
    static MapInfo m70;

    static MapLocation l71;
    static int v71;
    static Direction d71;
    static int p71;
    static MapInfo m71;

    static MapLocation l72;
    static int v72;
    static Direction d72;
    static int p72;
    static MapInfo m72;

    static MapLocation l73;
    static int v73;
    static Direction d73;
    static int p73;
    static MapInfo m73;

    static MapLocation l74;
    static int v74;
    static Direction d74;
    static int p74;
    static MapInfo m74;

    static MapLocation l75;
    static int v75;
    static Direction d75;
    static int p75;
    static MapInfo m75;

    static MapLocation l78;
    static int v78;
    static Direction d78;
    static int p78;
    static MapInfo m78;

    static MapLocation l79;
    static int v79;
    static Direction d79;
    static int p79;
    static MapInfo m79;

    static MapLocation l80;
    static int v80;
    static Direction d80;
    static int p80;
    static MapInfo m80;

    static MapLocation l81;
    static int v81;
    static Direction d81;
    static int p81;
    static MapInfo m81;

    static MapLocation l82;
    static int v82;
    static Direction d82;
    static int p82;
    static MapInfo m82;

    static MapLocation l83;
    static int v83;
    static Direction d83;
    static int p83;
    static MapInfo m83;

    static MapLocation l84;
    static int v84;
    static Direction d84;
    static int p84;
    static MapInfo m84;

    static MapLocation l85;
    static int v85;
    static Direction d85;
    static int p85;
    static MapInfo m85;

    static MapLocation l86;
    static int v86;
    static Direction d86;
    static int p86;
    static MapInfo m86;

    static MapLocation l90;
    static int v90;
    static Direction d90;
    static int p90;
    static MapInfo m90;

    static MapLocation l91;
    static int v91;
    static Direction d91;
    static int p91;
    static MapInfo m91;

    static MapLocation l92;
    static int v92;
    static Direction d92;
    static int p92;
    static MapInfo m92;

    static MapLocation l93;
    static int v93;
    static Direction d93;
    static int p93;
    static MapInfo m93;

    static MapLocation l94;
    static int v94;
    static Direction d94;
    static int p94;
    static MapInfo m94;

    static MapLocation l95;
    static int v95;
    static Direction d95;
    static int p95;
    static MapInfo m95;

    static MapLocation l96;
    static int v96;
    static Direction d96;
    static int p96;
    static MapInfo m96;

    static MapLocation l102;
    static int v102;
    static Direction d102;
    static int p102;
    static MapInfo m102;

    static MapLocation l103;
    static int v103;
    static Direction d103;
    static int p103;
    static MapInfo m103;

    static MapLocation l104;
    static int v104;
    static Direction d104;
    static int p104;
    static MapInfo m104;

    static MapLocation l105;
    static int v105;
    static Direction d105;
    static int p105;
    static MapInfo m105;

    static MapLocation l106;
    static int v106;
    static Direction d106;
    static int p106;
    static MapInfo m106;


    static void makeAssignments() throws GameActionException {
        l60 = rc.getLocation();
        v60 = 0;
        l61 = l60.add(Direction.NORTH);
        p61 = 0;
        if (rc.onTheMap(l61)) m61 =  rc.senseMapInfo(l61);
        else m61 =  null;
        l50 = l61.add(Direction.WEST);
        p50 = 0;
        if (rc.onTheMap(l50)) m50 =  rc.senseMapInfo(l50);
        else m50 =  null;
        l49 = l50.add(Direction.SOUTH);
        p49 = 0;
        if (rc.onTheMap(l49)) m49 =  rc.senseMapInfo(l49);
        else m49 =  null;
        l48 = l49.add(Direction.SOUTH);
        p48 = 0;
        if (rc.onTheMap(l48)) m48 =  rc.senseMapInfo(l48);
        else m48 =  null;
        l59 = l48.add(Direction.EAST);
        p59 = 0;
        if (rc.onTheMap(l59)) m59 =  rc.senseMapInfo(l59);
        else m59 =  null;
        l70 = l59.add(Direction.EAST);
        p70 = 0;
        if (rc.onTheMap(l70)) m70 =  rc.senseMapInfo(l70);
        else m70 =  null;
        l71 = l70.add(Direction.NORTH);
        p71 = 0;
        if (rc.onTheMap(l71)) m71 =  rc.senseMapInfo(l71);
        else m71 =  null;
        l72 = l71.add(Direction.NORTH);
        p72 = 0;
        if (rc.onTheMap(l72)) m72 =  rc.senseMapInfo(l72);
        else m72 =  null;
        l73 = l72.add(Direction.NORTH);
        p73 = 0;
        if (rc.onTheMap(l73)) m73 =  rc.senseMapInfo(l73);
        else m73 =  null;
        l62 = l73.add(Direction.WEST);
        p62 = 0;
        if (rc.onTheMap(l62)) m62 =  rc.senseMapInfo(l62);
        else m62 =  null;
        l51 = l62.add(Direction.WEST);
        p51 = 0;
        if (rc.onTheMap(l51)) m51 =  rc.senseMapInfo(l51);
        else m51 =  null;
        l40 = l51.add(Direction.WEST);
        p40 = 0;
        if (rc.onTheMap(l40)) m40 =  rc.senseMapInfo(l40);
        else m40 =  null;
        l39 = l40.add(Direction.SOUTH);
        p39 = 0;
        if (rc.onTheMap(l39)) m39 =  rc.senseMapInfo(l39);
        else m39 =  null;
        l38 = l39.add(Direction.SOUTH);
        p38 = 0;
        if (rc.onTheMap(l38)) m38 =  rc.senseMapInfo(l38);
        else m38 =  null;
        l37 = l38.add(Direction.SOUTH);
        p37 = 0;
        if (rc.onTheMap(l37)) m37 =  rc.senseMapInfo(l37);
        else m37 =  null;
        l36 = l37.add(Direction.SOUTH);
        p36 = 0;
        if (rc.onTheMap(l36)) m36 =  rc.senseMapInfo(l36);
        else m36 =  null;
        l47 = l36.add(Direction.EAST);
        p47 = 0;
        if (rc.onTheMap(l47)) m47 =  rc.senseMapInfo(l47);
        else m47 =  null;
        l58 = l47.add(Direction.EAST);
        p58 = 0;
        if (rc.onTheMap(l58)) m58 =  rc.senseMapInfo(l58);
        else m58 =  null;
        l69 = l58.add(Direction.EAST);
        p69 = 0;
        if (rc.onTheMap(l69)) m69 =  rc.senseMapInfo(l69);
        else m69 =  null;
        l80 = l69.add(Direction.EAST);
        p80 = 0;
        if (rc.onTheMap(l80)) m80 =  rc.senseMapInfo(l80);
        else m80 =  null;
        l81 = l80.add(Direction.NORTH);
        p81 = 0;
        if (rc.onTheMap(l81)) m81 =  rc.senseMapInfo(l81);
        else m81 =  null;
        l82 = l81.add(Direction.NORTH);
        p82 = 0;
        if (rc.onTheMap(l82)) m82 =  rc.senseMapInfo(l82);
        else m82 =  null;
        l83 = l82.add(Direction.NORTH);
        p83 = 0;
        if (rc.onTheMap(l83)) m83 =  rc.senseMapInfo(l83);
        else m83 =  null;
        l84 = l83.add(Direction.NORTH);
        p84 = 0;
        if (rc.onTheMap(l84)) m84 =  rc.senseMapInfo(l84);
        else m84 =  null;
        l74 = l84.add(Direction.NORTHWEST);
        p74 = 0;
        if (rc.onTheMap(l74)) m74 =  rc.senseMapInfo(l74);
        else m74 =  null;
        l63 = l74.add(Direction.WEST);
        p63 = 0;
        if (rc.onTheMap(l63)) m63 =  rc.senseMapInfo(l63);
        else m63 =  null;
        l52 = l63.add(Direction.WEST);
        p52 = 0;
        if (rc.onTheMap(l52)) m52 =  rc.senseMapInfo(l52);
        else m52 =  null;
        l41 = l52.add(Direction.WEST);
        p41 = 0;
        if (rc.onTheMap(l41)) m41 =  rc.senseMapInfo(l41);
        else m41 =  null;
        l29 = l41.add(Direction.SOUTHWEST);
        p29 = 0;
        if (rc.onTheMap(l29)) m29 =  rc.senseMapInfo(l29);
        else m29 =  null;
        l28 = l29.add(Direction.SOUTH);
        p28 = 0;
        if (rc.onTheMap(l28)) m28 =  rc.senseMapInfo(l28);
        else m28 =  null;
        l27 = l28.add(Direction.SOUTH);
        p27 = 0;
        if (rc.onTheMap(l27)) m27 =  rc.senseMapInfo(l27);
        else m27 =  null;
        l26 = l27.add(Direction.SOUTH);
        p26 = 0;
        if (rc.onTheMap(l26)) m26 =  rc.senseMapInfo(l26);
        else m26 =  null;
        l25 = l26.add(Direction.SOUTH);
        p25 = 0;
        if (rc.onTheMap(l25)) m25 =  rc.senseMapInfo(l25);
        else m25 =  null;
        l35 = l25.add(Direction.SOUTHEAST);
        p35 = 0;
        if (rc.onTheMap(l35)) m35 =  rc.senseMapInfo(l35);
        else m35 =  null;
        l46 = l35.add(Direction.EAST);
        p46 = 0;
        if (rc.onTheMap(l46)) m46 =  rc.senseMapInfo(l46);
        else m46 =  null;
        l57 = l46.add(Direction.EAST);
        p57 = 0;
        if (rc.onTheMap(l57)) m57 =  rc.senseMapInfo(l57);
        else m57 =  null;
        l68 = l57.add(Direction.EAST);
        p68 = 0;
        if (rc.onTheMap(l68)) m68 =  rc.senseMapInfo(l68);
        else m68 =  null;
        l79 = l68.add(Direction.EAST);
        p79 = 0;
        if (rc.onTheMap(l79)) m79 =  rc.senseMapInfo(l79);
        else m79 =  null;
        l91 = l79.add(Direction.NORTHEAST);
        p91 = 0;
        if (rc.onTheMap(l91)) m91 =  rc.senseMapInfo(l91);
        else m91 =  null;
        l92 = l91.add(Direction.NORTH);
        p92 = 0;
        if (rc.onTheMap(l92)) m92 =  rc.senseMapInfo(l92);
        else m92 =  null;
        l93 = l92.add(Direction.NORTH);
        p93 = 0;
        if (rc.onTheMap(l93)) m93 =  rc.senseMapInfo(l93);
        else m93 =  null;
        l94 = l93.add(Direction.NORTH);
        p94 = 0;
        if (rc.onTheMap(l94)) m94 =  rc.senseMapInfo(l94);
        else m94 =  null;
        l95 = l94.add(Direction.NORTH);
        p95 = 0;
        if (rc.onTheMap(l95)) m95 =  rc.senseMapInfo(l95);
        else m95 =  null;
        l85 = l95.add(Direction.NORTHWEST);
        p85 = 0;
        if (rc.onTheMap(l85)) m85 =  rc.senseMapInfo(l85);
        else m85 =  null;
        l75 = l85.add(Direction.NORTHWEST);
        p75 = 0;
        if (rc.onTheMap(l75)) m75 =  rc.senseMapInfo(l75);
        else m75 =  null;
        l64 = l75.add(Direction.WEST);
        p64 = 0;
        if (rc.onTheMap(l64)) m64 =  rc.senseMapInfo(l64);
        else m64 =  null;
        l53 = l64.add(Direction.WEST);
        p53 = 0;
        if (rc.onTheMap(l53)) m53 =  rc.senseMapInfo(l53);
        else m53 =  null;
        l42 = l53.add(Direction.WEST);
        p42 = 0;
        if (rc.onTheMap(l42)) m42 =  rc.senseMapInfo(l42);
        else m42 =  null;
        l30 = l42.add(Direction.SOUTHWEST);
        p30 = 0;
        if (rc.onTheMap(l30)) m30 =  rc.senseMapInfo(l30);
        else m30 =  null;
        l18 = l30.add(Direction.SOUTHWEST);
        p18 = 0;
        if (rc.onTheMap(l18)) m18 =  rc.senseMapInfo(l18);
        else m18 =  null;
        l17 = l18.add(Direction.SOUTH);
        p17 = 0;
        if (rc.onTheMap(l17)) m17 =  rc.senseMapInfo(l17);
        else m17 =  null;
        l16 = l17.add(Direction.SOUTH);
        p16 = 0;
        if (rc.onTheMap(l16)) m16 =  rc.senseMapInfo(l16);
        else m16 =  null;
        l15 = l16.add(Direction.SOUTH);
        p15 = 0;
        if (rc.onTheMap(l15)) m15 =  rc.senseMapInfo(l15);
        else m15 =  null;
        l14 = l15.add(Direction.SOUTH);
        p14 = 0;
        if (rc.onTheMap(l14)) m14 =  rc.senseMapInfo(l14);
        else m14 =  null;
        l24 = l14.add(Direction.SOUTHEAST);
        p24 = 0;
        if (rc.onTheMap(l24)) m24 =  rc.senseMapInfo(l24);
        else m24 =  null;
        l34 = l24.add(Direction.SOUTHEAST);
        p34 = 0;
        if (rc.onTheMap(l34)) m34 =  rc.senseMapInfo(l34);
        else m34 =  null;
        l45 = l34.add(Direction.EAST);
        p45 = 0;
        if (rc.onTheMap(l45)) m45 =  rc.senseMapInfo(l45);
        else m45 =  null;
        l56 = l45.add(Direction.EAST);
        p56 = 0;
        if (rc.onTheMap(l56)) m56 =  rc.senseMapInfo(l56);
        else m56 =  null;
        l67 = l56.add(Direction.EAST);
        p67 = 0;
        if (rc.onTheMap(l67)) m67 =  rc.senseMapInfo(l67);
        else m67 =  null;
        l78 = l67.add(Direction.EAST);
        p78 = 0;
        if (rc.onTheMap(l78)) m78 =  rc.senseMapInfo(l78);
        else m78 =  null;
        l90 = l78.add(Direction.NORTHEAST);
        p90 = 0;
        if (rc.onTheMap(l90)) m90 =  rc.senseMapInfo(l90);
        else m90 =  null;
        l102 = l90.add(Direction.NORTHEAST);
        p102 = 0;
        if (rc.onTheMap(l102)) m102 =  rc.senseMapInfo(l102);
        else m102 =  null;
        l103 = l102.add(Direction.NORTH);
        p103 = 0;
        if (rc.onTheMap(l103)) m103 =  rc.senseMapInfo(l103);
        else m103 =  null;
        l104 = l103.add(Direction.NORTH);
        p104 = 0;
        if (rc.onTheMap(l104)) m104 =  rc.senseMapInfo(l104);
        else m104 =  null;
        l105 = l104.add(Direction.NORTH);
        p105 = 0;
        if (rc.onTheMap(l105)) m105 =  rc.senseMapInfo(l105);
        else m105 =  null;
        l106 = l105.add(Direction.NORTH);
        p106 = 0;
        if (rc.onTheMap(l106)) m106 =  rc.senseMapInfo(l106);
        else m106 =  null;
        l96 = l106.add(Direction.NORTHWEST);
        p96 = 0;
        if (rc.onTheMap(l96)) m96 =  rc.senseMapInfo(l96);
        else m96 =  null;
        l86 = l96.add(Direction.NORTHWEST);
        p86 = 0;
        if (rc.onTheMap(l86)) m86 =  rc.senseMapInfo(l86);
        else m86 =  null;
    }


    static void computeDistsUnit() throws GameActionException {
        v49 = v60;
        d49 = Direction.WEST;
        if (!MovementManager.canMove(Direction.WEST)) v49 += 1000000;
        else v49 += 10 + p49 + 5*Util.getPaintLost(Direction.WEST) +  switch(m49.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            v59 = v49;
            d59 = d49;
        }
        else {
            v59 = v60;
            d59 = Direction.SOUTH;
        }
        if (!MovementManager.canMove(Direction.SOUTH)) v59 += 1000000;
        else v59 += 10 + p59 + 5*Util.getPaintLost(Direction.SOUTH) +  switch(m59.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            v61 = v49;
            d61 = d49;
        }
        else {
            v61 = v60;
            d61 = Direction.NORTH;
        }
        if (!MovementManager.canMove(Direction.NORTH)) v61 += 1000000;
        else v61 += 10 + p61 + 5*Util.getPaintLost(Direction.NORTH) +  switch(m61.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v61) {
            if (v61 > v59) {
                v71 = v59;
                d71 = d59;
            }
            else {
                v71 = v61;
                d71 = d61;
            }
        }
        else {
            if (v60 > v59) {
                v71 = v59;
                d71 = d59;
            }
            else {
                v71 = v60;
                d71 = Direction.EAST;
            }
        }
        if (!MovementManager.canMove(Direction.EAST)) v71 += 1000000;
        else v71 += 10 + p71 + 5*Util.getPaintLost(Direction.EAST) +  switch(m71.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            if (v49 > v59) {
                v48 = v59;
                d48 = d59;
            }
            else {
                v48 = v49;
                d48 = d49;
            }
        }
        else {
            if (v60 > v59) {
                v48 = v59;
                d48 = d59;
            }
            else {
                v48 = v60;
                d48 = Direction.SOUTHWEST;
            }
        }
        if (!MovementManager.canMove(Direction.SOUTHWEST)) v48 += 1000000;
        else v48 += 10 + p48 + 5*Util.getPaintLost(Direction.SOUTHWEST) +  switch(m48.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            if (v49 > v61) {
                v50 = v61;
                d50 = d61;
            }
            else {
                v50 = v49;
                d50 = d49;
            }
        }
        else {
            if (v60 > v61) {
                v50 = v61;
                d50 = d61;
            }
            else {
                v50 = v60;
                d50 = Direction.NORTHWEST;
            }
        }
        if (!MovementManager.canMove(Direction.NORTHWEST)) v50 += 1000000;
        else v50 += 10 + p50 + 5*Util.getPaintLost(Direction.NORTHWEST) +  switch(m50.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v71) {
            if (v71 > v59) {
                v70 = v59;
                d70 = d59;
            }
            else {
                v70 = v71;
                d70 = d71;
            }
        }
        else {
            if (v60 > v59) {
                v70 = v59;
                d70 = d59;
            }
            else {
                v70 = v60;
                d70 = Direction.SOUTHEAST;
            }
        }
        if (!MovementManager.canMove(Direction.SOUTHEAST)) v70 += 1000000;
        else v70 += 10 + p70 + 5*Util.getPaintLost(Direction.SOUTHEAST) +  switch(m70.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v61) {
            if (v61 > v71) {
                v72 = v71;
                d72 = d71;
            }
            else {
                v72 = v61;
                d72 = d61;
            }
        }
        else {
            if (v60 > v71) {
                v72 = v71;
                d72 = d71;
            }
            else {
                v72 = v60;
                d72 = Direction.NORTHEAST;
            }
        }
        if (!MovementManager.canMove(Direction.NORTHEAST)) v72 += 1000000;
        else v72 += 10 + p72 + 5*Util.getPaintLost(Direction.NORTHEAST) +  switch(m72.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v48) {
            if (v48 > v50) {
                v38 = v50;
                d38 = d50;
            }
            else {
                v38 = v48;
                d38 = d48;
            }
        }
        else {
            if (v49 > v50) {
                v38 = v50;
                d38 = d50;
            }
            else {
                v38 = v49;
                d38 = d49;
            }
        }
        if (m38 == null || !m38.isPassable()) v38 += 1000000;
        else v38 += 10 + p38 + switch(m38.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v48) {
            if (v48 > v70) {
                v58 = v70;
                d58 = d70;
            }
            else {
                v58 = v48;
                d58 = d48;
            }
        }
        else {
            if (v59 > v70) {
                v58 = v70;
                d58 = d70;
            }
            else {
                v58 = v59;
                d58 = d59;
            }
        }
        if (m58 == null || !m58.isPassable()) v58 += 1000000;
        else v58 += 10 + p58 + switch(m58.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v50) {
            if (v50 > v72) {
                v62 = v72;
                d62 = d72;
            }
            else {
                v62 = v50;
                d62 = d50;
            }
        }
        else {
            if (v61 > v72) {
                v62 = v72;
                d62 = d72;
            }
            else {
                v62 = v61;
                d62 = d61;
            }
        }
        if (m62 == null || !m62.isPassable()) v62 += 1000000;
        else v62 += 10 + p62 + switch(m62.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v72) {
            if (v72 > v70) {
                v82 = v70;
                d82 = d70;
            }
            else {
                v82 = v72;
                d82 = d72;
            }
        }
        else {
            if (v71 > v70) {
                v82 = v70;
                d82 = d70;
            }
            else {
                v82 = v71;
                d82 = d71;
            }
        }
        if (m82 == null || !m82.isPassable()) v82 += 1000000;
        else v82 += 10 + p82 + switch(m82.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v48) {
            if (v48 > v38) {
                v37 = v38;
                d37 = d38;
            }
            else {
                v37 = v48;
                d37 = d48;
            }
        }
        else {
            if (v49 > v38) {
                v37 = v38;
                d37 = d38;
            }
            else {
                v37 = v49;
                d37 = d49;
            }
        }
        if (m37 == null || !m37.isPassable()) v37 += 1000000;
        else v37 += 10 + p37 + switch(m37.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v50) {
            if (v50 > v38) {
                v39 = v38;
                d39 = d38;
            }
            else {
                v39 = v50;
                d39 = d50;
            }
        }
        else {
            if (v49 > v38) {
                v39 = v38;
                d39 = d38;
            }
            else {
                v39 = v49;
                d39 = d49;
            }
        }
        if (m39 == null || !m39.isPassable()) v39 += 1000000;
        else v39 += 10 + p39 + switch(m39.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v48) {
            if (v48 > v58) {
                if (v58 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v58;
                    d47 = d58;
                }
            }
            else {
                if (v48 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v48;
                    d47 = d48;
                }
            }
        }
        else {
            if (v59 > v58) {
                if (v58 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v58;
                    d47 = d58;
                }
            }
            else {
                if (v59 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v59;
                    d47 = d59;
                }
            }
        }
        if (m47 == null || !m47.isPassable()) v47 += 1000000;
        else v47 += 10 + p47 + switch(m47.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v50) {
            if (v50 > v62) {
                if (v62 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v62;
                    d51 = d62;
                }
            }
            else {
                if (v50 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v50;
                    d51 = d50;
                }
            }
        }
        else {
            if (v61 > v62) {
                if (v62 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v62;
                    d51 = d62;
                }
            }
            else {
                if (v61 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v61;
                    d51 = d61;
                }
            }
        }
        if (m51 == null || !m51.isPassable()) v51 += 1000000;
        else v51 += 10 + p51 + switch(m51.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v70) {
            if (v70 > v58) {
                v69 = v58;
                d69 = d58;
            }
            else {
                v69 = v70;
                d69 = d70;
            }
        }
        else {
            if (v59 > v58) {
                v69 = v58;
                d69 = d58;
            }
            else {
                v69 = v59;
                d69 = d59;
            }
        }
        if (m69 == null || !m69.isPassable()) v69 += 1000000;
        else v69 += 10 + p69 + switch(m69.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v72) {
            if (v72 > v62) {
                v73 = v62;
                d73 = d62;
            }
            else {
                v73 = v72;
                d73 = d72;
            }
        }
        else {
            if (v61 > v62) {
                v73 = v62;
                d73 = d62;
            }
            else {
                v73 = v61;
                d73 = d61;
            }
        }
        if (m73 == null || !m73.isPassable()) v73 += 1000000;
        else v73 += 10 + p73 + switch(m73.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v70) {
            if (v70 > v82) {
                if (v82 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v82;
                    d81 = d82;
                }
            }
            else {
                if (v70 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v70;
                    d81 = d70;
                }
            }
        }
        else {
            if (v71 > v82) {
                if (v82 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v82;
                    d81 = d82;
                }
            }
            else {
                if (v71 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v71;
                    d81 = d71;
                }
            }
        }
        if (m81 == null || !m81.isPassable()) v81 += 1000000;
        else v81 += 10 + p81 + switch(m81.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v72) {
            if (v72 > v82) {
                if (v82 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v82;
                    d83 = d82;
                }
            }
            else {
                if (v72 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v72;
                    d83 = d72;
                }
            }
        }
        else {
            if (v71 > v82) {
                if (v82 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v82;
                    d83 = d82;
                }
            }
            else {
                if (v71 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v71;
                    d83 = d71;
                }
            }
        }
        if (m83 == null || !m83.isPassable()) v83 += 1000000;
        else v83 += 10 + p83 + switch(m83.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v48 > v37) {
            if (v37 > v47) {
                v36 = v47;
                d36 = d47;
            }
            else {
                v36 = v37;
                d36 = d37;
            }
        }
        else {
            if (v48 > v47) {
                v36 = v47;
                d36 = d47;
            }
            else {
                v36 = v48;
                d36 = d48;
            }
        }
        if (m36 == null || !m36.isPassable()) v36 += 1000000;
        else v36 += 10 + p36 + switch(m36.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v50 > v39) {
            if (v39 > v51) {
                v40 = v51;
                d40 = d51;
            }
            else {
                v40 = v39;
                d40 = d39;
            }
        }
        else {
            if (v50 > v51) {
                v40 = v51;
                d40 = d51;
            }
            else {
                v40 = v50;
                d40 = d50;
            }
        }
        if (m40 == null || !m40.isPassable()) v40 += 1000000;
        else v40 += 10 + p40 + switch(m40.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v70 > v81) {
            if (v81 > v69) {
                v80 = v69;
                d80 = d69;
            }
            else {
                v80 = v81;
                d80 = d81;
            }
        }
        else {
            if (v70 > v69) {
                v80 = v69;
                d80 = d69;
            }
            else {
                v80 = v70;
                d80 = d70;
            }
        }
        if (m80 == null || !m80.isPassable()) v80 += 1000000;
        else v80 += 10 + p80 + switch(m80.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v72 > v73) {
            if (v73 > v83) {
                v84 = v83;
                d84 = d83;
            }
            else {
                v84 = v73;
                d84 = d73;
            }
        }
        else {
            if (v72 > v83) {
                v84 = v83;
                d84 = d83;
            }
            else {
                v84 = v72;
                d84 = d72;
            }
        }
        if (m84 == null || !m84.isPassable()) v84 += 1000000;
        else v84 += 10 + p84 + switch(m84.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v37) {
            if (v37 > v39) {
                v27 = v39;
                d27 = d39;
            }
            else {
                v27 = v37;
                d27 = d37;
            }
        }
        else {
            if (v38 > v39) {
                v27 = v39;
                d27 = d39;
            }
            else {
                v27 = v38;
                d27 = d38;
            }
        }
        if (m27 == null || !m27.isPassable()) v27 += 1000000;
        else v27 += 10 + p27 + switch(m27.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v47) {
            if (v47 > v69) {
                v57 = v69;
                d57 = d69;
            }
            else {
                v57 = v47;
                d57 = d47;
            }
        }
        else {
            if (v58 > v69) {
                v57 = v69;
                d57 = d69;
            }
            else {
                v57 = v58;
                d57 = d58;
            }
        }
        if (m57 == null || !m57.isPassable()) v57 += 1000000;
        else v57 += 10 + p57 + switch(m57.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v51) {
            if (v51 > v73) {
                v63 = v73;
                d63 = d73;
            }
            else {
                v63 = v51;
                d63 = d51;
            }
        }
        else {
            if (v62 > v73) {
                v63 = v73;
                d63 = d73;
            }
            else {
                v63 = v62;
                d63 = d62;
            }
        }
        if (m63 == null || !m63.isPassable()) v63 += 1000000;
        else v63 += 10 + p63 + switch(m63.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v83) {
            if (v83 > v81) {
                v93 = v81;
                d93 = d81;
            }
            else {
                v93 = v83;
                d93 = d83;
            }
        }
        else {
            if (v82 > v81) {
                v93 = v81;
                d93 = d81;
            }
            else {
                v93 = v82;
                d93 = d82;
            }
        }
        if (m93 == null || !m93.isPassable()) v93 += 1000000;
        else v93 += 10 + p93 + switch(m93.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v37) {
            if (v37 > v36) {
                if (v36 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v36;
                    d26 = d36;
                }
            }
            else {
                if (v37 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v37;
                    d26 = d37;
                }
            }
        }
        else {
            if (v38 > v36) {
                if (v36 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v36;
                    d26 = d36;
                }
            }
            else {
                if (v38 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v38;
                    d26 = d38;
                }
            }
        }
        if (m26 == null || !m26.isPassable()) v26 += 1000000;
        else v26 += 10 + p26 + switch(m26.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v39) {
            if (v39 > v40) {
                if (v40 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v40;
                    d28 = d40;
                }
            }
            else {
                if (v39 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v39;
                    d28 = d39;
                }
            }
        }
        else {
            if (v38 > v40) {
                if (v40 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v40;
                    d28 = d40;
                }
            }
            else {
                if (v38 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v38;
                    d28 = d38;
                }
            }
        }
        if (m28 == null || !m28.isPassable()) v28 += 1000000;
        else v28 += 10 + p28 + switch(m28.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v47) {
            if (v47 > v36) {
                if (v36 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v36;
                    d46 = d36;
                }
            }
            else {
                if (v47 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v47;
                    d46 = d47;
                }
            }
        }
        else {
            if (v58 > v36) {
                if (v36 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v36;
                    d46 = d36;
                }
            }
            else {
                if (v58 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v58;
                    d46 = d58;
                }
            }
        }
        if (m46 == null || !m46.isPassable()) v46 += 1000000;
        else v46 += 10 + p46 + switch(m46.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v51) {
            if (v51 > v40) {
                if (v40 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v40;
                    d52 = d40;
                }
            }
            else {
                if (v51 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v51;
                    d52 = d51;
                }
            }
        }
        else {
            if (v62 > v40) {
                if (v40 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v40;
                    d52 = d40;
                }
            }
            else {
                if (v62 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v62;
                    d52 = d62;
                }
            }
        }
        if (m52 == null || !m52.isPassable()) v52 += 1000000;
        else v52 += 10 + p52 + switch(m52.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v69) {
            if (v69 > v80) {
                if (v80 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v80;
                    d68 = d80;
                }
            }
            else {
                if (v69 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v69;
                    d68 = d69;
                }
            }
        }
        else {
            if (v58 > v80) {
                if (v80 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v80;
                    d68 = d80;
                }
            }
            else {
                if (v58 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v58;
                    d68 = d58;
                }
            }
        }
        if (m68 == null || !m68.isPassable()) v68 += 1000000;
        else v68 += 10 + p68 + switch(m68.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v73) {
            if (v73 > v84) {
                if (v84 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v84;
                    d74 = d84;
                }
            }
            else {
                if (v73 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v73;
                    d74 = d73;
                }
            }
        }
        else {
            if (v62 > v84) {
                if (v84 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v84;
                    d74 = d84;
                }
            }
            else {
                if (v62 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v62;
                    d74 = d62;
                }
            }
        }
        if (m74 == null || !m74.isPassable()) v74 += 1000000;
        else v74 += 10 + p74 + switch(m74.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v81) {
            if (v81 > v80) {
                if (v80 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v80;
                    d92 = d80;
                }
            }
            else {
                if (v81 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v81;
                    d92 = d81;
                }
            }
        }
        else {
            if (v82 > v80) {
                if (v80 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v80;
                    d92 = d80;
                }
            }
            else {
                if (v82 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v82;
                    d92 = d82;
                }
            }
        }
        if (m92 == null || !m92.isPassable()) v92 += 1000000;
        else v92 += 10 + p92 + switch(m92.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v83) {
            if (v83 > v84) {
                if (v84 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v84;
                    d94 = d84;
                }
            }
            else {
                if (v83 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v83;
                    d94 = d83;
                }
            }
        }
        else {
            if (v82 > v84) {
                if (v84 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v84;
                    d94 = d84;
                }
            }
            else {
                if (v82 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v82;
                    d94 = d82;
                }
            }
        }
        if (m94 == null || !m94.isPassable()) v94 += 1000000;
        else v94 += 10 + p94 + switch(m94.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v37 > v36) {
            if (v36 > v26) {
                v25 = v26;
                d25 = d26;
            }
            else {
                v25 = v36;
                d25 = d36;
            }
        }
        else {
            if (v37 > v26) {
                v25 = v26;
                d25 = d26;
            }
            else {
                v25 = v37;
                d25 = d37;
            }
        }
        if (m25 == null || !m25.isPassable()) v25 += 1000000;
        else v25 += 10 + p25 + switch(m25.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v39 > v40) {
            if (v40 > v28) {
                v29 = v28;
                d29 = d28;
            }
            else {
                v29 = v40;
                d29 = d40;
            }
        }
        else {
            if (v39 > v28) {
                v29 = v28;
                d29 = d28;
            }
            else {
                v29 = v39;
                d29 = d39;
            }
        }
        if (m29 == null || !m29.isPassable()) v29 += 1000000;
        else v29 += 10 + p29 + switch(m29.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v47 > v36) {
            if (v36 > v46) {
                if (v46 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v46;
                    d35 = d46;
                }
            }
            else {
                if (v36 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v36;
                    d35 = d36;
                }
            }
        }
        else {
            if (v47 > v46) {
                if (v46 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v46;
                    d35 = d46;
                }
            }
            else {
                if (v47 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v47;
                    d35 = d47;
                }
            }
        }
        if (m35 == null || !m35.isPassable()) v35 += 1000000;
        else v35 += 10 + p35 + switch(m35.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v51 > v40) {
            if (v40 > v52) {
                if (v52 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v52;
                    d41 = d52;
                }
            }
            else {
                if (v40 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v40;
                    d41 = d40;
                }
            }
        }
        else {
            if (v51 > v52) {
                if (v52 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v52;
                    d41 = d52;
                }
            }
            else {
                if (v51 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v51;
                    d41 = d51;
                }
            }
        }
        if (m41 == null || !m41.isPassable()) v41 += 1000000;
        else v41 += 10 + p41 + switch(m41.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v69 > v80) {
            if (v80 > v68) {
                v79 = v68;
                d79 = d68;
            }
            else {
                v79 = v80;
                d79 = d80;
            }
        }
        else {
            if (v69 > v68) {
                v79 = v68;
                d79 = d68;
            }
            else {
                v79 = v69;
                d79 = d69;
            }
        }
        if (m79 == null || !m79.isPassable()) v79 += 1000000;
        else v79 += 10 + p79 + switch(m79.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v73 > v84) {
            if (v84 > v74) {
                v85 = v74;
                d85 = d74;
            }
            else {
                v85 = v84;
                d85 = d84;
            }
        }
        else {
            if (v73 > v74) {
                v85 = v74;
                d85 = d74;
            }
            else {
                v85 = v73;
                d85 = d73;
            }
        }
        if (m85 == null || !m85.isPassable()) v85 += 1000000;
        else v85 += 10 + p85 + switch(m85.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v81 > v80) {
            if (v80 > v92) {
                if (v92 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v92;
                    d91 = d92;
                }
            }
            else {
                if (v80 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v80;
                    d91 = d80;
                }
            }
        }
        else {
            if (v81 > v92) {
                if (v92 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v92;
                    d91 = d92;
                }
            }
            else {
                if (v81 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v81;
                    d91 = d81;
                }
            }
        }
        if (m91 == null || !m91.isPassable()) v91 += 1000000;
        else v91 += 10 + p91 + switch(m91.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v83 > v84) {
            if (v84 > v94) {
                if (v94 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v94;
                    d95 = d94;
                }
            }
            else {
                if (v84 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v84;
                    d95 = d84;
                }
            }
        }
        else {
            if (v83 > v94) {
                if (v94 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v94;
                    d95 = d94;
                }
            }
            else {
                if (v83 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v83;
                    d95 = d83;
                }
            }
        }
        if (m95 == null || !m95.isPassable()) v95 += 1000000;
        else v95 += 10 + p95 + switch(m95.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v26) {
            if (v26 > v28) {
                v16 = v28;
                d16 = d28;
            }
            else {
                v16 = v26;
                d16 = d26;
            }
        }
        else {
            if (v27 > v28) {
                v16 = v28;
                d16 = d28;
            }
            else {
                v16 = v27;
                d16 = d27;
            }
        }
        if (m16 == null || !m16.isPassable()) v16 += 1000000;
        else v16 += 10 + p16 + switch(m16.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v46) {
            if (v46 > v68) {
                v56 = v68;
                d56 = d68;
            }
            else {
                v56 = v46;
                d56 = d46;
            }
        }
        else {
            if (v57 > v68) {
                v56 = v68;
                d56 = d68;
            }
            else {
                v56 = v57;
                d56 = d57;
            }
        }
        if (m56 == null || !m56.isPassable()) v56 += 1000000;
        else v56 += 10 + p56 + switch(m56.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v52) {
            if (v52 > v74) {
                v64 = v74;
                d64 = d74;
            }
            else {
                v64 = v52;
                d64 = d52;
            }
        }
        else {
            if (v63 > v74) {
                v64 = v74;
                d64 = d74;
            }
            else {
                v64 = v63;
                d64 = d63;
            }
        }
        if (m64 == null || !m64.isPassable()) v64 += 1000000;
        else v64 += 10 + p64 + switch(m64.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v94) {
            if (v94 > v92) {
                v104 = v92;
                d104 = d92;
            }
            else {
                v104 = v94;
                d104 = d94;
            }
        }
        else {
            if (v93 > v92) {
                v104 = v92;
                d104 = d92;
            }
            else {
                v104 = v93;
                d104 = d93;
            }
        }
        if (m104 == null || !m104.isPassable()) v104 += 1000000;
        else v104 += 10 + p104 + switch(m104.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v26) {
            if (v26 > v25) {
                if (v25 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v25;
                    d15 = d25;
                }
            }
            else {
                if (v26 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v26;
                    d15 = d26;
                }
            }
        }
        else {
            if (v27 > v25) {
                if (v25 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v25;
                    d15 = d25;
                }
            }
            else {
                if (v27 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v27;
                    d15 = d27;
                }
            }
        }
        if (m15 == null || !m15.isPassable()) v15 += 1000000;
        else v15 += 10 + p15 + switch(m15.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v28) {
            if (v28 > v29) {
                if (v29 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v29;
                    d17 = d29;
                }
            }
            else {
                if (v28 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v28;
                    d17 = d28;
                }
            }
        }
        else {
            if (v27 > v29) {
                if (v29 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v29;
                    d17 = d29;
                }
            }
            else {
                if (v27 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v27;
                    d17 = d27;
                }
            }
        }
        if (m17 == null || !m17.isPassable()) v17 += 1000000;
        else v17 += 10 + p17 + switch(m17.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v46) {
            if (v46 > v35) {
                if (v35 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v35;
                    d45 = d35;
                }
            }
            else {
                if (v46 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v46;
                    d45 = d46;
                }
            }
        }
        else {
            if (v57 > v35) {
                if (v35 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v35;
                    d45 = d35;
                }
            }
            else {
                if (v57 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v57;
                    d45 = d57;
                }
            }
        }
        if (m45 == null || !m45.isPassable()) v45 += 1000000;
        else v45 += 10 + p45 + switch(m45.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v52) {
            if (v52 > v41) {
                if (v41 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v41;
                    d53 = d41;
                }
            }
            else {
                if (v52 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v52;
                    d53 = d52;
                }
            }
        }
        else {
            if (v63 > v41) {
                if (v41 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v41;
                    d53 = d41;
                }
            }
            else {
                if (v63 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v63;
                    d53 = d63;
                }
            }
        }
        if (m53 == null || !m53.isPassable()) v53 += 1000000;
        else v53 += 10 + p53 + switch(m53.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v68) {
            if (v68 > v79) {
                if (v79 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v79;
                    d67 = d79;
                }
            }
            else {
                if (v68 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v68;
                    d67 = d68;
                }
            }
        }
        else {
            if (v57 > v79) {
                if (v79 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v79;
                    d67 = d79;
                }
            }
            else {
                if (v57 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v57;
                    d67 = d57;
                }
            }
        }
        if (m67 == null || !m67.isPassable()) v67 += 1000000;
        else v67 += 10 + p67 + switch(m67.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v74) {
            if (v74 > v85) {
                if (v85 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v85;
                    d75 = d85;
                }
            }
            else {
                if (v74 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v74;
                    d75 = d74;
                }
            }
        }
        else {
            if (v63 > v85) {
                if (v85 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v85;
                    d75 = d85;
                }
            }
            else {
                if (v63 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v63;
                    d75 = d63;
                }
            }
        }
        if (m75 == null || !m75.isPassable()) v75 += 1000000;
        else v75 += 10 + p75 + switch(m75.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v92) {
            if (v92 > v91) {
                if (v91 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v91;
                    d103 = d91;
                }
            }
            else {
                if (v92 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v92;
                    d103 = d92;
                }
            }
        }
        else {
            if (v93 > v91) {
                if (v91 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v91;
                    d103 = d91;
                }
            }
            else {
                if (v93 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v93;
                    d103 = d93;
                }
            }
        }
        if (m103 == null || !m103.isPassable()) v103 += 1000000;
        else v103 += 10 + p103 + switch(m103.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v94) {
            if (v94 > v95) {
                if (v95 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v95;
                    d105 = d95;
                }
            }
            else {
                if (v94 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v94;
                    d105 = d94;
                }
            }
        }
        else {
            if (v93 > v95) {
                if (v95 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v95;
                    d105 = d95;
                }
            }
            else {
                if (v93 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v93;
                    d105 = d93;
                }
            }
        }
        if (m105 == null || !m105.isPassable()) v105 += 1000000;
        else v105 += 10 + p105 + switch(m105.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v36 > v25) {
            if (v25 > v35) {
                v24 = v35;
                d24 = d35;
            }
            else {
                v24 = v25;
                d24 = d25;
            }
        }
        else {
            if (v36 > v35) {
                v24 = v35;
                d24 = d35;
            }
            else {
                v24 = v36;
                d24 = d36;
            }
        }
        if (m24 == null || !m24.isPassable()) v24 += 1000000;
        else v24 += 10 + p24 + switch(m24.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v40 > v29) {
            if (v29 > v41) {
                v30 = v41;
                d30 = d41;
            }
            else {
                v30 = v29;
                d30 = d29;
            }
        }
        else {
            if (v40 > v41) {
                v30 = v41;
                d30 = d41;
            }
            else {
                v30 = v40;
                d30 = d40;
            }
        }
        if (m30 == null || !m30.isPassable()) v30 += 1000000;
        else v30 += 10 + p30 + switch(m30.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v80 > v91) {
            if (v91 > v79) {
                v90 = v79;
                d90 = d79;
            }
            else {
                v90 = v91;
                d90 = d91;
            }
        }
        else {
            if (v80 > v79) {
                v90 = v79;
                d90 = d79;
            }
            else {
                v90 = v80;
                d90 = d80;
            }
        }
        if (m90 == null || !m90.isPassable()) v90 += 1000000;
        else v90 += 10 + p90 + switch(m90.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v84 > v85) {
            if (v85 > v95) {
                v96 = v95;
                d96 = d95;
            }
            else {
                v96 = v85;
                d96 = d85;
            }
        }
        else {
            if (v84 > v95) {
                v96 = v95;
                d96 = d95;
            }
            else {
                v96 = v84;
                d96 = d84;
            }
        }
        if (m96 == null || !m96.isPassable()) v96 += 1000000;
        else v96 += 10 + p96 + switch(m96.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v26 > v25) {
            if (v25 > v15) {
                if (v15 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v15;
                    d14 = d15;
                }
            }
            else {
                if (v25 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v25;
                    d14 = d25;
                }
            }
        }
        else {
            if (v26 > v15) {
                if (v15 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v15;
                    d14 = d15;
                }
            }
            else {
                if (v26 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v26;
                    d14 = d26;
                }
            }
        }
        if (m14 == null || !m14.isPassable()) v14 += 1000000;
        else v14 += 10 + p14 + switch(m14.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v28 > v29) {
            if (v29 > v17) {
                if (v17 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v17;
                    d18 = d17;
                }
            }
            else {
                if (v29 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v29;
                    d18 = d29;
                }
            }
        }
        else {
            if (v28 > v17) {
                if (v17 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v17;
                    d18 = d17;
                }
            }
            else {
                if (v28 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v28;
                    d18 = d28;
                }
            }
        }
        if (m18 == null || !m18.isPassable()) v18 += 1000000;
        else v18 += 10 + p18 + switch(m18.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v46 > v35) {
            if (v35 > v45) {
                if (v45 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v45;
                    d34 = d45;
                }
            }
            else {
                if (v35 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v35;
                    d34 = d35;
                }
            }
        }
        else {
            if (v46 > v45) {
                if (v45 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v45;
                    d34 = d45;
                }
            }
            else {
                if (v46 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v46;
                    d34 = d46;
                }
            }
        }
        if (m34 == null || !m34.isPassable()) v34 += 1000000;
        else v34 += 10 + p34 + switch(m34.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v52 > v41) {
            if (v41 > v53) {
                if (v53 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v53;
                    d42 = d53;
                }
            }
            else {
                if (v41 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v41;
                    d42 = d41;
                }
            }
        }
        else {
            if (v52 > v53) {
                if (v53 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v53;
                    d42 = d53;
                }
            }
            else {
                if (v52 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v52;
                    d42 = d52;
                }
            }
        }
        if (m42 == null || !m42.isPassable()) v42 += 1000000;
        else v42 += 10 + p42 + switch(m42.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v68 > v79) {
            if (v79 > v67) {
                if (v67 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v67;
                    d78 = d67;
                }
            }
            else {
                if (v79 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v79;
                    d78 = d79;
                }
            }
        }
        else {
            if (v68 > v67) {
                if (v67 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v67;
                    d78 = d67;
                }
            }
            else {
                if (v68 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v68;
                    d78 = d68;
                }
            }
        }
        if (m78 == null || !m78.isPassable()) v78 += 1000000;
        else v78 += 10 + p78 + switch(m78.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v74 > v85) {
            if (v85 > v75) {
                if (v75 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v75;
                    d86 = d75;
                }
            }
            else {
                if (v85 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v85;
                    d86 = d85;
                }
            }
        }
        else {
            if (v74 > v75) {
                if (v75 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v75;
                    d86 = d75;
                }
            }
            else {
                if (v74 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v74;
                    d86 = d74;
                }
            }
        }
        if (m86 == null || !m86.isPassable()) v86 += 1000000;
        else v86 += 10 + p86 + switch(m86.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v92 > v91) {
            if (v91 > v103) {
                if (v103 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v103;
                    d102 = d103;
                }
            }
            else {
                if (v91 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v91;
                    d102 = d91;
                }
            }
        }
        else {
            if (v92 > v103) {
                if (v103 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v103;
                    d102 = d103;
                }
            }
            else {
                if (v92 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v92;
                    d102 = d92;
                }
            }
        }
        if (m102 == null || !m102.isPassable()) v102 += 1000000;
        else v102 += 10 + p102 + switch(m102.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v94 > v95) {
            if (v95 > v105) {
                if (v105 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v105;
                    d106 = d105;
                }
            }
            else {
                if (v95 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v95;
                    d106 = d95;
                }
            }
        }
        else {
            if (v94 > v105) {
                if (v105 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v105;
                    d106 = d105;
                }
            }
            else {
                if (v94 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v94;
                    d106 = d94;
                }
            }
        }
        if (m106 == null || !m106.isPassable()) v106 += 1000000;
        else v106 += 10 + p106 + switch(m106.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
    }

    static void computeDistsTower() throws GameActionException {
        v49 = v60;
        d49 = Direction.WEST;
        if (m49 == null || !m49.isPassable()) v49 += 1000000;
        else v49 += 10 + p49 + switch(m49.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            v59 = v49;
            d59 = d49;
        }
        else {
            v59 = v60;
            d59 = Direction.SOUTH;
        }
        if (m59 == null || !m59.isPassable()) v59 += 1000000;
        else v59 += 10 + p59 + switch(m59.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            v61 = v49;
            d61 = d49;
        }
        else {
            v61 = v60;
            d61 = Direction.NORTH;
        }
        if (m61 == null || !m61.isPassable()) v61 += 1000000;
        else v61 += 10 + p61 + switch(m61.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v61) {
            if (v61 > v59) {
                v71 = v59;
                d71 = d59;
            }
            else {
                v71 = v61;
                d71 = d61;
            }
        }
        else {
            if (v60 > v59) {
                v71 = v59;
                d71 = d59;
            }
            else {
                v71 = v60;
                d71 = Direction.EAST;
            }
        }
        if (m71 == null || !m71.isPassable()) v71 += 1000000;
        else v71 += 10 + p71 + switch(m71.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            if (v49 > v59) {
                v48 = v59;
                d48 = d59;
            }
            else {
                v48 = v49;
                d48 = d49;
            }
        }
        else {
            if (v60 > v59) {
                v48 = v59;
                d48 = d59;
            }
            else {
                v48 = v60;
                d48 = Direction.SOUTHWEST;
            }
        }
        if (m48 == null || !m48.isPassable()) v48 += 1000000;
        else v48 += 10 + p48 + switch(m48.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v49) {
            if (v49 > v61) {
                v50 = v61;
                d50 = d61;
            }
            else {
                v50 = v49;
                d50 = d49;
            }
        }
        else {
            if (v60 > v61) {
                v50 = v61;
                d50 = d61;
            }
            else {
                v50 = v60;
                d50 = Direction.NORTHWEST;
            }
        }
        if (m50 == null || !m50.isPassable()) v50 += 1000000;
        else v50 += 10 + p50 + switch(m50.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v71) {
            if (v71 > v59) {
                v70 = v59;
                d70 = d59;
            }
            else {
                v70 = v71;
                d70 = d71;
            }
        }
        else {
            if (v60 > v59) {
                v70 = v59;
                d70 = d59;
            }
            else {
                v70 = v60;
                d70 = Direction.SOUTHEAST;
            }
        }
        if (m70 == null || !m70.isPassable()) v70 += 1000000;
        else v70 += 10 + p70 + switch(m70.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v60 > v61) {
            if (v61 > v71) {
                v72 = v71;
                d72 = d71;
            }
            else {
                v72 = v61;
                d72 = d61;
            }
        }
        else {
            if (v60 > v71) {
                v72 = v71;
                d72 = d71;
            }
            else {
                v72 = v60;
                d72 = Direction.NORTHEAST;
            }
        }
        if (m72 == null || !m72.isPassable()) v72 += 1000000;
        else v72 += 10 + p72 + switch(m72.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v48) {
            if (v48 > v50) {
                v38 = v50;
                d38 = d50;
            }
            else {
                v38 = v48;
                d38 = d48;
            }
        }
        else {
            if (v49 > v50) {
                v38 = v50;
                d38 = d50;
            }
            else {
                v38 = v49;
                d38 = d49;
            }
        }
        if (m38 == null || !m38.isPassable()) v38 += 1000000;
        else v38 += 10 + p38 + switch(m38.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v48) {
            if (v48 > v70) {
                v58 = v70;
                d58 = d70;
            }
            else {
                v58 = v48;
                d58 = d48;
            }
        }
        else {
            if (v59 > v70) {
                v58 = v70;
                d58 = d70;
            }
            else {
                v58 = v59;
                d58 = d59;
            }
        }
        if (m58 == null || !m58.isPassable()) v58 += 1000000;
        else v58 += 10 + p58 + switch(m58.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v50) {
            if (v50 > v72) {
                v62 = v72;
                d62 = d72;
            }
            else {
                v62 = v50;
                d62 = d50;
            }
        }
        else {
            if (v61 > v72) {
                v62 = v72;
                d62 = d72;
            }
            else {
                v62 = v61;
                d62 = d61;
            }
        }
        if (m62 == null || !m62.isPassable()) v62 += 1000000;
        else v62 += 10 + p62 + switch(m62.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v72) {
            if (v72 > v70) {
                v82 = v70;
                d82 = d70;
            }
            else {
                v82 = v72;
                d82 = d72;
            }
        }
        else {
            if (v71 > v70) {
                v82 = v70;
                d82 = d70;
            }
            else {
                v82 = v71;
                d82 = d71;
            }
        }
        if (m82 == null || !m82.isPassable()) v82 += 1000000;
        else v82 += 10 + p82 + switch(m82.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v48) {
            if (v48 > v38) {
                v37 = v38;
                d37 = d38;
            }
            else {
                v37 = v48;
                d37 = d48;
            }
        }
        else {
            if (v49 > v38) {
                v37 = v38;
                d37 = d38;
            }
            else {
                v37 = v49;
                d37 = d49;
            }
        }
        if (m37 == null || !m37.isPassable()) v37 += 1000000;
        else v37 += 10 + p37 + switch(m37.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v49 > v50) {
            if (v50 > v38) {
                v39 = v38;
                d39 = d38;
            }
            else {
                v39 = v50;
                d39 = d50;
            }
        }
        else {
            if (v49 > v38) {
                v39 = v38;
                d39 = d38;
            }
            else {
                v39 = v49;
                d39 = d49;
            }
        }
        if (m39 == null || !m39.isPassable()) v39 += 1000000;
        else v39 += 10 + p39 + switch(m39.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v48) {
            if (v48 > v58) {
                if (v58 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v58;
                    d47 = d58;
                }
            }
            else {
                if (v48 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v48;
                    d47 = d48;
                }
            }
        }
        else {
            if (v59 > v58) {
                if (v58 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v58;
                    d47 = d58;
                }
            }
            else {
                if (v59 > v37) {
                    v47 = v37;
                    d47 = d37;
                }
                else {
                    v47 = v59;
                    d47 = d59;
                }
            }
        }
        if (m47 == null || !m47.isPassable()) v47 += 1000000;
        else v47 += 10 + p47 + switch(m47.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v50) {
            if (v50 > v62) {
                if (v62 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v62;
                    d51 = d62;
                }
            }
            else {
                if (v50 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v50;
                    d51 = d50;
                }
            }
        }
        else {
            if (v61 > v62) {
                if (v62 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v62;
                    d51 = d62;
                }
            }
            else {
                if (v61 > v39) {
                    v51 = v39;
                    d51 = d39;
                }
                else {
                    v51 = v61;
                    d51 = d61;
                }
            }
        }
        if (m51 == null || !m51.isPassable()) v51 += 1000000;
        else v51 += 10 + p51 + switch(m51.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v59 > v70) {
            if (v70 > v58) {
                v69 = v58;
                d69 = d58;
            }
            else {
                v69 = v70;
                d69 = d70;
            }
        }
        else {
            if (v59 > v58) {
                v69 = v58;
                d69 = d58;
            }
            else {
                v69 = v59;
                d69 = d59;
            }
        }
        if (m69 == null || !m69.isPassable()) v69 += 1000000;
        else v69 += 10 + p69 + switch(m69.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v61 > v72) {
            if (v72 > v62) {
                v73 = v62;
                d73 = d62;
            }
            else {
                v73 = v72;
                d73 = d72;
            }
        }
        else {
            if (v61 > v62) {
                v73 = v62;
                d73 = d62;
            }
            else {
                v73 = v61;
                d73 = d61;
            }
        }
        if (m73 == null || !m73.isPassable()) v73 += 1000000;
        else v73 += 10 + p73 + switch(m73.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v70) {
            if (v70 > v82) {
                if (v82 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v82;
                    d81 = d82;
                }
            }
            else {
                if (v70 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v70;
                    d81 = d70;
                }
            }
        }
        else {
            if (v71 > v82) {
                if (v82 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v82;
                    d81 = d82;
                }
            }
            else {
                if (v71 > v69) {
                    v81 = v69;
                    d81 = d69;
                }
                else {
                    v81 = v71;
                    d81 = d71;
                }
            }
        }
        if (m81 == null || !m81.isPassable()) v81 += 1000000;
        else v81 += 10 + p81 + switch(m81.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v71 > v72) {
            if (v72 > v82) {
                if (v82 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v82;
                    d83 = d82;
                }
            }
            else {
                if (v72 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v72;
                    d83 = d72;
                }
            }
        }
        else {
            if (v71 > v82) {
                if (v82 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v82;
                    d83 = d82;
                }
            }
            else {
                if (v71 > v73) {
                    v83 = v73;
                    d83 = d73;
                }
                else {
                    v83 = v71;
                    d83 = d71;
                }
            }
        }
        if (m83 == null || !m83.isPassable()) v83 += 1000000;
        else v83 += 10 + p83 + switch(m83.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v48 > v37) {
            if (v37 > v47) {
                v36 = v47;
                d36 = d47;
            }
            else {
                v36 = v37;
                d36 = d37;
            }
        }
        else {
            if (v48 > v47) {
                v36 = v47;
                d36 = d47;
            }
            else {
                v36 = v48;
                d36 = d48;
            }
        }
        if (m36 == null || !m36.isPassable()) v36 += 1000000;
        else v36 += 10 + p36 + switch(m36.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v50 > v39) {
            if (v39 > v51) {
                v40 = v51;
                d40 = d51;
            }
            else {
                v40 = v39;
                d40 = d39;
            }
        }
        else {
            if (v50 > v51) {
                v40 = v51;
                d40 = d51;
            }
            else {
                v40 = v50;
                d40 = d50;
            }
        }
        if (m40 == null || !m40.isPassable()) v40 += 1000000;
        else v40 += 10 + p40 + switch(m40.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v70 > v81) {
            if (v81 > v69) {
                v80 = v69;
                d80 = d69;
            }
            else {
                v80 = v81;
                d80 = d81;
            }
        }
        else {
            if (v70 > v69) {
                v80 = v69;
                d80 = d69;
            }
            else {
                v80 = v70;
                d80 = d70;
            }
        }
        if (m80 == null || !m80.isPassable()) v80 += 1000000;
        else v80 += 10 + p80 + switch(m80.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v72 > v73) {
            if (v73 > v83) {
                v84 = v83;
                d84 = d83;
            }
            else {
                v84 = v73;
                d84 = d73;
            }
        }
        else {
            if (v72 > v83) {
                v84 = v83;
                d84 = d83;
            }
            else {
                v84 = v72;
                d84 = d72;
            }
        }
        if (m84 == null || !m84.isPassable()) v84 += 1000000;
        else v84 += 10 + p84 + switch(m84.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v37) {
            if (v37 > v39) {
                v27 = v39;
                d27 = d39;
            }
            else {
                v27 = v37;
                d27 = d37;
            }
        }
        else {
            if (v38 > v39) {
                v27 = v39;
                d27 = d39;
            }
            else {
                v27 = v38;
                d27 = d38;
            }
        }
        if (m27 == null || !m27.isPassable()) v27 += 1000000;
        else v27 += 10 + p27 + switch(m27.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v47) {
            if (v47 > v69) {
                v57 = v69;
                d57 = d69;
            }
            else {
                v57 = v47;
                d57 = d47;
            }
        }
        else {
            if (v58 > v69) {
                v57 = v69;
                d57 = d69;
            }
            else {
                v57 = v58;
                d57 = d58;
            }
        }
        if (m57 == null || !m57.isPassable()) v57 += 1000000;
        else v57 += 10 + p57 + switch(m57.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v51) {
            if (v51 > v73) {
                v63 = v73;
                d63 = d73;
            }
            else {
                v63 = v51;
                d63 = d51;
            }
        }
        else {
            if (v62 > v73) {
                v63 = v73;
                d63 = d73;
            }
            else {
                v63 = v62;
                d63 = d62;
            }
        }
        if (m63 == null || !m63.isPassable()) v63 += 1000000;
        else v63 += 10 + p63 + switch(m63.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v83) {
            if (v83 > v81) {
                v93 = v81;
                d93 = d81;
            }
            else {
                v93 = v83;
                d93 = d83;
            }
        }
        else {
            if (v82 > v81) {
                v93 = v81;
                d93 = d81;
            }
            else {
                v93 = v82;
                d93 = d82;
            }
        }
        if (m93 == null || !m93.isPassable()) v93 += 1000000;
        else v93 += 10 + p93 + switch(m93.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v37) {
            if (v37 > v36) {
                if (v36 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v36;
                    d26 = d36;
                }
            }
            else {
                if (v37 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v37;
                    d26 = d37;
                }
            }
        }
        else {
            if (v38 > v36) {
                if (v36 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v36;
                    d26 = d36;
                }
            }
            else {
                if (v38 > v27) {
                    v26 = v27;
                    d26 = d27;
                }
                else {
                    v26 = v38;
                    d26 = d38;
                }
            }
        }
        if (m26 == null || !m26.isPassable()) v26 += 1000000;
        else v26 += 10 + p26 + switch(m26.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v38 > v39) {
            if (v39 > v40) {
                if (v40 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v40;
                    d28 = d40;
                }
            }
            else {
                if (v39 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v39;
                    d28 = d39;
                }
            }
        }
        else {
            if (v38 > v40) {
                if (v40 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v40;
                    d28 = d40;
                }
            }
            else {
                if (v38 > v27) {
                    v28 = v27;
                    d28 = d27;
                }
                else {
                    v28 = v38;
                    d28 = d38;
                }
            }
        }
        if (m28 == null || !m28.isPassable()) v28 += 1000000;
        else v28 += 10 + p28 + switch(m28.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v47) {
            if (v47 > v36) {
                if (v36 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v36;
                    d46 = d36;
                }
            }
            else {
                if (v47 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v47;
                    d46 = d47;
                }
            }
        }
        else {
            if (v58 > v36) {
                if (v36 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v36;
                    d46 = d36;
                }
            }
            else {
                if (v58 > v57) {
                    v46 = v57;
                    d46 = d57;
                }
                else {
                    v46 = v58;
                    d46 = d58;
                }
            }
        }
        if (m46 == null || !m46.isPassable()) v46 += 1000000;
        else v46 += 10 + p46 + switch(m46.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v51) {
            if (v51 > v40) {
                if (v40 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v40;
                    d52 = d40;
                }
            }
            else {
                if (v51 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v51;
                    d52 = d51;
                }
            }
        }
        else {
            if (v62 > v40) {
                if (v40 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v40;
                    d52 = d40;
                }
            }
            else {
                if (v62 > v63) {
                    v52 = v63;
                    d52 = d63;
                }
                else {
                    v52 = v62;
                    d52 = d62;
                }
            }
        }
        if (m52 == null || !m52.isPassable()) v52 += 1000000;
        else v52 += 10 + p52 + switch(m52.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v58 > v69) {
            if (v69 > v80) {
                if (v80 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v80;
                    d68 = d80;
                }
            }
            else {
                if (v69 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v69;
                    d68 = d69;
                }
            }
        }
        else {
            if (v58 > v80) {
                if (v80 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v80;
                    d68 = d80;
                }
            }
            else {
                if (v58 > v57) {
                    v68 = v57;
                    d68 = d57;
                }
                else {
                    v68 = v58;
                    d68 = d58;
                }
            }
        }
        if (m68 == null || !m68.isPassable()) v68 += 1000000;
        else v68 += 10 + p68 + switch(m68.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v62 > v73) {
            if (v73 > v84) {
                if (v84 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v84;
                    d74 = d84;
                }
            }
            else {
                if (v73 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v73;
                    d74 = d73;
                }
            }
        }
        else {
            if (v62 > v84) {
                if (v84 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v84;
                    d74 = d84;
                }
            }
            else {
                if (v62 > v63) {
                    v74 = v63;
                    d74 = d63;
                }
                else {
                    v74 = v62;
                    d74 = d62;
                }
            }
        }
        if (m74 == null || !m74.isPassable()) v74 += 1000000;
        else v74 += 10 + p74 + switch(m74.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v81) {
            if (v81 > v80) {
                if (v80 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v80;
                    d92 = d80;
                }
            }
            else {
                if (v81 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v81;
                    d92 = d81;
                }
            }
        }
        else {
            if (v82 > v80) {
                if (v80 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v80;
                    d92 = d80;
                }
            }
            else {
                if (v82 > v93) {
                    v92 = v93;
                    d92 = d93;
                }
                else {
                    v92 = v82;
                    d92 = d82;
                }
            }
        }
        if (m92 == null || !m92.isPassable()) v92 += 1000000;
        else v92 += 10 + p92 + switch(m92.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v82 > v83) {
            if (v83 > v84) {
                if (v84 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v84;
                    d94 = d84;
                }
            }
            else {
                if (v83 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v83;
                    d94 = d83;
                }
            }
        }
        else {
            if (v82 > v84) {
                if (v84 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v84;
                    d94 = d84;
                }
            }
            else {
                if (v82 > v93) {
                    v94 = v93;
                    d94 = d93;
                }
                else {
                    v94 = v82;
                    d94 = d82;
                }
            }
        }
        if (m94 == null || !m94.isPassable()) v94 += 1000000;
        else v94 += 10 + p94 + switch(m94.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v37 > v36) {
            if (v36 > v26) {
                v25 = v26;
                d25 = d26;
            }
            else {
                v25 = v36;
                d25 = d36;
            }
        }
        else {
            if (v37 > v26) {
                v25 = v26;
                d25 = d26;
            }
            else {
                v25 = v37;
                d25 = d37;
            }
        }
        if (m25 == null || !m25.isPassable()) v25 += 1000000;
        else v25 += 10 + p25 + switch(m25.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v39 > v40) {
            if (v40 > v28) {
                v29 = v28;
                d29 = d28;
            }
            else {
                v29 = v40;
                d29 = d40;
            }
        }
        else {
            if (v39 > v28) {
                v29 = v28;
                d29 = d28;
            }
            else {
                v29 = v39;
                d29 = d39;
            }
        }
        if (m29 == null || !m29.isPassable()) v29 += 1000000;
        else v29 += 10 + p29 + switch(m29.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v47 > v36) {
            if (v36 > v46) {
                if (v46 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v46;
                    d35 = d46;
                }
            }
            else {
                if (v36 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v36;
                    d35 = d36;
                }
            }
        }
        else {
            if (v47 > v46) {
                if (v46 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v46;
                    d35 = d46;
                }
            }
            else {
                if (v47 > v25) {
                    v35 = v25;
                    d35 = d25;
                }
                else {
                    v35 = v47;
                    d35 = d47;
                }
            }
        }
        if (m35 == null || !m35.isPassable()) v35 += 1000000;
        else v35 += 10 + p35 + switch(m35.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v51 > v40) {
            if (v40 > v52) {
                if (v52 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v52;
                    d41 = d52;
                }
            }
            else {
                if (v40 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v40;
                    d41 = d40;
                }
            }
        }
        else {
            if (v51 > v52) {
                if (v52 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v52;
                    d41 = d52;
                }
            }
            else {
                if (v51 > v29) {
                    v41 = v29;
                    d41 = d29;
                }
                else {
                    v41 = v51;
                    d41 = d51;
                }
            }
        }
        if (m41 == null || !m41.isPassable()) v41 += 1000000;
        else v41 += 10 + p41 + switch(m41.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v69 > v80) {
            if (v80 > v68) {
                v79 = v68;
                d79 = d68;
            }
            else {
                v79 = v80;
                d79 = d80;
            }
        }
        else {
            if (v69 > v68) {
                v79 = v68;
                d79 = d68;
            }
            else {
                v79 = v69;
                d79 = d69;
            }
        }
        if (m79 == null || !m79.isPassable()) v79 += 1000000;
        else v79 += 10 + p79 + switch(m79.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v73 > v84) {
            if (v84 > v74) {
                v85 = v74;
                d85 = d74;
            }
            else {
                v85 = v84;
                d85 = d84;
            }
        }
        else {
            if (v73 > v74) {
                v85 = v74;
                d85 = d74;
            }
            else {
                v85 = v73;
                d85 = d73;
            }
        }
        if (m85 == null || !m85.isPassable()) v85 += 1000000;
        else v85 += 10 + p85 + switch(m85.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v81 > v80) {
            if (v80 > v92) {
                if (v92 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v92;
                    d91 = d92;
                }
            }
            else {
                if (v80 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v80;
                    d91 = d80;
                }
            }
        }
        else {
            if (v81 > v92) {
                if (v92 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v92;
                    d91 = d92;
                }
            }
            else {
                if (v81 > v79) {
                    v91 = v79;
                    d91 = d79;
                }
                else {
                    v91 = v81;
                    d91 = d81;
                }
            }
        }
        if (m91 == null || !m91.isPassable()) v91 += 1000000;
        else v91 += 10 + p91 + switch(m91.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v83 > v84) {
            if (v84 > v94) {
                if (v94 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v94;
                    d95 = d94;
                }
            }
            else {
                if (v84 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v84;
                    d95 = d84;
                }
            }
        }
        else {
            if (v83 > v94) {
                if (v94 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v94;
                    d95 = d94;
                }
            }
            else {
                if (v83 > v85) {
                    v95 = v85;
                    d95 = d85;
                }
                else {
                    v95 = v83;
                    d95 = d83;
                }
            }
        }
        if (m95 == null || !m95.isPassable()) v95 += 1000000;
        else v95 += 10 + p95 + switch(m95.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v26) {
            if (v26 > v28) {
                v16 = v28;
                d16 = d28;
            }
            else {
                v16 = v26;
                d16 = d26;
            }
        }
        else {
            if (v27 > v28) {
                v16 = v28;
                d16 = d28;
            }
            else {
                v16 = v27;
                d16 = d27;
            }
        }
        if (m16 == null || !m16.isPassable()) v16 += 1000000;
        else v16 += 10 + p16 + switch(m16.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v46) {
            if (v46 > v68) {
                v56 = v68;
                d56 = d68;
            }
            else {
                v56 = v46;
                d56 = d46;
            }
        }
        else {
            if (v57 > v68) {
                v56 = v68;
                d56 = d68;
            }
            else {
                v56 = v57;
                d56 = d57;
            }
        }
        if (m56 == null || !m56.isPassable()) v56 += 1000000;
        else v56 += 10 + p56 + switch(m56.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v52) {
            if (v52 > v74) {
                v64 = v74;
                d64 = d74;
            }
            else {
                v64 = v52;
                d64 = d52;
            }
        }
        else {
            if (v63 > v74) {
                v64 = v74;
                d64 = d74;
            }
            else {
                v64 = v63;
                d64 = d63;
            }
        }
        if (m64 == null || !m64.isPassable()) v64 += 1000000;
        else v64 += 10 + p64 + switch(m64.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v94) {
            if (v94 > v92) {
                v104 = v92;
                d104 = d92;
            }
            else {
                v104 = v94;
                d104 = d94;
            }
        }
        else {
            if (v93 > v92) {
                v104 = v92;
                d104 = d92;
            }
            else {
                v104 = v93;
                d104 = d93;
            }
        }
        if (m104 == null || !m104.isPassable()) v104 += 1000000;
        else v104 += 10 + p104 + switch(m104.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v26) {
            if (v26 > v25) {
                if (v25 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v25;
                    d15 = d25;
                }
            }
            else {
                if (v26 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v26;
                    d15 = d26;
                }
            }
        }
        else {
            if (v27 > v25) {
                if (v25 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v25;
                    d15 = d25;
                }
            }
            else {
                if (v27 > v16) {
                    v15 = v16;
                    d15 = d16;
                }
                else {
                    v15 = v27;
                    d15 = d27;
                }
            }
        }
        if (m15 == null || !m15.isPassable()) v15 += 1000000;
        else v15 += 10 + p15 + switch(m15.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v27 > v28) {
            if (v28 > v29) {
                if (v29 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v29;
                    d17 = d29;
                }
            }
            else {
                if (v28 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v28;
                    d17 = d28;
                }
            }
        }
        else {
            if (v27 > v29) {
                if (v29 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v29;
                    d17 = d29;
                }
            }
            else {
                if (v27 > v16) {
                    v17 = v16;
                    d17 = d16;
                }
                else {
                    v17 = v27;
                    d17 = d27;
                }
            }
        }
        if (m17 == null || !m17.isPassable()) v17 += 1000000;
        else v17 += 10 + p17 + switch(m17.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v46) {
            if (v46 > v35) {
                if (v35 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v35;
                    d45 = d35;
                }
            }
            else {
                if (v46 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v46;
                    d45 = d46;
                }
            }
        }
        else {
            if (v57 > v35) {
                if (v35 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v35;
                    d45 = d35;
                }
            }
            else {
                if (v57 > v56) {
                    v45 = v56;
                    d45 = d56;
                }
                else {
                    v45 = v57;
                    d45 = d57;
                }
            }
        }
        if (m45 == null || !m45.isPassable()) v45 += 1000000;
        else v45 += 10 + p45 + switch(m45.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v52) {
            if (v52 > v41) {
                if (v41 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v41;
                    d53 = d41;
                }
            }
            else {
                if (v52 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v52;
                    d53 = d52;
                }
            }
        }
        else {
            if (v63 > v41) {
                if (v41 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v41;
                    d53 = d41;
                }
            }
            else {
                if (v63 > v64) {
                    v53 = v64;
                    d53 = d64;
                }
                else {
                    v53 = v63;
                    d53 = d63;
                }
            }
        }
        if (m53 == null || !m53.isPassable()) v53 += 1000000;
        else v53 += 10 + p53 + switch(m53.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v57 > v68) {
            if (v68 > v79) {
                if (v79 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v79;
                    d67 = d79;
                }
            }
            else {
                if (v68 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v68;
                    d67 = d68;
                }
            }
        }
        else {
            if (v57 > v79) {
                if (v79 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v79;
                    d67 = d79;
                }
            }
            else {
                if (v57 > v56) {
                    v67 = v56;
                    d67 = d56;
                }
                else {
                    v67 = v57;
                    d67 = d57;
                }
            }
        }
        if (m67 == null || !m67.isPassable()) v67 += 1000000;
        else v67 += 10 + p67 + switch(m67.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v63 > v74) {
            if (v74 > v85) {
                if (v85 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v85;
                    d75 = d85;
                }
            }
            else {
                if (v74 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v74;
                    d75 = d74;
                }
            }
        }
        else {
            if (v63 > v85) {
                if (v85 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v85;
                    d75 = d85;
                }
            }
            else {
                if (v63 > v64) {
                    v75 = v64;
                    d75 = d64;
                }
                else {
                    v75 = v63;
                    d75 = d63;
                }
            }
        }
        if (m75 == null || !m75.isPassable()) v75 += 1000000;
        else v75 += 10 + p75 + switch(m75.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v92) {
            if (v92 > v91) {
                if (v91 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v91;
                    d103 = d91;
                }
            }
            else {
                if (v92 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v92;
                    d103 = d92;
                }
            }
        }
        else {
            if (v93 > v91) {
                if (v91 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v91;
                    d103 = d91;
                }
            }
            else {
                if (v93 > v104) {
                    v103 = v104;
                    d103 = d104;
                }
                else {
                    v103 = v93;
                    d103 = d93;
                }
            }
        }
        if (m103 == null || !m103.isPassable()) v103 += 1000000;
        else v103 += 10 + p103 + switch(m103.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v93 > v94) {
            if (v94 > v95) {
                if (v95 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v95;
                    d105 = d95;
                }
            }
            else {
                if (v94 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v94;
                    d105 = d94;
                }
            }
        }
        else {
            if (v93 > v95) {
                if (v95 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v95;
                    d105 = d95;
                }
            }
            else {
                if (v93 > v104) {
                    v105 = v104;
                    d105 = d104;
                }
                else {
                    v105 = v93;
                    d105 = d93;
                }
            }
        }
        if (m105 == null || !m105.isPassable()) v105 += 1000000;
        else v105 += 10 + p105 + switch(m105.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v36 > v25) {
            if (v25 > v35) {
                v24 = v35;
                d24 = d35;
            }
            else {
                v24 = v25;
                d24 = d25;
            }
        }
        else {
            if (v36 > v35) {
                v24 = v35;
                d24 = d35;
            }
            else {
                v24 = v36;
                d24 = d36;
            }
        }
        if (m24 == null || !m24.isPassable()) v24 += 1000000;
        else v24 += 10 + p24 + switch(m24.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v40 > v29) {
            if (v29 > v41) {
                v30 = v41;
                d30 = d41;
            }
            else {
                v30 = v29;
                d30 = d29;
            }
        }
        else {
            if (v40 > v41) {
                v30 = v41;
                d30 = d41;
            }
            else {
                v30 = v40;
                d30 = d40;
            }
        }
        if (m30 == null || !m30.isPassable()) v30 += 1000000;
        else v30 += 10 + p30 + switch(m30.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v80 > v91) {
            if (v91 > v79) {
                v90 = v79;
                d90 = d79;
            }
            else {
                v90 = v91;
                d90 = d91;
            }
        }
        else {
            if (v80 > v79) {
                v90 = v79;
                d90 = d79;
            }
            else {
                v90 = v80;
                d90 = d80;
            }
        }
        if (m90 == null || !m90.isPassable()) v90 += 1000000;
        else v90 += 10 + p90 + switch(m90.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v84 > v85) {
            if (v85 > v95) {
                v96 = v95;
                d96 = d95;
            }
            else {
                v96 = v85;
                d96 = d85;
            }
        }
        else {
            if (v84 > v95) {
                v96 = v95;
                d96 = d95;
            }
            else {
                v96 = v84;
                d96 = d84;
            }
        }
        if (m96 == null || !m96.isPassable()) v96 += 1000000;
        else v96 += 10 + p96 + switch(m96.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v26 > v25) {
            if (v25 > v15) {
                if (v15 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v15;
                    d14 = d15;
                }
            }
            else {
                if (v25 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v25;
                    d14 = d25;
                }
            }
        }
        else {
            if (v26 > v15) {
                if (v15 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v15;
                    d14 = d15;
                }
            }
            else {
                if (v26 > v24) {
                    v14 = v24;
                    d14 = d24;
                }
                else {
                    v14 = v26;
                    d14 = d26;
                }
            }
        }
        if (m14 == null || !m14.isPassable()) v14 += 1000000;
        else v14 += 10 + p14 + switch(m14.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v28 > v29) {
            if (v29 > v17) {
                if (v17 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v17;
                    d18 = d17;
                }
            }
            else {
                if (v29 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v29;
                    d18 = d29;
                }
            }
        }
        else {
            if (v28 > v17) {
                if (v17 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v17;
                    d18 = d17;
                }
            }
            else {
                if (v28 > v30) {
                    v18 = v30;
                    d18 = d30;
                }
                else {
                    v18 = v28;
                    d18 = d28;
                }
            }
        }
        if (m18 == null || !m18.isPassable()) v18 += 1000000;
        else v18 += 10 + p18 + switch(m18.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v46 > v35) {
            if (v35 > v45) {
                if (v45 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v45;
                    d34 = d45;
                }
            }
            else {
                if (v35 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v35;
                    d34 = d35;
                }
            }
        }
        else {
            if (v46 > v45) {
                if (v45 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v45;
                    d34 = d45;
                }
            }
            else {
                if (v46 > v24) {
                    v34 = v24;
                    d34 = d24;
                }
                else {
                    v34 = v46;
                    d34 = d46;
                }
            }
        }
        if (m34 == null || !m34.isPassable()) v34 += 1000000;
        else v34 += 10 + p34 + switch(m34.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v52 > v41) {
            if (v41 > v53) {
                if (v53 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v53;
                    d42 = d53;
                }
            }
            else {
                if (v41 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v41;
                    d42 = d41;
                }
            }
        }
        else {
            if (v52 > v53) {
                if (v53 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v53;
                    d42 = d53;
                }
            }
            else {
                if (v52 > v30) {
                    v42 = v30;
                    d42 = d30;
                }
                else {
                    v42 = v52;
                    d42 = d52;
                }
            }
        }
        if (m42 == null || !m42.isPassable()) v42 += 1000000;
        else v42 += 10 + p42 + switch(m42.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v68 > v79) {
            if (v79 > v67) {
                if (v67 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v67;
                    d78 = d67;
                }
            }
            else {
                if (v79 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v79;
                    d78 = d79;
                }
            }
        }
        else {
            if (v68 > v67) {
                if (v67 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v67;
                    d78 = d67;
                }
            }
            else {
                if (v68 > v90) {
                    v78 = v90;
                    d78 = d90;
                }
                else {
                    v78 = v68;
                    d78 = d68;
                }
            }
        }
        if (m78 == null || !m78.isPassable()) v78 += 1000000;
        else v78 += 10 + p78 + switch(m78.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v74 > v85) {
            if (v85 > v75) {
                if (v75 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v75;
                    d86 = d75;
                }
            }
            else {
                if (v85 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v85;
                    d86 = d85;
                }
            }
        }
        else {
            if (v74 > v75) {
                if (v75 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v75;
                    d86 = d75;
                }
            }
            else {
                if (v74 > v96) {
                    v86 = v96;
                    d86 = d96;
                }
                else {
                    v86 = v74;
                    d86 = d74;
                }
            }
        }
        if (m86 == null || !m86.isPassable()) v86 += 1000000;
        else v86 += 10 + p86 + switch(m86.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v92 > v91) {
            if (v91 > v103) {
                if (v103 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v103;
                    d102 = d103;
                }
            }
            else {
                if (v91 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v91;
                    d102 = d91;
                }
            }
        }
        else {
            if (v92 > v103) {
                if (v103 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v103;
                    d102 = d103;
                }
            }
            else {
                if (v92 > v90) {
                    v102 = v90;
                    d102 = d90;
                }
                else {
                    v102 = v92;
                    d102 = d92;
                }
            }
        }
        if (m102 == null || !m102.isPassable()) v102 += 1000000;
        else v102 += 10 + p102 + switch(m102.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
        if (v94 > v95) {
            if (v95 > v105) {
                if (v105 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v105;
                    d106 = d105;
                }
            }
            else {
                if (v95 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v95;
                    d106 = d95;
                }
            }
        }
        else {
            if (v94 > v105) {
                if (v105 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v105;
                    d106 = d105;
                }
            }
            else {
                if (v94 > v96) {
                    v106 = v96;
                    d106 = d96;
                }
                else {
                    v106 = v94;
                    d106 = d94;
                }
            }
        }
        if (m106 == null || !m106.isPassable()) v106 += 1000000;
        else v106 += 10 + p106 + switch(m106.getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
            case EMPTY -> 5;
            default -> 0;
        };
    }

    static Direction getBestDirection(MapLocation target){
        if (rc.getLocation().distanceSquaredTo(target) <= 20 && computeDistance(target) > Constants.DIST_INF) return null;
        if (rc.getLocation().distanceSquaredTo(target) <= 2) return MovementManager.canMove(rc.getLocation().directionTo(target)) ? rc.getLocation().directionTo(target) : null;
        int dx = target.x - l60.x;
        int dy = target.y - l60.y;
        switch(dx){
            case -4:
                switch(dy){
                    case -2: return d14;
                    case -1: return d15;
                    case 0: return d16;
                    case 1: return d17;
                    case 2: return d18;
                }
                break;
            case -3:
                switch(dy){
                    case -3: return d24;
                    case -2: return d25;
                    case -1: return d26;
                    case 0: return d27;
                    case 1: return d28;
                    case 2: return d29;
                    case 3: return d30;
                }
                break;
            case -2:
                switch(dy){
                    case -4: return d34;
                    case -3: return d35;
                    case -2: return d36;
                    case -1: return d37;
                    case 0: return d38;
                    case 1: return d39;
                    case 2: return d40;
                    case 3: return d41;
                    case 4: return d42;
                }
                break;
            case -1:
                switch(dy){
                    case -4: return d45;
                    case -3: return d46;
                    case -2: return d47;
                    case -1: return d48;
                    case 0: return d49;
                    case 1: return d50;
                    case 2: return d51;
                    case 3: return d52;
                    case 4: return d53;
                }
                break;
            case 0:
                switch(dy){
                    case -4: return d56;
                    case -3: return d57;
                    case -2: return d58;
                    case -1: return d59;
                    case 0: return d60;
                    case 1: return d61;
                    case 2: return d62;
                    case 3: return d63;
                    case 4: return d64;
                }
                break;
            case 1:
                switch(dy){
                    case -4: return d67;
                    case -3: return d68;
                    case -2: return d69;
                    case -1: return d70;
                    case 0: return d71;
                    case 1: return d72;
                    case 2: return d73;
                    case 3: return d74;
                    case 4: return d75;
                }
                break;
            case 2:
                switch(dy){
                    case -4: return d78;
                    case -3: return d79;
                    case -2: return d80;
                    case -1: return d81;
                    case 0: return d82;
                    case 1: return d83;
                    case 2: return d84;
                    case 3: return d85;
                    case 4: return d86;
                }
                break;
            case 3:
                switch(dy){
                    case -3: return d90;
                    case -2: return d91;
                    case -1: return d92;
                    case 0: return d93;
                    case 1: return d94;
                    case 2: return d95;
                    case 3: return d96;
                }
                break;
            case 4:
                switch(dy){
                    case -2: return d102;
                    case -1: return d103;
                    case 0: return d104;
                    case 1: return d105;
                    case 2: return d106;
                }
                break;
        }

        Direction ans = null;
        double bestEstimation = 0;
        double initialDist = Math.sqrt(l60.distanceSquaredTo(target));

        if (v14 < Constants.DIST_INF){
            double dist14 = (initialDist - Math.sqrt(l14.distanceSquaredTo(target)))/v14;
            if (dist14 > bestEstimation) {
                bestEstimation = dist14;
                ans = d14;
            }
        }
        if (v15 < Constants.DIST_INF){
            double dist15 = (initialDist - Math.sqrt(l15.distanceSquaredTo(target)))/v15;
            if (dist15 > bestEstimation) {
                bestEstimation = dist15;
                ans = d15;
            }
        }
        if (v16 < Constants.DIST_INF){
            double dist16 = (initialDist - Math.sqrt(l16.distanceSquaredTo(target)))/v16;
            if (dist16 > bestEstimation) {
                bestEstimation = dist16;
                ans = d16;
            }
        }
        if (v17 < Constants.DIST_INF){
            double dist17 = (initialDist - Math.sqrt(l17.distanceSquaredTo(target)))/v17;
            if (dist17 > bestEstimation) {
                bestEstimation = dist17;
                ans = d17;
            }
        }
        if (v18 < Constants.DIST_INF){
            double dist18 = (initialDist - Math.sqrt(l18.distanceSquaredTo(target)))/v18;
            if (dist18 > bestEstimation) {
                bestEstimation = dist18;
                ans = d18;
            }
        }
        if (v24 < Constants.DIST_INF){
            double dist24 = (initialDist - Math.sqrt(l24.distanceSquaredTo(target)))/v24;
            if (dist24 > bestEstimation) {
                bestEstimation = dist24;
                ans = d24;
            }
        }
        if (v25 < Constants.DIST_INF){
            double dist25 = (initialDist - Math.sqrt(l25.distanceSquaredTo(target)))/v25;
            if (dist25 > bestEstimation) {
                bestEstimation = dist25;
                ans = d25;
            }
        }
        if (v29 < Constants.DIST_INF){
            double dist29 = (initialDist - Math.sqrt(l29.distanceSquaredTo(target)))/v29;
            if (dist29 > bestEstimation) {
                bestEstimation = dist29;
                ans = d29;
            }
        }
        if (v30 < Constants.DIST_INF){
            double dist30 = (initialDist - Math.sqrt(l30.distanceSquaredTo(target)))/v30;
            if (dist30 > bestEstimation) {
                bestEstimation = dist30;
                ans = d30;
            }
        }
        if (v34 < Constants.DIST_INF){
            double dist34 = (initialDist - Math.sqrt(l34.distanceSquaredTo(target)))/v34;
            if (dist34 > bestEstimation) {
                bestEstimation = dist34;
                ans = d34;
            }
        }
        if (v35 < Constants.DIST_INF){
            double dist35 = (initialDist - Math.sqrt(l35.distanceSquaredTo(target)))/v35;
            if (dist35 > bestEstimation) {
                bestEstimation = dist35;
                ans = d35;
            }
        }
        if (v41 < Constants.DIST_INF){
            double dist41 = (initialDist - Math.sqrt(l41.distanceSquaredTo(target)))/v41;
            if (dist41 > bestEstimation) {
                bestEstimation = dist41;
                ans = d41;
            }
        }
        if (v42 < Constants.DIST_INF){
            double dist42 = (initialDist - Math.sqrt(l42.distanceSquaredTo(target)))/v42;
            if (dist42 > bestEstimation) {
                bestEstimation = dist42;
                ans = d42;
            }
        }
        if (v45 < Constants.DIST_INF){
            double dist45 = (initialDist - Math.sqrt(l45.distanceSquaredTo(target)))/v45;
            if (dist45 > bestEstimation) {
                bestEstimation = dist45;
                ans = d45;
            }
        }
        if (v53 < Constants.DIST_INF){
            double dist53 = (initialDist - Math.sqrt(l53.distanceSquaredTo(target)))/v53;
            if (dist53 > bestEstimation) {
                bestEstimation = dist53;
                ans = d53;
            }
        }
        if (v56 < Constants.DIST_INF){
            double dist56 = (initialDist - Math.sqrt(l56.distanceSquaredTo(target)))/v56;
            if (dist56 > bestEstimation) {
                bestEstimation = dist56;
                ans = d56;
            }
        }
        if (v64 < Constants.DIST_INF){
            double dist64 = (initialDist - Math.sqrt(l64.distanceSquaredTo(target)))/v64;
            if (dist64 > bestEstimation) {
                bestEstimation = dist64;
                ans = d64;
            }
        }
        if (v67 < Constants.DIST_INF){
            double dist67 = (initialDist - Math.sqrt(l67.distanceSquaredTo(target)))/v67;
            if (dist67 > bestEstimation) {
                bestEstimation = dist67;
                ans = d67;
            }
        }
        if (v75 < Constants.DIST_INF){
            double dist75 = (initialDist - Math.sqrt(l75.distanceSquaredTo(target)))/v75;
            if (dist75 > bestEstimation) {
                bestEstimation = dist75;
                ans = d75;
            }
        }
        if (v78 < Constants.DIST_INF){
            double dist78 = (initialDist - Math.sqrt(l78.distanceSquaredTo(target)))/v78;
            if (dist78 > bestEstimation) {
                bestEstimation = dist78;
                ans = d78;
            }
        }
        if (v79 < Constants.DIST_INF){
            double dist79 = (initialDist - Math.sqrt(l79.distanceSquaredTo(target)))/v79;
            if (dist79 > bestEstimation) {
                bestEstimation = dist79;
                ans = d79;
            }
        }
        if (v85 < Constants.DIST_INF){
            double dist85 = (initialDist - Math.sqrt(l85.distanceSquaredTo(target)))/v85;
            if (dist85 > bestEstimation) {
                bestEstimation = dist85;
                ans = d85;
            }
        }
        if (v86 < Constants.DIST_INF){
            double dist86 = (initialDist - Math.sqrt(l86.distanceSquaredTo(target)))/v86;
            if (dist86 > bestEstimation) {
                bestEstimation = dist86;
                ans = d86;
            }
        }
        if (v90 < Constants.DIST_INF){
            double dist90 = (initialDist - Math.sqrt(l90.distanceSquaredTo(target)))/v90;
            if (dist90 > bestEstimation) {
                bestEstimation = dist90;
                ans = d90;
            }
        }
        if (v91 < Constants.DIST_INF){
            double dist91 = (initialDist - Math.sqrt(l91.distanceSquaredTo(target)))/v91;
            if (dist91 > bestEstimation) {
                bestEstimation = dist91;
                ans = d91;
            }
        }
        if (v95 < Constants.DIST_INF){
            double dist95 = (initialDist - Math.sqrt(l95.distanceSquaredTo(target)))/v95;
            if (dist95 > bestEstimation) {
                bestEstimation = dist95;
                ans = d95;
            }
        }
        if (v96 < Constants.DIST_INF){
            double dist96 = (initialDist - Math.sqrt(l96.distanceSquaredTo(target)))/v96;
            if (dist96 > bestEstimation) {
                bestEstimation = dist96;
                ans = d96;
            }
        }
        if (v102 < Constants.DIST_INF){
            double dist102 = (initialDist - Math.sqrt(l102.distanceSquaredTo(target)))/v102;
            if (dist102 > bestEstimation) {
                bestEstimation = dist102;
                ans = d102;
            }
        }
        if (v103 < Constants.DIST_INF){
            double dist103 = (initialDist - Math.sqrt(l103.distanceSquaredTo(target)))/v103;
            if (dist103 > bestEstimation) {
                bestEstimation = dist103;
                ans = d103;
            }
        }
        if (v104 < Constants.DIST_INF){
            double dist104 = (initialDist - Math.sqrt(l104.distanceSquaredTo(target)))/v104;
            if (dist104 > bestEstimation) {
                bestEstimation = dist104;
                ans = d104;
            }
        }
        if (v105 < Constants.DIST_INF){
            double dist105 = (initialDist - Math.sqrt(l105.distanceSquaredTo(target)))/v105;
            if (dist105 > bestEstimation) {
                bestEstimation = dist105;
                ans = d105;
            }
        }
        if (v106 < Constants.DIST_INF){
            double dist106 = (initialDist - Math.sqrt(l106.distanceSquaredTo(target)))/v106;
            if (dist106 > bestEstimation) {
                bestEstimation = dist106;
                ans = d106;
            }
        }
        return ans;
    }

    static int computeDistance(MapLocation target){
        int dx = target.x - rc.getLocation().x;
        int dy = target.y - rc.getLocation().y;
        switch(dx){
            case -4:
                switch(dy){
                    case -2: return v14 - ((m14 == null || !m14.isPassable()) ? 1000000: 0);
                    case -1: return v15 - ((m15 == null || !m15.isPassable()) ? 1000000: 0);
                    case 0: return v16 - ((m16 == null || !m16.isPassable()) ? 1000000: 0);
                    case 1: return v17 - ((m17 == null || !m17.isPassable()) ? 1000000: 0);
                    case 2: return v18 - ((m18 == null || !m18.isPassable()) ? 1000000: 0);
                }
                break;
            case -3:
                switch(dy){
                    case -3: return v24 - ((m24 == null || !m24.isPassable()) ? 1000000: 0);
                    case -2: return v25 - ((m25 == null || !m25.isPassable()) ? 1000000: 0);
                    case -1: return v26 - ((m26 == null || !m26.isPassable()) ? 1000000: 0);
                    case 0: return v27 - ((m27 == null || !m27.isPassable()) ? 1000000: 0);
                    case 1: return v28 - ((m28 == null || !m28.isPassable()) ? 1000000: 0);
                    case 2: return v29 - ((m29 == null || !m29.isPassable()) ? 1000000: 0);
                    case 3: return v30 - ((m30 == null || !m30.isPassable()) ? 1000000: 0);
                }
                break;
            case -2:
                switch(dy){
                    case -4: return v34 - ((m34 == null || !m34.isPassable()) ? 1000000: 0);
                    case -3: return v35 - ((m35 == null || !m35.isPassable()) ? 1000000: 0);
                    case -2: return v36 - ((m36 == null || !m36.isPassable()) ? 1000000: 0);
                    case -1: return v37 - ((m37 == null || !m37.isPassable()) ? 1000000: 0);
                    case 0: return v38 - ((m38 == null || !m38.isPassable()) ? 1000000: 0);
                    case 1: return v39 - ((m39 == null || !m39.isPassable()) ? 1000000: 0);
                    case 2: return v40 - ((m40 == null || !m40.isPassable()) ? 1000000: 0);
                    case 3: return v41 - ((m41 == null || !m41.isPassable()) ? 1000000: 0);
                    case 4: return v42 - ((m42 == null || !m42.isPassable()) ? 1000000: 0);
                }
                break;
            case -1:
                switch(dy){
                    case -4: return v45 - ((m45 == null || !m45.isPassable()) ? 1000000: 0);
                    case -3: return v46 - ((m46 == null || !m46.isPassable()) ? 1000000: 0);
                    case -2: return v47 - ((m47 == null || !m47.isPassable()) ? 1000000: 0);
                    case -1: return v48 - ((m48 == null || !m48.isPassable()) ? 1000000: 0);
                    case 0: return v49 - ((m49 == null || !m49.isPassable()) ? 1000000: 0);
                    case 1: return v50 - ((m50 == null || !m50.isPassable()) ? 1000000: 0);
                    case 2: return v51 - ((m51 == null || !m51.isPassable()) ? 1000000: 0);
                    case 3: return v52 - ((m52 == null || !m52.isPassable()) ? 1000000: 0);
                    case 4: return v53 - ((m53 == null || !m53.isPassable()) ? 1000000: 0);
                }
                break;
            case 0:
                switch(dy){
                    case -4: return v56 - ((m56 == null || !m56.isPassable()) ? 1000000: 0);
                    case -3: return v57 - ((m57 == null || !m57.isPassable()) ? 1000000: 0);
                    case -2: return v58 - ((m58 == null || !m58.isPassable()) ? 1000000: 0);
                    case -1: return v59 - ((m59 == null || !m59.isPassable()) ? 1000000: 0);
                    case 0: return v60 - ((m60 == null || !m60.isPassable()) ? 1000000: 0);
                    case 1: return v61 - ((m61 == null || !m61.isPassable()) ? 1000000: 0);
                    case 2: return v62 - ((m62 == null || !m62.isPassable()) ? 1000000: 0);
                    case 3: return v63 - ((m63 == null || !m63.isPassable()) ? 1000000: 0);
                    case 4: return v64 - ((m64 == null || !m64.isPassable()) ? 1000000: 0);
                }
                break;
            case 1:
                switch(dy){
                    case -4: return v67 - ((m67 == null || !m67.isPassable()) ? 1000000: 0);
                    case -3: return v68 - ((m68 == null || !m68.isPassable()) ? 1000000: 0);
                    case -2: return v69 - ((m69 == null || !m69.isPassable()) ? 1000000: 0);
                    case -1: return v70 - ((m70 == null || !m70.isPassable()) ? 1000000: 0);
                    case 0: return v71 - ((m71 == null || !m71.isPassable()) ? 1000000: 0);
                    case 1: return v72 - ((m72 == null || !m72.isPassable()) ? 1000000: 0);
                    case 2: return v73 - ((m73 == null || !m73.isPassable()) ? 1000000: 0);
                    case 3: return v74 - ((m74 == null || !m74.isPassable()) ? 1000000: 0);
                    case 4: return v75 - ((m75 == null || !m75.isPassable()) ? 1000000: 0);
                }
                break;
            case 2:
                switch(dy){
                    case -4: return v78 - ((m78 == null || !m78.isPassable()) ? 1000000: 0);
                    case -3: return v79 - ((m79 == null || !m79.isPassable()) ? 1000000: 0);
                    case -2: return v80 - ((m80 == null || !m80.isPassable()) ? 1000000: 0);
                    case -1: return v81 - ((m81 == null || !m81.isPassable()) ? 1000000: 0);
                    case 0: return v82 - ((m82 == null || !m82.isPassable()) ? 1000000: 0);
                    case 1: return v83 - ((m83 == null || !m83.isPassable()) ? 1000000: 0);
                    case 2: return v84 - ((m84 == null || !m84.isPassable()) ? 1000000: 0);
                    case 3: return v85 - ((m85 == null || !m85.isPassable()) ? 1000000: 0);
                    case 4: return v86 - ((m86 == null || !m86.isPassable()) ? 1000000: 0);
                }
                break;
            case 3:
                switch(dy){
                    case -3: return v90 - ((m90 == null || !m90.isPassable()) ? 1000000: 0);
                    case -2: return v91 - ((m91 == null || !m91.isPassable()) ? 1000000: 0);
                    case -1: return v92 - ((m92 == null || !m92.isPassable()) ? 1000000: 0);
                    case 0: return v93 - ((m93 == null || !m93.isPassable()) ? 1000000: 0);
                    case 1: return v94 - ((m94 == null || !m94.isPassable()) ? 1000000: 0);
                    case 2: return v95 - ((m95 == null || !m95.isPassable()) ? 1000000: 0);
                    case 3: return v96 - ((m96 == null || !m96.isPassable()) ? 1000000: 0);
                }
                break;
            case 4:
                switch(dy){
                    case -2: return v102 - ((m102 == null || !m102.isPassable()) ? 1000000: 0);
                    case -1: return v103 - ((m103 == null || !m103.isPassable()) ? 1000000: 0);
                    case 0: return v104 - ((m104 == null || !m104.isPassable()) ? 1000000: 0);
                    case 1: return v105 - ((m105 == null || !m105.isPassable()) ? 1000000: 0);
                    case 2: return v106 - ((m106 == null || !m106.isPassable()) ? 1000000: 0);
                }
                break;
        }
        return 1000000;
    }

    static boolean maxT;
    static MapLocation bestSRPSpot;
    static MapLocation myLoc;
    static MapLocation emptyLoc;
    static MapLocation bestCenter;
    static boolean flag;
    static MapLocation bestSpot0;
    static MapLocation bestSpot1;
    static MapLocation bestSpot2;
    static MapLocation bestSpot3;
    static MapLocation bestSpot4;
    static MapLocation bestSpot5;
    static MapLocation bestSpot6;
    static MapLocation bestSpot7;
    static MapLocation bestSpot8;
    static MapLocation bestSpot9;
    static MapLocation bestSpot10;
    static MapLocation bestSpot11;
    static MapLocation bestSpot12;
    static MapLocation bestSpot13;
    static MapLocation bestSpot14;
    static MapLocation bestSpot15;
    static PaintType flagAttackPaint0;
    static PaintType flagAttackPaint1;
    static PaintType flagAttackPaint2;
    static PaintType flagAttackPaint3;
    static PaintType flagAttackPaint4;
    static PaintType flagAttackPaint5;
    static PaintType flagAttackPaint6;
    static PaintType flagAttackPaint7;
    static PaintType flagAttackPaint8;
    static PaintType flagAttackPaint9;
    static PaintType flagAttackPaint10;
    static PaintType flagAttackPaint11;
    static PaintType flagAttackPaint12;
    static MapLocation[] flags = new MapLocation[20];
    static int flagSize;


    static void scanRSPs () throws GameActionException {

        maxT = Util.towerMax();

        myLoc = rc.getLocation();
        emptyLoc = null;
        bestSRPSpot = null;
        bestCenter = null;
        flag = true;
        flagAttackPaint0 = null;
        flagAttackPaint1 = null;
        flagAttackPaint2 = null;
        flagAttackPaint3 = null;
        flagAttackPaint4 = null;
        flagAttackPaint5 = null;
        flagAttackPaint6 = null;
        flagAttackPaint7 = null;
        flagAttackPaint8 = null;
        flagAttackPaint9 = null;
        flagAttackPaint10 = null;
        flagAttackPaint11 = null;
        flagAttackPaint12 = null;
        flagSize = 0;

        int dx = myLoc.x%4, dy = myLoc.y%4;
        int dencode = dx*4 + dy;
        switch(dencode){
            case 0:
                scan0();
                break;
            case 1:
                scan1();
                break;
            case 2:
                scan2();
                break;
            case 3:
                scan3();
                break;
            case 4:
                scan4();
                break;
            case 5:
                scan5();
                break;
            case 6:
                scan6();
                break;
            case 7:
                scan7();
                break;
            case 8:
                scan8();
                break;
            case 9:
                scan9();
                break;
            case 10:
                scan10();
                break;
            case 11:
                scan11();
                break;
            case 12:
                scan12();
                break;
            case 13:
                scan13();
                break;
            case 14:
                scan14();
                break;
            case 15:
                scan15();
                break;
        }
    }


    static void scan0() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 2056;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 2056;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2056;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 2056;
                            bestSpot3 = l106;
                            bestSpot11 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 514;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 514;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 514;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 514;
                            bestSpot1 = l102;
                            bestSpot9 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 40;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l86;
                            bestSpot5 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 130;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l78;
                            bestSpot7 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 20;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l42;
                            bestSpot4 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 65;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l34;
                            bestSpot6 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 1028;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 1028;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1028;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 1028;
                            bestSpot2 = l18;
                            bestSpot10 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 257;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 257;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 257;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 257;
                            bestSpot0 = l14;
                            bestSpot8 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 2;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 4;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 1;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 2056;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 2056;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2056;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 2056;
                            bestSpot3 = l105;
                            bestSpot11 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 514;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 514;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 514;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 514;
                            bestSpot1 = l103;
                            bestSpot9 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 40;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l75;
                            bestSpot5 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 130;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l67;
                            bestSpot7 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 20;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l53;
                            bestSpot4 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 65;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l45;
                            bestSpot6 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 1028;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 1028;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1028;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 1028;
                            bestSpot2 = l17;
                            bestSpot10 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 257;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 257;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 257;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 257;
                            bestSpot0 = l15;
                            bestSpot8 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 2570;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 2570;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2570;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 2570;
                            bestSpot1 = l104;
                            bestSpot3 = l104;
                            bestSpot9 = l104;
                            bestSpot11 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 60;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 60;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 60;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 60;
                            bestSpot2 = l64;
                            bestSpot3 = l64;
                            bestSpot4 = l64;
                            bestSpot5 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 195;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 195;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 195;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 195;
                            bestSpot0 = l56;
                            bestSpot1 = l56;
                            bestSpot6 = l56;
                            bestSpot7 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 1285;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 1285;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1285;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 1285;
                            bestSpot0 = l16;
                            bestSpot2 = l16;
                            bestSpot8 = l16;
                            bestSpot10 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 2;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 2;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 1;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 1;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 8;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 1;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 10;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l93;
                            bestSpot3 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 12;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l63;
                            bestSpot3 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 3;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l57;
                            bestSpot1 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 5;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l27;
                            bestSpot2 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l82;
                            bestSpot3 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l62;
                            bestSpot3 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l58;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l38;
                            bestSpot2 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l71;
                            bestSpot3 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l61;
                            bestSpot3 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l49;
                            bestSpot2 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                            bestSpot2 = l60;
                            bestSpot3 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 2048) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot11) < Constants.DIST_INF){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 1024) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot10) < Constants.DIST_INF){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(2,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan1() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 130;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l106;
                            bestSpot7 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 520;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 520;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 520;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 520;
                            bestSpot3 = l102;
                            bestSpot9 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 4;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 65;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l18;
                            bestSpot6 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 260;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l14;
                            bestSpot8 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 34;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l96;
                            bestSpot5 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 17;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l30;
                            bestSpot4 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 130;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l105;
                            bestSpot7 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 650;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 650;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 650;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 650;
                            bestSpot1 = l103;
                            bestSpot3 = l103;
                            bestSpot7 = l103;
                            bestSpot9 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 8;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 4;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 65;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l17;
                            bestSpot6 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 325;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 325;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 325;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 325;
                            bestSpot0 = l15;
                            bestSpot2 = l15;
                            bestSpot6 = l15;
                            bestSpot8 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l104;
                            bestSpot7 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 48;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l64;
                            bestSpot5 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 12;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l56;
                            bestSpot3 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l16;
                            bestSpot6 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 2;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l85;
                            bestSpot5 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 17;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l41;
                            bestSpot4 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 1;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 10;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l92;
                            bestSpot3 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 34;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l74;
                            bestSpot5 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 8;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l52;
                            bestSpot4 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 4;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 1;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 5;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l26;
                            bestSpot2 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 51;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 51;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 51;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 51;
                            bestSpot0 = l63;
                            bestSpot1 = l63;
                            bestSpot4 = l63;
                            bestSpot5 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 12;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l57;
                            bestSpot3 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l81;
                            bestSpot3 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l37;
                            bestSpot2 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l62;
                            bestSpot1 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l58;
                            bestSpot3 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l70;
                            bestSpot3 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l48;
                            bestSpot2 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l61;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                            bestSpot2 = l59;
                            bestSpot3 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(2,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan2() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 2210;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 2210;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2210;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 2210;
                            bestSpot1 = l106;
                            bestSpot5 = l106;
                            bestSpot7 = l106;
                            bestSpot11 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 650;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 650;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 650;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 650;
                            bestSpot1 = l102;
                            bestSpot3 = l102;
                            bestSpot7 = l102;
                            bestSpot9 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 4;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 1105;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 1105;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1105;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 1105;
                            bestSpot0 = l18;
                            bestSpot4 = l18;
                            bestSpot6 = l18;
                            bestSpot10 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 325;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 325;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 325;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 325;
                            bestSpot0 = l14;
                            bestSpot2 = l14;
                            bestSpot6 = l14;
                            bestSpot8 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 130;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l105;
                            bestSpot7 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 130;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l103;
                            bestSpot7 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 8;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 4;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 65;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l17;
                            bestSpot6 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 65;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l15;
                            bestSpot6 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l104;
                            bestSpot7 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 48;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l64;
                            bestSpot5 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 12;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l56;
                            bestSpot3 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l16;
                            bestSpot6 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 34;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l95;
                            bestSpot5 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 10;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l91;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 32;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 16;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 17;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l29;
                            bestSpot4 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 5;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l25;
                            bestSpot2 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 32;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 8;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 16;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 4;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 1;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 48;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l63;
                            bestSpot5 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 12;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l57;
                            bestSpot3 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l84;
                            bestSpot5 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l80;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 17; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l40;
                            bestSpot4 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l36;
                            bestSpot2 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l73;
                            bestSpot5 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l69;
                            bestSpot3 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 17; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l51;
                            bestSpot4 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l47;
                            bestSpot2 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 51; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 51;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 51;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 51;
                            bestSpot0 = l62;
                            bestSpot1 = l62;
                            bestSpot4 = l62;
                            bestSpot5 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l58;
                            bestSpot1 = l58;
                            bestSpot2 = l58;
                            bestSpot3 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l61;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 2048) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot11) < Constants.DIST_INF){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 1024) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot10) < Constants.DIST_INF){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot5;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot4;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(2,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(2,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan3() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 520;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 520;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 520;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 520;
                            bestSpot3 = l106;
                            bestSpot9 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 130;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l102;
                            bestSpot7 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 32;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 4;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 260;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l18;
                            bestSpot8 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 65;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l14;
                            bestSpot6 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 34;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l90;
                            bestSpot5 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 4;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 17;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l24;
                            bestSpot4 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 650;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 650;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 650;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 650;
                            bestSpot1 = l105;
                            bestSpot3 = l105;
                            bestSpot7 = l105;
                            bestSpot9 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 130;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l103;
                            bestSpot7 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 32;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 4;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 325;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 325;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 325;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 325;
                            bestSpot0 = l17;
                            bestSpot2 = l17;
                            bestSpot6 = l17;
                            bestSpot8 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 65;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l15;
                            bestSpot6 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l104;
                            bestSpot7 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 12;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l64;
                            bestSpot3 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 48;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l56;
                            bestSpot5 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l16;
                            bestSpot6 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 2;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 34;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l79;
                            bestSpot5 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 17;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l35;
                            bestSpot4 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 1;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 10;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l94;
                            bestSpot3 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 34;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l68;
                            bestSpot5 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 17;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l46;
                            bestSpot4 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 5;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l28;
                            bestSpot2 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 12;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l63;
                            bestSpot3 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 51;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 51;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 51;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 51;
                            bestSpot0 = l57;
                            bestSpot1 = l57;
                            bestSpot4 = l57;
                            bestSpot5 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l83;
                            bestSpot3 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l39;
                            bestSpot2 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l62;
                            bestSpot3 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l58;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l72;
                            bestSpot3 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l50;
                            bestSpot2 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l61;
                            bestSpot1 = l61;
                            bestSpot2 = l61;
                            bestSpot3 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(2,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-2,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan4() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 16;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 130;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l86;
                            bestSpot7 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 65;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l78;
                            bestSpot6 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 520;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 520;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 520;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 520;
                            bestSpot3 = l42;
                            bestSpot9 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 260;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l34;
                            bestSpot8 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 8;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 34;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l96;
                            bestSpot5 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 17;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l90;
                            bestSpot4 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 8;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 16;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 130;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l75;
                            bestSpot7 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 65;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l67;
                            bestSpot6 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 650;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 650;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 650;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 650;
                            bestSpot1 = l53;
                            bestSpot3 = l53;
                            bestSpot7 = l53;
                            bestSpot9 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 325;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 325;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 325;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 325;
                            bestSpot0 = l45;
                            bestSpot2 = l45;
                            bestSpot6 = l45;
                            bestSpot8 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 8;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 48;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l104;
                            bestSpot5 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 130;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l64;
                            bestSpot7 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 65;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l56;
                            bestSpot6 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 12;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l16;
                            bestSpot3 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 34;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l95;
                            bestSpot5 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 17;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l91;
                            bestSpot4 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 2;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 1;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 8;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 8;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 34;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l94;
                            bestSpot5 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 17;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l92;
                            bestSpot4 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 1;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 10;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l52;
                            bestSpot3 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 5;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l46;
                            bestSpot2 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 8;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 51;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 51;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 51;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 51;
                            bestSpot0 = l93;
                            bestSpot1 = l93;
                            bestSpot4 = l93;
                            bestSpot5 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 1;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 12;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l27;
                            bestSpot3 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l51;
                            bestSpot3 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l47;
                            bestSpot2 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l82;
                            bestSpot1 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l38;
                            bestSpot3 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l50;
                            bestSpot3 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l48;
                            bestSpot2 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l71;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l49;
                            bestSpot1 = l49;
                            bestSpot2 = l49;
                            bestSpot3 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-3,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-3,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan5() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 16;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 64;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 2;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 128;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 128;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 128;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 128;
                            bestSpot7 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 8;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 4;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 8;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 305;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 305;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 305;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 305;
                            bestSpot0 = l96;
                            bestSpot4 = l96;
                            bestSpot5 = l96;
                            bestSpot8 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 66;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l90;
                            bestSpot6 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l30;
                            bestSpot7 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 8;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 16;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 80;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 80;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 80;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 80;
                            bestSpot4 = l103;
                            bestSpot6 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 2;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 160;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 160;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 160;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 160;
                            bestSpot5 = l53;
                            bestSpot7 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 10;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l45;
                            bestSpot3 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 4;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 12;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l15;
                            bestSpot3 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 16;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 32;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 17;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l95;
                            bestSpot4 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 66;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l91;
                            bestSpot6 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 33;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l85;
                            bestSpot5 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 2;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 132;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l41;
                            bestSpot7 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 8;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 8;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 17;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l94;
                            bestSpot4 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 83;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 83;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 83;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 83;
                            bestSpot0 = l92;
                            bestSpot1 = l92;
                            bestSpot4 = l92;
                            bestSpot6 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 33;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l74;
                            bestSpot5 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 165;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 165;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 165;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 165;
                            bestSpot0 = l52;
                            bestSpot2 = l52;
                            bestSpot5 = l52;
                            bestSpot7 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 10;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l46;
                            bestSpot3 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 12;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l26;
                            bestSpot3 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 17;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l93;
                            bestSpot4 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 33;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l63;
                            bestSpot5 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l81;
                            bestSpot1 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l51;
                            bestSpot2 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l47;
                            bestSpot3 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l37;
                            bestSpot3 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l70;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l50;
                            bestSpot2 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l48;
                            bestSpot1 = l48;
                            bestSpot2 = l48;
                            bestSpot3 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l49;
                            bestSpot2 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-3,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan6() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 288;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 288;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 288;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 288;
                            bestSpot5 = l106;
                            bestSpot8 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 160;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 160;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 160;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 160;
                            bestSpot5 = l102;
                            bestSpot7 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 4;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 64;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 66;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l18;
                            bestSpot6 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 18;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l14;
                            bestSpot4 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 264;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 264;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 264;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 264;
                            bestSpot3 = l96;
                            bestSpot8 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 132;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l90;
                            bestSpot7 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 64;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 16;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 32;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 4;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 72;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l53;
                            bestSpot6 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 20;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l45;
                            bestSpot4 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 2;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 32;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 8;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 4;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 297;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 297;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 297;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 297;
                            bestSpot0 = l95;
                            bestSpot3 = l95;
                            bestSpot5 = l95;
                            bestSpot8 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 165;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 165;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 165;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 165;
                            bestSpot0 = l91;
                            bestSpot2 = l91;
                            bestSpot5 = l91;
                            bestSpot7 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 4;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 64;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 16;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 66;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l29;
                            bestSpot6 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 18;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l25;
                            bestSpot4 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 33;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l94;
                            bestSpot5 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 33;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l92;
                            bestSpot5 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 4;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 72;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l52;
                            bestSpot6 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 20;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l46;
                            bestSpot4 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 2;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 33;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l93;
                            bestSpot5 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 8;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 4;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l84;
                            bestSpot3 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l80;
                            bestSpot2 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 66; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l40;
                            bestSpot6 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 18; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l36;
                            bestSpot4 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l73;
                            bestSpot3 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l69;
                            bestSpot2 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 75; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 75;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 75;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 75;
                            bestSpot0 = l51;
                            bestSpot1 = l51;
                            bestSpot3 = l51;
                            bestSpot6 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 23; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 23;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 23;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 23;
                            bestSpot0 = l47;
                            bestSpot1 = l47;
                            bestSpot2 = l47;
                            bestSpot4 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l62;
                            bestSpot3 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l58;
                            bestSpot2 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l50;
                            bestSpot1 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l48;
                            bestSpot1 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l49;
                            bestSpot1 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-3,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan7() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 128;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 128;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 128;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 128;
                            bestSpot7 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 32;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 4;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 16;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 8;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 64;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 8;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 2;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 132;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l96;
                            bestSpot7 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 305;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 305;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 305;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 305;
                            bestSpot0 = l90;
                            bestSpot4 = l90;
                            bestSpot5 = l90;
                            bestSpot8 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 8;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 66;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l24;
                            bestSpot6 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 160;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 160;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 160;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 160;
                            bestSpot5 = l105;
                            bestSpot7 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 32;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 4;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 16;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 12;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l53;
                            bestSpot3 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 80;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 80;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 80;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 80;
                            bestSpot4 = l45;
                            bestSpot6 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 10;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l17;
                            bestSpot3 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 32;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 4;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 132;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l95;
                            bestSpot7 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 33;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l91;
                            bestSpot5 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 4;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 17;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l79;
                            bestSpot4 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 8;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 66;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l35;
                            bestSpot6 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 8;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 2;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 165;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 165;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 165;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 165;
                            bestSpot0 = l94;
                            bestSpot2 = l94;
                            bestSpot5 = l94;
                            bestSpot7 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 33;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l92;
                            bestSpot5 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 4;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 17;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l68;
                            bestSpot4 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 12;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l52;
                            bestSpot3 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 83;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 83;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 83;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 83;
                            bestSpot0 = l46;
                            bestSpot1 = l46;
                            bestSpot4 = l46;
                            bestSpot6 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 10;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l28;
                            bestSpot3 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 33;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l93;
                            bestSpot5 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 4;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 17;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l57;
                            bestSpot4 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l83;
                            bestSpot2 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l51;
                            bestSpot3 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l47;
                            bestSpot1 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l39;
                            bestSpot3 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l72;
                            bestSpot2 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l50;
                            bestSpot1 = l50;
                            bestSpot2 = l50;
                            bestSpot3 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l48;
                            bestSpot1 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l61;
                            bestSpot2 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l49;
                            bestSpot1 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-3,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(1,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan8() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 610;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 610;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 610;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 610;
                            bestSpot1 = l86;
                            bestSpot5 = l86;
                            bestSpot6 = l86;
                            bestSpot9 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 2185;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 2185;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2185;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 2185;
                            bestSpot0 = l78;
                            bestSpot3 = l78;
                            bestSpot7 = l78;
                            bestSpot11 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 338;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 338;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 338;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 338;
                            bestSpot1 = l42;
                            bestSpot4 = l42;
                            bestSpot6 = l42;
                            bestSpot8 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 1157;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 1157;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1157;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 1157;
                            bestSpot0 = l34;
                            bestSpot2 = l34;
                            bestSpot7 = l34;
                            bestSpot10 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 66;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l75;
                            bestSpot6 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 129;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 129;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 129;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 129;
                            bestSpot0 = l67;
                            bestSpot7 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 66;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l53;
                            bestSpot6 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 129;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 129;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 129;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 129;
                            bestSpot0 = l45;
                            bestSpot7 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 16;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 40;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l104;
                            bestSpot5 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 66;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l64;
                            bestSpot6 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 129;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 129;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 129;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 129;
                            bestSpot0 = l56;
                            bestSpot7 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 20;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l16;
                            bestSpot4 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 32;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l85;
                            bestSpot5 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 9;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l79;
                            bestSpot3 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 18;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l41;
                            bestSpot4 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 5;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l35;
                            bestSpot2 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 16;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 32;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 1;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 1;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 16;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 40;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l93;
                            bestSpot5 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 1;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 20;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l27;
                            bestSpot4 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l84;
                            bestSpot5 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l80;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 18; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l40;
                            bestSpot4 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l36;
                            bestSpot2 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l83;
                            bestSpot5 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l81;
                            bestSpot3 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 18; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l39;
                            bestSpot4 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l37;
                            bestSpot2 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 43; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 43;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 43;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 43;
                            bestSpot0 = l82;
                            bestSpot1 = l82;
                            bestSpot3 = l82;
                            bestSpot5 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 23; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 23;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 23;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 23;
                            bestSpot0 = l38;
                            bestSpot1 = l38;
                            bestSpot2 = l38;
                            bestSpot4 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l71;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l49;
                            bestSpot1 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 2048) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot11) < Constants.DIST_INF){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 1024) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot10) < Constants.DIST_INF){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot5;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-4,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot4;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(4,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-4,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan9() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 8;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 64;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 272;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 272;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 272;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 272;
                            bestSpot4 = l86;
                            bestSpot8 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 66;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l78;
                            bestSpot6 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 144;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 144;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 144;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 144;
                            bestSpot4 = l42;
                            bestSpot7 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 34;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l34;
                            bestSpot5 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 4;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 264;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 264;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 264;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 264;
                            bestSpot3 = l96;
                            bestSpot8 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 64;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l30;
                            bestSpot7 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 32;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 8;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 72;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l103;
                            bestSpot6 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 16;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 2;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 2;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 4;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 36;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 36;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 36;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 36;
                            bestSpot2 = l15;
                            bestSpot5 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 8;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 16;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 64;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 281;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 281;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 281;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 281;
                            bestSpot0 = l85;
                            bestSpot3 = l85;
                            bestSpot4 = l85;
                            bestSpot8 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 66;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l79;
                            bestSpot6 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 149;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 149;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 149;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 149;
                            bestSpot0 = l41;
                            bestSpot2 = l41;
                            bestSpot4 = l41;
                            bestSpot7 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 34;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l35;
                            bestSpot5 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 32;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 8;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 72;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l92;
                            bestSpot6 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 17;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l74;
                            bestSpot4 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l52;
                            bestSpot4 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 36;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 36;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 36;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 36;
                            bestSpot2 = l26;
                            bestSpot5 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 8;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 17;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l63;
                            bestSpot4 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l84;
                            bestSpot3 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 66; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l80;
                            bestSpot6 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l40;
                            bestSpot2 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l36;
                            bestSpot5 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l83;
                            bestSpot3 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 75; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 75;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 75;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 75;
                            bestSpot0 = l81;
                            bestSpot1 = l81;
                            bestSpot3 = l81;
                            bestSpot6 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l39;
                            bestSpot2 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 39; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 39;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 39;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 39;
                            bestSpot0 = l37;
                            bestSpot1 = l37;
                            bestSpot2 = l37;
                            bestSpot5 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l82;
                            bestSpot3 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l38;
                            bestSpot2 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l70;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l48;
                            bestSpot1 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-4,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan10() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        flag = false;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 68;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 68;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 68;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 68;
                            bestSpot2 = l106;
                            bestSpot6 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 260;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l102;
                            bestSpot8 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 72;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l86;
                            bestSpot6 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 272;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 272;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 272;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 272;
                            bestSpot4 = l78;
                            bestSpot8 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 40;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l42;
                            bestSpot5 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 144;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 144;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 144;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 144;
                            bestSpot4 = l34;
                            bestSpot7 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 34;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l18;
                            bestSpot5 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 130;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l14;
                            bestSpot7 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 64;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 256;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 256;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 256;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 256;
                            bestSpot8 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 32;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 128;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 128;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 128;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 128;
                            bestSpot7 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 4;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 16;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 8;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 2;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 8;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 68;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 68;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 68;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 68;
                            bestSpot2 = l95;
                            bestSpot6 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 260;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l91;
                            bestSpot8 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 72;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 72;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 72;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 72;
                            bestSpot3 = l85;
                            bestSpot6 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 272;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 272;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 272;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 272;
                            bestSpot4 = l79;
                            bestSpot8 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 40;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l41;
                            bestSpot5 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 144;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 144;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 144;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 144;
                            bestSpot4 = l35;
                            bestSpot7 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 34;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l29;
                            bestSpot5 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 130;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l25;
                            bestSpot7 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 4;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 16;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 8;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 16;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 2;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 8;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 16;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 77;
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 77;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 77;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 77;
                            bestSpot0 = l84;
                            bestSpot2 = l84;
                            bestSpot3 = l84;
                            bestSpot6 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 277;
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 277;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 277;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 277;
                            bestSpot0 = l80;
                            bestSpot2 = l80;
                            bestSpot4 = l80;
                            bestSpot8 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 43;
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 43;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 43;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 43;
                            bestSpot0 = l40;
                            bestSpot1 = l40;
                            bestSpot3 = l40;
                            bestSpot5 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 147;
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 147;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 147;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 147;
                            bestSpot0 = l36;
                            bestSpot1 = l36;
                            bestSpot4 = l36;
                            bestSpot7 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 5;
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l83;
                            bestSpot2 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 5;
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l81;
                            bestSpot2 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 9;
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l73;
                            bestSpot3 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 17;
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l69;
                            bestSpot4 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 9;
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l51;
                            bestSpot3 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 17;
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l47;
                            bestSpot4 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 3;
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l39;
                            bestSpot1 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 3;
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l37;
                            bestSpot1 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 5;
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l82;
                            bestSpot2 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 9;
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l62;
                            bestSpot3 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 17;
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l58;
                            bestSpot4 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 3;
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l38;
                            bestSpot1 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 1;
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan11() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 34;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l86;
                            bestSpot5 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 320;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 320;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 320;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 320;
                            bestSpot6 = l78;
                            bestSpot8 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 18;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l42;
                            bestSpot4 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 192;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 192;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 192;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 192;
                            bestSpot6 = l34;
                            bestSpot7 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 264;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 264;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 264;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 264;
                            bestSpot3 = l90;
                            bestSpot8 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 132;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l24;
                            bestSpot7 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 40;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l105;
                            bestSpot5 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 2;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 64;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 2;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 64;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 20;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l17;
                            bestSpot4 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 8;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 2;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 64;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 32;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l85;
                            bestSpot5 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 329;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 329;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 329;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 329;
                            bestSpot0 = l79;
                            bestSpot3 = l79;
                            bestSpot6 = l79;
                            bestSpot8 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 18;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l41;
                            bestSpot4 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 197;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 197;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 197;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 197;
                            bestSpot0 = l35;
                            bestSpot2 = l35;
                            bestSpot6 = l35;
                            bestSpot7 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 16;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 40;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l94;
                            bestSpot5 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 65;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l68;
                            bestSpot6 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 65;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l46;
                            bestSpot6 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 20;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l28;
                            bestSpot4 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 8;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 65;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l57;
                            bestSpot6 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l84;
                            bestSpot5 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l80;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 18; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l40;
                            bestSpot4 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l36;
                            bestSpot2 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 43; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 43;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 43;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 43;
                            bestSpot0 = l83;
                            bestSpot1 = l83;
                            bestSpot3 = l83;
                            bestSpot5 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l81;
                            bestSpot3 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 23; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 23;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 23;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 23;
                            bestSpot0 = l39;
                            bestSpot1 = l39;
                            bestSpot2 = l39;
                            bestSpot4 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l37;
                            bestSpot2 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l82;
                            bestSpot3 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l38;
                            bestSpot2 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l72;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l50;
                            bestSpot1 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l61;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-4,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(0,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan12() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 4;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 260;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 260;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 260;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 260;
                            bestSpot2 = l86;
                            bestSpot8 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 520;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 520;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 520;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 520;
                            bestSpot3 = l78;
                            bestSpot9 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 65;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l42;
                            bestSpot6 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 130;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l34;
                            bestSpot7 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 4;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 17;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l30;
                            bestSpot4 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 34;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l24;
                            bestSpot5 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 325;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 325;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 325;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 325;
                            bestSpot0 = l75;
                            bestSpot2 = l75;
                            bestSpot6 = l75;
                            bestSpot8 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 650;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 650;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 650;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 650;
                            bestSpot1 = l67;
                            bestSpot3 = l67;
                            bestSpot7 = l67;
                            bestSpot9 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 65;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l53;
                            bestSpot6 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 130;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l45;
                            bestSpot7 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 16;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 32;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 12;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l104;
                            bestSpot3 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 65;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l64;
                            bestSpot6 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 130;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l56;
                            bestSpot7 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 48;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 48;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 48;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 48;
                            bestSpot4 = l16;
                            bestSpot5 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 4;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 4;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 1;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 2;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 17;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l29;
                            bestSpot4 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 34;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l25;
                            bestSpot5 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 5;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l74;
                            bestSpot2 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 10;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l68;
                            bestSpot3 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 1;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 17;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l28;
                            bestSpot4 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 34;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l26;
                            bestSpot5 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 12;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l93;
                            bestSpot3 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 1;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 51;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 51;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 51;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 51;
                            bestSpot0 = l27;
                            bestSpot1 = l27;
                            bestSpot4 = l27;
                            bestSpot5 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l73;
                            bestSpot2 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l69;
                            bestSpot3 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l82;
                            bestSpot3 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l38;
                            bestSpot1 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l72;
                            bestSpot2 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l70;
                            bestSpot3 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l71;
                            bestSpot1 = l71;
                            bestSpot2 = l71;
                            bestSpot3 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l49;
                            bestSpot1 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l60;
                            bestSpot1 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(3,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 512) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot9) < Constants.DIST_INF){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(3,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan13() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 4;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 64;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 2;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 32;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 128;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 128;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 128;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 128;
                            bestSpot7 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 68;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 68;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 68;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 68;
                            bestSpot2 = l96;
                            bestSpot6 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 305;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 305;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 305;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 305;
                            bestSpot0 = l30;
                            bestSpot4 = l30;
                            bestSpot5 = l30;
                            bestSpot8 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 130;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l24;
                            bestSpot7 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 12;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l103;
                            bestSpot3 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 80;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 80;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 80;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 80;
                            bestSpot4 = l75;
                            bestSpot6 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 10;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l67;
                            bestSpot3 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 2;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 32;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 160;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 160;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 160;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 160;
                            bestSpot5 = l15;
                            bestSpot7 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 16;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 32;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 4;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 68;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 68;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 68;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 68;
                            bestSpot2 = l85;
                            bestSpot6 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 17;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l41;
                            bestSpot4 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 2;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 33;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l29;
                            bestSpot5 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 130;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 130;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 130;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 130;
                            bestSpot1 = l25;
                            bestSpot7 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 12;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l92;
                            bestSpot3 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 85;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 85;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 85;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 85;
                            bestSpot0 = l74;
                            bestSpot2 = l74;
                            bestSpot4 = l74;
                            bestSpot6 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 10;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l68;
                            bestSpot3 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l52;
                            bestSpot4 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 33;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l28;
                            bestSpot5 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 163;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 163;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 163;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 163;
                            bestSpot0 = l26;
                            bestSpot1 = l26;
                            bestSpot5 = l26;
                            bestSpot7 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 17;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l63;
                            bestSpot4 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 33;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l27;
                            bestSpot5 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l81;
                            bestSpot3 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l73;
                            bestSpot2 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l69;
                            bestSpot3 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l37;
                            bestSpot1 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l72;
                            bestSpot2 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l70;
                            bestSpot1 = l70;
                            bestSpot2 = l70;
                            bestSpot3 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l48;
                            bestSpot1 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l71;
                            bestSpot2 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l59;
                            bestSpot1 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(3,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan14() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 18;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l106;
                            bestSpot4 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 34;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l102;
                            bestSpot5 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 16;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 32;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 4;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 8;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 192;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 192;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 192;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 192;
                            bestSpot6 = l18;
                            bestSpot7 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 320;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 320;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 320;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 320;
                            bestSpot6 = l14;
                            bestSpot8 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 16;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 32;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l30;
                            bestSpot7 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 264;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 264;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 264;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 264;
                            bestSpot3 = l24;
                            bestSpot8 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 2;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 2;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 20;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l75;
                            bestSpot4 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 40;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l67;
                            bestSpot5 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 4;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 8;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 64;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 64;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 2;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 4;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 8;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 64;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 18;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l95;
                            bestSpot4 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 34;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l91;
                            bestSpot5 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 16;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 32;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 8;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 197;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 197;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 197;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 197;
                            bestSpot0 = l29;
                            bestSpot2 = l29;
                            bestSpot6 = l29;
                            bestSpot7 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 329;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 329;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 329;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 329;
                            bestSpot0 = l25;
                            bestSpot3 = l25;
                            bestSpot6 = l25;
                            bestSpot8 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 20;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 20;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 20;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 20;
                            bestSpot2 = l74;
                            bestSpot4 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 40;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 40;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 40;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 40;
                            bestSpot3 = l68;
                            bestSpot5 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 8;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 65;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l28;
                            bestSpot6 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 65;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l26;
                            bestSpot6 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 4;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 8;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 65;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 65;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 65;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 65;
                            bestSpot0 = l27;
                            bestSpot6 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 18; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 18;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 18;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 18;
                            bestSpot1 = l84;
                            bestSpot4 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 34; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 34;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 34;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 34;
                            bestSpot1 = l80;
                            bestSpot5 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l40;
                            bestSpot2 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l36;
                            bestSpot3 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 23; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 23;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 23;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 23;
                            bestSpot0 = l73;
                            bestSpot1 = l73;
                            bestSpot2 = l73;
                            bestSpot4 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 43; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 43;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 43;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 43;
                            bestSpot0 = l69;
                            bestSpot1 = l69;
                            bestSpot3 = l69;
                            bestSpot5 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l51;
                            bestSpot2 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l47;
                            bestSpot3 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l62;
                            bestSpot2 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 9; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 9;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 9;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 9;
                            bestSpot0 = l58;
                            bestSpot3 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l72;
                            bestSpot1 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l70;
                            bestSpot1 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l71;
                            bestSpot1 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(3,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }



    static void scan15() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 8;
            else {
                switch(m106.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l106;
                        flag = false;
                }
                if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m106.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v106 < Constants.DIST_INF) emptyLoc = l106;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l106;
                    }
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 4;
            else {
                switch(m102.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l102;
                        flag = false;
                }
                if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m102.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v102 < Constants.DIST_INF) emptyLoc = l102;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l102;
                    }
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else {
                switch(m86.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l86;
                        flag = false;
                }
                if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m86.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v86 < Constants.DIST_INF) emptyLoc = l86;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l86;
                    }
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 128;
            else {
                switch(m78.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l78;
                        flag = false;
                }
                if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 128;
                else{
                    switch(m78.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 128;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v78 < Constants.DIST_INF) emptyLoc = l78;
                        default:
                            targetCenters |= 128;
                            bestSpot7 = l78;
                    }
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 2;
            else {
                switch(m42.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l42;
                        flag = false;
                }
                if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m42.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v42 < Constants.DIST_INF) emptyLoc = l42;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l42;
                    }
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else {
                switch(m34.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l34;
                        flag = false;
                }
                if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m34.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v34 < Constants.DIST_INF) emptyLoc = l34;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l34;
                    }
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 64;
            else {
                switch(m18.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l18;
                        flag = false;
                }
                if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 64;
                else{
                    switch(m18.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 64;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v18 < Constants.DIST_INF) emptyLoc = l18;
                        default:
                            targetCenters |= 64;
                            bestSpot6 = l18;
                    }
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else {
                switch(m14.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l14;
                        flag = false;
                }
                if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m14.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v14 < Constants.DIST_INF) emptyLoc = l14;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l14;
                    }
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else {
                switch(m96.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l96;
                        flag = false;
                }
                if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m96.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v96 < Constants.DIST_INF) emptyLoc = l96;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l96;
                    }
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 132;
            else {
                switch(m90.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l90;
                        flag = false;
                }
                if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m90.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v90 < Constants.DIST_INF) emptyLoc = l90;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l90;
                            bestSpot7 = l90;
                    }
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 66;
            else {
                switch(m30.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l30;
                        flag = false;
                }
                if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m30.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v30 < Constants.DIST_INF) emptyLoc = l30;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l30;
                            bestSpot6 = l30;
                    }
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 305;
            else {
                switch(m24.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l24;
                        flag = false;
                }
                if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 305;
                else{
                    switch(m24.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 305;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v24 < Constants.DIST_INF) emptyLoc = l24;
                        default:
                            targetCenters |= 305;
                            bestSpot0 = l24;
                            bestSpot4 = l24;
                            bestSpot5 = l24;
                            bestSpot8 = l24;
                    }
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 12;
            else {
                switch(m105.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l105;
                        flag = false;
                }
                if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m105.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v105 < Constants.DIST_INF) emptyLoc = l105;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l105;
                            bestSpot3 = l105;
                    }
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 4;
            else {
                switch(m103.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l103;
                        flag = false;
                }
                if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m103.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v103 < Constants.DIST_INF) emptyLoc = l103;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l103;
                    }
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 10;
            else {
                switch(m75.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l75;
                        flag = false;
                }
                if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m75.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v75 < Constants.DIST_INF) emptyLoc = l75;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l75;
                            bestSpot3 = l75;
                    }
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 144;
            else {
                switch(m67.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l67;
                        flag = false;
                }
                if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 144;
                else{
                    switch(m67.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 144;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v67 < Constants.DIST_INF) emptyLoc = l67;
                        default:
                            targetCenters |= 144;
                            bestSpot4 = l67;
                            bestSpot7 = l67;
                    }
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 2;
            else {
                switch(m53.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l53;
                        flag = false;
                }
                if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m53.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v53 < Constants.DIST_INF) emptyLoc = l53;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l53;
                    }
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else {
                switch(m45.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l45;
                        flag = false;
                }
                if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m45.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v45 < Constants.DIST_INF) emptyLoc = l45;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l45;
                    }
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 96;
            else {
                switch(m17.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l17;
                        flag = false;
                }
                if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 96;
                else{
                    switch(m17.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 96;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v17 < Constants.DIST_INF) emptyLoc = l17;
                        default:
                            targetCenters |= 96;
                            bestSpot5 = l17;
                            bestSpot6 = l17;
                    }
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 32;
            else {
                switch(m15.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l15;
                        flag = false;
                }
                if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m15.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v15 < Constants.DIST_INF) emptyLoc = l15;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l15;
                    }
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else {
                switch(m104.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l104;
                }
                if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m104.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v104 < Constants.DIST_INF) emptyLoc = l104;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l104;
                    }
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 2;
            else {
                switch(m64.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l64;
                }
                if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m64.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v64 < Constants.DIST_INF) emptyLoc = l64;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l64;
                    }
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else {
                switch(m56.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l56;
                }
                if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
                else{
                    switch(m56.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 16;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v56 < Constants.DIST_INF) emptyLoc = l56;
                        default:
                            targetCenters |= 16;
                            bestSpot4 = l56;
                    }
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 32;
            else {
                switch(m16.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l16;
                }
                if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 32;
                else{
                    switch(m16.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 32;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v16 < Constants.DIST_INF) emptyLoc = l16;
                        default:
                            targetCenters |= 32;
                            bestSpot5 = l16;
                    }
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else {
                switch(m95.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l95;
                        flag = false;
                }
                if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m95.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v95 < Constants.DIST_INF) emptyLoc = l95;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l95;
                    }
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 4;
            else {
                switch(m91.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l91;
                        flag = false;
                }
                if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m91.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v91 < Constants.DIST_INF) emptyLoc = l91;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l91;
                    }
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else {
                switch(m85.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l85;
                        flag = false;
                }
                if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m85.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v85 < Constants.DIST_INF) emptyLoc = l85;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l85;
                    }
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 132;
            else {
                switch(m79.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l79;
                        flag = false;
                }
                if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 132;
                else{
                    switch(m79.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 132;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v79 < Constants.DIST_INF) emptyLoc = l79;
                        default:
                            targetCenters |= 132;
                            bestSpot2 = l79;
                            bestSpot7 = l79;
                    }
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 2;
            else {
                switch(m41.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l41;
                        flag = false;
                }
                if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m41.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v41 < Constants.DIST_INF) emptyLoc = l41;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l41;
                    }
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 17;
            else {
                switch(m35.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l35;
                        flag = false;
                }
                if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m35.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v35 < Constants.DIST_INF) emptyLoc = l35;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l35;
                            bestSpot4 = l35;
                    }
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 66;
            else {
                switch(m29.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l29;
                        flag = false;
                }
                if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 66;
                else{
                    switch(m29.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 66;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v29 < Constants.DIST_INF) emptyLoc = l29;
                        default:
                            targetCenters |= 66;
                            bestSpot1 = l29;
                            bestSpot6 = l29;
                    }
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 33;
            else {
                switch(m25.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l25;
                        flag = false;
                }
                if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m25.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v25 < Constants.DIST_INF) emptyLoc = l25;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l25;
                            bestSpot5 = l25;
                    }
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 12;
            else {
                switch(m94.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l94;
                        flag = false;
                }
                if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m94.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v94 < Constants.DIST_INF) emptyLoc = l94;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l94;
                            bestSpot3 = l94;
                    }
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 4;
            else {
                switch(m92.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l92;
                        flag = false;
                }
                if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m92.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v92 < Constants.DIST_INF) emptyLoc = l92;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l92;
                    }
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 10;
            else {
                switch(m74.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l74;
                        flag = false;
                }
                if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m74.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v74 < Constants.DIST_INF) emptyLoc = l74;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l74;
                            bestSpot3 = l74;
                    }
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 149;
            else {
                switch(m68.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l68;
                        flag = false;
                }
                if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 149;
                else{
                    switch(m68.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 149;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v68 < Constants.DIST_INF) emptyLoc = l68;
                        default:
                            targetCenters |= 149;
                            bestSpot0 = l68;
                            bestSpot2 = l68;
                            bestSpot4 = l68;
                            bestSpot7 = l68;
                    }
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else {
                switch(m52.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l52;
                        flag = false;
                }
                if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m52.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v52 < Constants.DIST_INF) emptyLoc = l52;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l52;
                    }
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 17;
            else {
                switch(m46.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l46;
                        flag = false;
                }
                if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m46.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v46 < Constants.DIST_INF) emptyLoc = l46;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l46;
                            bestSpot4 = l46;
                    }
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 99;
            else {
                switch(m28.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l28;
                        flag = false;
                }
                if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 99;
                else{
                    switch(m28.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 99;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v28 < Constants.DIST_INF) emptyLoc = l28;
                        default:
                            targetCenters |= 99;
                            bestSpot0 = l28;
                            bestSpot1 = l28;
                            bestSpot5 = l28;
                            bestSpot6 = l28;
                    }
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 33;
            else {
                switch(m26.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l26;
                        flag = false;
                }
                if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m26.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v26 < Constants.DIST_INF) emptyLoc = l26;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l26;
                            bestSpot5 = l26;
                    }
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else {
                switch(m93.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l93;
                        flag = false;
                }
                if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m93.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v93 < Constants.DIST_INF) emptyLoc = l93;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l93;
                    }
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else {
                switch(m63.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l63;
                        flag = false;
                }
                if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m63.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v63 < Constants.DIST_INF) emptyLoc = l63;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l63;
                    }
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 17;
            else {
                switch(m57.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l57;
                        flag = false;
                }
                if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 17;
                else{
                    switch(m57.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 17;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v57 < Constants.DIST_INF) emptyLoc = l57;
                        default:
                            targetCenters |= 17;
                            bestSpot0 = l57;
                            bestSpot4 = l57;
                    }
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 33;
            else {
                switch(m27.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l27;
                        flag = false;
                }
                if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 33;
                else{
                    switch(m27.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 33;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v27 < Constants.DIST_INF) emptyLoc = l27;
                        default:
                            targetCenters |= 33;
                            bestSpot0 = l27;
                            bestSpot5 = l27;
                    }
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) {obstructedCenters |= 8; flag = false;}
            else {
                switch(m84.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l84;
                        flag = false;
                }
                if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
                else{
                    switch(m84.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 8;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v84 < Constants.DIST_INF) emptyLoc = l84;
                        default:
                            targetCenters |= 8;
                            bestSpot3 = l84;
                    }
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m80.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l80;
                        flag = false;
                }
                if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m80.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v80 < Constants.DIST_INF) emptyLoc = l80;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l80;
                    }
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m40.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l40;
                        flag = false;
                }
                if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m40.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v40 < Constants.DIST_INF) emptyLoc = l40;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l40;
                    }
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m36.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l36;
                        flag = false;
                }
                if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m36.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v36 < Constants.DIST_INF) emptyLoc = l36;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l36;
                    }
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) {obstructedCenters |= 12; flag = false;}
            else {
                switch(m83.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l83;
                        flag = false;
                }
                if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 12;
                else{
                    switch(m83.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 12;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v83 < Constants.DIST_INF) emptyLoc = l83;
                        default:
                            targetCenters |= 12;
                            bestSpot2 = l83;
                            bestSpot3 = l83;
                    }
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m81.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l81;
                        flag = false;
                }
                if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m81.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v81 < Constants.DIST_INF) emptyLoc = l81;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l81;
                    }
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) {obstructedCenters |= 10; flag = false;}
            else {
                switch(m73.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l73;
                        flag = false;
                }
                if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 10;
                else{
                    switch(m73.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 10;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v73 < Constants.DIST_INF) emptyLoc = l73;
                        default:
                            targetCenters |= 10;
                            bestSpot1 = l73;
                            bestSpot3 = l73;
                    }
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m69.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l69;
                        flag = false;
                }
                if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m69.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v69 < Constants.DIST_INF) emptyLoc = l69;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l69;
                            bestSpot2 = l69;
                    }
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m51.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l51;
                        flag = false;
                }
                if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m51.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v51 < Constants.DIST_INF) emptyLoc = l51;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l51;
                    }
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m47.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l47;
                        flag = false;
                }
                if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m47.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v47 < Constants.DIST_INF) emptyLoc = l47;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l47;
                    }
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m39.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l39;
                        flag = false;
                }
                if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m39.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v39 < Constants.DIST_INF) emptyLoc = l39;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l39;
                            bestSpot1 = l39;
                    }
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m37.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l37;
                        flag = false;
                }
                if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m37.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v37 < Constants.DIST_INF) emptyLoc = l37;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l37;
                    }
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) {obstructedCenters |= 4; flag = false;}
            else {
                switch(m82.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l82;
                        flag = false;
                }
                if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 4;
                else{
                    switch(m82.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 4;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v82 < Constants.DIST_INF) emptyLoc = l82;
                        default:
                            targetCenters |= 4;
                            bestSpot2 = l82;
                    }
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) {obstructedCenters |= 2; flag = false;}
            else {
                switch(m62.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l62;
                        flag = false;
                }
                if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
                else{
                    switch(m62.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 2;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v62 < Constants.DIST_INF) emptyLoc = l62;
                        default:
                            targetCenters |= 2;
                            bestSpot1 = l62;
                    }
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m58.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l58;
                        flag = false;
                }
                if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m58.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v58 < Constants.DIST_INF) emptyLoc = l58;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l58;
                    }
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m38.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l38;
                        flag = false;
                }
                if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m38.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v38 < Constants.DIST_INF) emptyLoc = l38;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l38;
                    }
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) {obstructedCenters |= 15; flag = false;}
            else {
                switch(m72.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l72;
                        flag = false;
                }
                if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 15;
                else{
                    switch(m72.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 15;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v72 < Constants.DIST_INF) emptyLoc = l72;
                        default:
                            targetCenters |= 15;
                            bestSpot0 = l72;
                            bestSpot1 = l72;
                            bestSpot2 = l72;
                            bestSpot3 = l72;
                    }
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m70.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l70;
                        flag = false;
                }
                if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m70.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v70 < Constants.DIST_INF) emptyLoc = l70;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l70;
                            bestSpot2 = l70;
                    }
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m50.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l50;
                        flag = false;
                }
                if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m50.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v50 < Constants.DIST_INF) emptyLoc = l50;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l50;
                            bestSpot1 = l50;
                    }
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m48.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l48;
                        flag = false;
                }
                if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m48.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v48 < Constants.DIST_INF) emptyLoc = l48;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l48;
                    }
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) {obstructedCenters |= 5; flag = false;}
            else {
                switch(m71.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l71;
                        flag = false;
                }
                if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 5;
                else{
                    switch(m71.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 5;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v71 < Constants.DIST_INF) emptyLoc = l71;
                        default:
                            targetCenters |= 5;
                            bestSpot0 = l71;
                            bestSpot2 = l71;
                    }
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) {obstructedCenters |= 3; flag = false;}
            else {
                switch(m61.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l61;
                        flag = false;
                }
                if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
                else{
                    switch(m61.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 3;
                            break;
                        case ALLY_SECONDARY:
                            break;
                        case EMPTY:
                            if (v61 < Constants.DIST_INF) emptyLoc = l61;
                        default:
                            targetCenters |= 3;
                            bestSpot0 = l61;
                            bestSpot1 = l61;
                    }
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m59.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l59;
                        flag = false;
                }
                if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m59.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v59 < Constants.DIST_INF) emptyLoc = l59;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l59;
                    }
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m49.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l49;
                        flag = false;
                }
                if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m49.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v49 < Constants.DIST_INF) emptyLoc = l49;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l49;
                    }
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) {obstructedCenters |= 1; flag = false;}
            else {
                switch(m60.getMark()){
                    case ALLY_PRIMARY:
                        flags[flagSize++] = l60;
                }
                if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
                else{
                    switch(m60.getPaint()){
                        case ENEMY_PRIMARY, ENEMY_SECONDARY:
                            unavailableCenters |= 1;
                            break;
                        case ALLY_PRIMARY:
                            break;
                        case EMPTY:
                            if (v60 < Constants.DIST_INF) emptyLoc = l60;
                        default:
                            targetCenters |= 1;
                            bestSpot0 = l60;
                    }
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 256) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot8) < Constants.DIST_INF){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 128) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot7) < Constants.DIST_INF){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 64) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot6) < Constants.DIST_INF){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 32) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot5) < Constants.DIST_INF){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters & 16) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot4) < Constants.DIST_INF){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 8) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot3) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot3;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(3,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 4) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot2) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot2;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 2) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot1) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot1;
                    bestCenter = center;
                }
            }
        }
        center = myLoc.translate(-1,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else{
                if (Map.notObstructed(center)) flag = false;
                if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
                else if ((targetCenters & 1) > 0 && Map.canBeCenterNoCheck(center) && computeDistance(bestSpot0) < Constants.DIST_INF){
                    bestSRPSpot = bestSpot0;
                    bestCenter = center;
                }
            }
        }
    }






    static PaintType getFlagPaint(MapLocation loc){
        int dx = loc.x - rc.getLocation().x, dy = loc.y - rc.getLocation().y;
        switch(dx){
            case -2:
                switch(dy){
                    case 0:
                        return flagAttackPaint9;
                }
                break;
            case -1:
                switch(dy){
                    case -1:
                        return flagAttackPaint5;
                    case 0:
                        return flagAttackPaint1;
                    case 1:
                        return flagAttackPaint6;
                }
                break;
            case 0:
                switch(dy){
                    case -2:
                        return flagAttackPaint10;
                    case -1:
                        return flagAttackPaint2;
                    case 0:
                        return flagAttackPaint0;
                    case 1:
                        return flagAttackPaint3;
                    case 2:
                        return flagAttackPaint11;
                }
                break;
            case 1:
                switch(dy){
                    case -1:
                        return flagAttackPaint7;
                    case 0:
                        return flagAttackPaint4;
                    case 1:
                        return flagAttackPaint8;
                }
                break;
            case 2:
                switch(dy){
                    case 0:
                        return flagAttackPaint12;
                }
                break;
        }
        return null;
    }

    static void addNewFlags(Direction dir) throws GameActionException {
        MapLocation loc;
        myLoc = rc.getLocation();
        switch(dir){
            case NORTH:
                loc = myLoc.translate(0,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case NORTHWEST:
                loc = myLoc.translate(-3,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(0,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case WEST:
                loc = myLoc.translate(-4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case SOUTHWEST:
                loc = myLoc.translate(-3,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(0,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case SOUTH:
                loc = myLoc.translate(0,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case SOUTHEAST:
                loc = myLoc.translate(2,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(0,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case EAST:
                loc = myLoc.translate(4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,-3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,-4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
            case NORTHEAST:
                loc = myLoc.translate(2,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(0,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,0);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(1,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,1);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(3,3);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(-2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(2,4);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,-2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                loc = myLoc.translate(4,2);
                if (rc.canSenseLocation(loc) && rc.senseMapInfo(loc).getMark() != PaintType.EMPTY) flags[flagSize++] = loc;
                break;
        }
    }

    static MapLocation bestFlagLoc;
    static void flagPaintCheck(int i) throws GameActionException {
        MapLocation loc = flags[i];
        bestFlagLoc = null;
        int dx = loc.x - rc.getLocation().x, dy = loc.y - rc.getLocation().y;
        switch(dx){
            case -4:
                switch(dy){
                    case -2:
                        checkFlag2();
                        break;
                    case -1:
                        checkFlag3();
                        break;
                    case 0:
                        checkFlag4();
                        break;
                    case 1:
                        checkFlag5();
                        break;
                    case 2:
                        checkFlag6();
                        break;
                }
                break;
            case -3:
                switch(dy){
                    case -3:
                        checkFlag11();
                        break;
                    case -2:
                        checkFlag12();
                        break;
                    case -1:
                        checkFlag13();
                        break;
                    case 0:
                        checkFlag14();
                        break;
                    case 1:
                        checkFlag15();
                        break;
                    case 2:
                        checkFlag16();
                        break;
                    case 3:
                        checkFlag17();
                        break;
                }
                break;
            case -2:
                switch(dy){
                    case -4:
                        checkFlag20();
                        break;
                    case -3:
                        checkFlag21();
                        break;
                    case -2:
                        checkFlag22();
                        break;
                    case -1:
                        checkFlag23();
                        break;
                    case 0:
                        checkFlag24();
                        break;
                    case 1:
                        checkFlag25();
                        break;
                    case 2:
                        checkFlag26();
                        break;
                    case 3:
                        checkFlag27();
                        break;
                    case 4:
                        checkFlag28();
                        break;
                }
                break;
            case -1:
                switch(dy){
                    case -4:
                        checkFlag30();
                        break;
                    case -3:
                        checkFlag31();
                        break;
                    case -2:
                        checkFlag32();
                        break;
                    case -1:
                        checkFlag33();
                        break;
                    case 0:
                        checkFlag34();
                        break;
                    case 1:
                        checkFlag35();
                        break;
                    case 2:
                        checkFlag36();
                        break;
                    case 3:
                        checkFlag37();
                        break;
                    case 4:
                        checkFlag38();
                        break;
                }
                break;
            case 0:
                switch(dy){
                    case -4:
                        checkFlag40();
                        break;
                    case -3:
                        checkFlag41();
                        break;
                    case -2:
                        checkFlag42();
                        break;
                    case -1:
                        checkFlag43();
                        break;
                    case 0:
                        checkFlag44();
                        break;
                    case 1:
                        checkFlag45();
                        break;
                    case 2:
                        checkFlag46();
                        break;
                    case 3:
                        checkFlag47();
                        break;
                    case 4:
                        checkFlag48();
                        break;
                }
                break;
            case 1:
                switch(dy){
                    case -4:
                        checkFlag50();
                        break;
                    case -3:
                        checkFlag51();
                        break;
                    case -2:
                        checkFlag52();
                        break;
                    case -1:
                        checkFlag53();
                        break;
                    case 0:
                        checkFlag54();
                        break;
                    case 1:
                        checkFlag55();
                        break;
                    case 2:
                        checkFlag56();
                        break;
                    case 3:
                        checkFlag57();
                        break;
                    case 4:
                        checkFlag58();
                        break;
                }
                break;
            case 2:
                switch(dy){
                    case -4:
                        checkFlag60();
                        break;
                    case -3:
                        checkFlag61();
                        break;
                    case -2:
                        checkFlag62();
                        break;
                    case -1:
                        checkFlag63();
                        break;
                    case 0:
                        checkFlag64();
                        break;
                    case 1:
                        checkFlag65();
                        break;
                    case 2:
                        checkFlag66();
                        break;
                    case 3:
                        checkFlag67();
                        break;
                    case 4:
                        checkFlag68();
                        break;
                }
                break;
            case 3:
                switch(dy){
                    case -3:
                        checkFlag71();
                        break;
                    case -2:
                        checkFlag72();
                        break;
                    case -1:
                        checkFlag73();
                        break;
                    case 0:
                        checkFlag74();
                        break;
                    case 1:
                        checkFlag75();
                        break;
                    case 2:
                        checkFlag76();
                        break;
                    case 3:
                        checkFlag77();
                        break;
                }
                break;
            case 4:
                switch(dy){
                    case -2:
                        checkFlag82();
                        break;
                    case -1:
                        checkFlag83();
                        break;
                    case 0:
                        checkFlag84();
                        break;
                    case 1:
                        checkFlag85();
                        break;
                    case 2:
                        checkFlag86();
                        break;
                }
                break;
        }
        if (!Map.canBeFlagCenter(loc)) bestFlagLoc = null;
    }

    static void checkFlag2() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l14); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l14);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
    }
    static void checkFlag3() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l15); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l15);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
    }
    static void checkFlag4() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l16); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l16);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
    }
    static void checkFlag5() throws GameActionException {
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l17); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l17);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
    }
    static void checkFlag6() throws GameActionException {
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l18); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l18);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
    }
    static void checkFlag11() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l24); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l24);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
    }
    static void checkFlag12() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l25); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l25);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
    }
    static void checkFlag13() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l26); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l26);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
    }
    static void checkFlag14() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l27); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l27);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
    }
    static void checkFlag15() throws GameActionException {
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l28); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l28);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
    }
    static void checkFlag16() throws GameActionException {
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l29); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l29);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
    }
    static void checkFlag17() throws GameActionException {
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l30); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l30);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
    }
    static void checkFlag20() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l34); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l34);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
    }
    static void checkFlag21() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l35); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l35);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
    }
    static void checkFlag22() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l36); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l36);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
    }
    static void checkFlag23() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l37); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l37);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
    }
    static void checkFlag24() throws GameActionException {
        if (Map.isNearRuin(l14)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l14).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l14;
        }
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l38); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l38);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
    }
    static void checkFlag25() throws GameActionException {
        if (Map.isNearRuin(l15)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l15).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l15;
        }
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l39); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l39);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
    }
    static void checkFlag26() throws GameActionException {
        if (Map.isNearRuin(l16)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l16).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l16;
        }
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l40); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l40);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
    }
    static void checkFlag27() throws GameActionException {
        if (Map.isNearRuin(l17)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l17).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l17;
        }
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l41); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l41);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
    }
    static void checkFlag28() throws GameActionException {
        if (Map.isNearRuin(l18)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l18).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l18;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l42); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l42);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
    }
    static void checkFlag30() throws GameActionException {
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l45); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l45);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
    }
    static void checkFlag31() throws GameActionException {
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l46); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l46);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
    }
    static void checkFlag32() throws GameActionException {
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l47); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l47);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
    }
    static void checkFlag33() throws GameActionException {
        if (Map.isNearRuin(l24)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l24).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l24;
        }
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l48); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l48);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
    }
    static void checkFlag34() throws GameActionException {
        if (Map.isNearRuin(l25)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l25).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l25;
        }
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l49); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l49);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
    }
    static void checkFlag35() throws GameActionException {
        if (Map.isNearRuin(l26)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l26).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l26;
        }
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l50); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l50);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
    }
    static void checkFlag36() throws GameActionException {
        if (Map.isNearRuin(l27)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l27).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l27;
        }
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l51); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l51);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
    }
    static void checkFlag37() throws GameActionException {
        if (Map.isNearRuin(l28)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l28).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l28;
        }
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l52); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l52);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
    }
    static void checkFlag38() throws GameActionException {
        if (Map.isNearRuin(l29)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l29).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l29;
        }
        if (Map.isNearRuin(l30)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l30).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l30;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l53); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l53);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
    }
    static void checkFlag40() throws GameActionException {
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l56); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l56);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
    }
    static void checkFlag41() throws GameActionException {
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l57); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l57);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
    }
    static void checkFlag42() throws GameActionException {
        if (Map.isNearRuin(l34)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l34).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l34;
        }
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l58); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l58);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
    }
    static void checkFlag43() throws GameActionException {
        if (Map.isNearRuin(l35)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l35).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l35;
        }
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l59); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l59);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
    }
    static void checkFlag44() throws GameActionException {
        if (Map.isNearRuin(l36)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l36).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l36;
        }
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l60); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l60);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
    }
    static void checkFlag45() throws GameActionException {
        if (Map.isNearRuin(l37)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l37).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l37;
        }
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l61); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l61);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
    }
    static void checkFlag46() throws GameActionException {
        if (Map.isNearRuin(l38)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l38).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l38;
        }
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l62); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l62);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
    }
    static void checkFlag47() throws GameActionException {
        if (Map.isNearRuin(l39)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l39).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l39;
        }
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l63); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l63);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
    }
    static void checkFlag48() throws GameActionException {
        if (Map.isNearRuin(l40)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l40).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l40;
        }
        if (Map.isNearRuin(l41)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l41).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l41;
        }
        if (Map.isNearRuin(l42)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l42).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l42;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l64); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l64);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
    }
    static void checkFlag50() throws GameActionException {
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l67); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l67);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
    }
    static void checkFlag51() throws GameActionException {
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l68); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l68);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
    }
    static void checkFlag52() throws GameActionException {
        if (Map.isNearRuin(l45)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l45).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l45;
        }
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l69); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l69);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
    }
    static void checkFlag53() throws GameActionException {
        if (Map.isNearRuin(l46)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l46).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l46;
        }
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l70); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l70);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
    }
    static void checkFlag54() throws GameActionException {
        if (Map.isNearRuin(l47)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l47).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l47;
        }
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l71); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l71);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
    }
    static void checkFlag55() throws GameActionException {
        if (Map.isNearRuin(l48)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l48).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l48;
        }
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l72); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l72);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
    }
    static void checkFlag56() throws GameActionException {
        if (Map.isNearRuin(l49)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l49).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l49;
        }
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l73); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l73);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
    }
    static void checkFlag57() throws GameActionException {
        if (Map.isNearRuin(l50)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l50).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l50;
        }
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l74); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l74);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
    }
    static void checkFlag58() throws GameActionException {
        if (Map.isNearRuin(l51)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l51).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l51;
        }
        if (Map.isNearRuin(l52)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l52).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l52;
        }
        if (Map.isNearRuin(l53)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l53).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l53;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l75); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l75);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
    }
    static void checkFlag60() throws GameActionException {
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l78); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l78);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
    }
    static void checkFlag61() throws GameActionException {
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l79); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l79);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
    }
    static void checkFlag62() throws GameActionException {
        if (Map.isNearRuin(l56)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l56).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l56;
        }
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l80); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l80);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
    }
    static void checkFlag63() throws GameActionException {
        if (Map.isNearRuin(l57)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l57).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l57;
        }
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l81); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l81);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
    }
    static void checkFlag64() throws GameActionException {
        if (Map.isNearRuin(l58)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l58).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l58;
        }
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l82); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l82);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag65() throws GameActionException {
        if (Map.isNearRuin(l59)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l59).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l59;
        }
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l83); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l83);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag66() throws GameActionException {
        if (Map.isNearRuin(l60)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l60).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l60;
        }
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l84); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l84);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag67() throws GameActionException {
        if (Map.isNearRuin(l61)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l61).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l61;
        }
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l85); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l85);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag68() throws GameActionException {
        if (Map.isNearRuin(l62)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l62).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l62;
        }
        if (Map.isNearRuin(l63)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l63).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l63;
        }
        if (Map.isNearRuin(l64)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l64).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l64;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l86); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l86);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag71() throws GameActionException {
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l90); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l90);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
    }
    static void checkFlag72() throws GameActionException {
        if (Map.isNearRuin(l67)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l67).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l67;
        }
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l91); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l91);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
    }
    static void checkFlag73() throws GameActionException {
        if (Map.isNearRuin(l68)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l68).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l68;
        }
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l92); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l92);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
    }
    static void checkFlag74() throws GameActionException {
        if (Map.isNearRuin(l69)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l69).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l69;
        }
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l93); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l93);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag75() throws GameActionException {
        if (Map.isNearRuin(l70)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l70).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l70;
        }
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l94); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l94);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag76() throws GameActionException {
        if (Map.isNearRuin(l71)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l71).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l71;
        }
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l95); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l95);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag77() throws GameActionException {
        if (Map.isNearRuin(l72)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l72).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l72;
        }
        if (Map.isNearRuin(l73)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l73).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l73;
        }
        if (Map.isNearRuin(l74)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l74).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l74;
        }
        if (Map.isNearRuin(l75)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l75).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l75;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l96); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l96);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag82() throws GameActionException {
        if (Map.isNearRuin(l78)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l78).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l78;
        }
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l102); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l102);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
    }
    static void checkFlag83() throws GameActionException {
        if (Map.isNearRuin(l79)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l79).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l79;
        }
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l90)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l90).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l90;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l103); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l103);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
    }
    static void checkFlag84() throws GameActionException {
        if (Map.isNearRuin(l80)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l80).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l80;
        }
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l91)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l91).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l91;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l102)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l102).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l102;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l104); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l104);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag85() throws GameActionException {
        if (Map.isNearRuin(l81)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l81).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l81;
        }
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l92)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l92).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l92;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l103)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l103).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l103;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l105); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l105);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }
    static void checkFlag86() throws GameActionException {
        if (Map.isNearRuin(l82)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l82).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l82;
        }
        if (Map.isNearRuin(l83)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l83).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l83;
        }
        if (Map.isNearRuin(l84)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l84).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l84;
        }
        if (Map.isNearRuin(l85)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l85).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l85;
        }
        if (Map.isNearRuin(l86)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l86).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l86;
        }
        if (Map.isNearRuin(l93)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l93).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l93;
        }
        if (Map.isNearRuin(l94)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l94).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l94;
        }
        if (Map.isNearRuin(l95)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l95).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l95;
        }
        if (Map.isNearRuin(l96)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l96).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l96;
        }
        if (Map.isNearRuin(l104)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l104).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l104;
        }
        if (Map.isNearRuin(l105)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l105).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_PRIMARY:
                break;
            default:
                bestFlagLoc = l105;
        }
        if (Map.isNearRuin(l106)) {Map.markCenterNearRuins(l106); return;}
        switch(rc.senseMapInfo(l106).getPaint()){
            case ENEMY_PRIMARY, ENEMY_SECONDARY:
                Map.markCenterNearRuins(l106);
                return;
            case ALLY_SECONDARY:
                break;
            default:
                bestFlagLoc = l106;
        }
    }

    static void fillFlagPaint(){
        for (int i = 0; i < flagSize; ++i){
            myLoc = rc.getLocation();
            MapLocation loc = flags[i];
            int dx = loc.x - rc.getLocation().x, dy = loc.y - rc.getLocation().y;
            switch(dx){
                case -4:
                    switch(dy){
                        case -2:
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                        case 0:
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                        case 2:
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case -3:
                    switch(dy){
                        case -3:
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            break;
                        case -2:
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            break;
                        case 0:
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            break;
                        case 2:
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            break;
                        case 3:
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case -2:
                    switch(dy){
                        case -4:
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -3:
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -1:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case 0:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                        case 1:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                        case 2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 3:
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                        case 4:
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case -1:
                    switch(dy){
                        case -4:
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -3:
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case 0:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                        case 1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 3:
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 4:
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case 0:
                    switch(dy){
                        case -4:
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -3:
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -2:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 0:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 2:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint9 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 3:
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 4:
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                    }
                    break;
                case 1:
                    switch(dy){
                        case -4:
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -3:
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            break;
                        case -2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 0:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint5 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint1 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 3:
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint6 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            break;
                        case 4:
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case 2:
                    switch(dy){
                        case -4:
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -3:
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            break;
                        case -2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case -1:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 0:
                            flagAttackPaint0 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint10 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 1:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint2 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 2:
                            flagAttackPaint0 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint11 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 3:
                            flagAttackPaint3 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                        case 4:
                            flagAttackPaint11 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case 3:
                    switch(dy){
                        case -3:
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            break;
                        case -2:
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 0:
                            flagAttackPaint4 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint7 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_PRIMARY;
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 2:
                            flagAttackPaint4 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 3:
                            flagAttackPaint8 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
                case 4:
                    switch(dy){
                        case -2:
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case -1:
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 0:
                            flagAttackPaint12 = PaintType.ALLY_PRIMARY;
                            break;
                        case 1:
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                        case 2:
                            flagAttackPaint12 = PaintType.ALLY_SECONDARY;
                            break;
                    }
                    break;
            }
        }
    }

    static void checkSRPCenters() throws GameActionException {
        myLoc = rc.getLocation();
        switch(myLoc.x%4){
            case 0:
                switch(myLoc.y%4){
                    case 0:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-2,-2))) rc.completeResourcePattern(myLoc.translate(-2,-2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(-2,2))) rc.completeResourcePattern(myLoc.translate(-2,2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(2,-2))) rc.completeResourcePattern(myLoc.translate(2,-2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(2,2))) rc.completeResourcePattern(myLoc.translate(2,2));
                        break;
                    case 1:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-2,1))) rc.completeResourcePattern(myLoc.translate(-2,1));
                        if (rc.canCompleteResourcePattern(myLoc.translate(2,1))) rc.completeResourcePattern(myLoc.translate(2,1));
                        break;
                    case 2:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-2,0))) rc.completeResourcePattern(myLoc.translate(-2,0));
                        if (rc.canCompleteResourcePattern(myLoc.translate(2,0))) rc.completeResourcePattern(myLoc.translate(2,0));
                        break;
                    case 3:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-2,-1))) rc.completeResourcePattern(myLoc.translate(-2,-1));
                        if (rc.canCompleteResourcePattern(myLoc.translate(2,-1))) rc.completeResourcePattern(myLoc.translate(2,-1));
                        break;
                }
                break;
            case 1:
                switch(myLoc.y%4){
                    case 0:
                        if (rc.canCompleteResourcePattern(myLoc.translate(1,-2))) rc.completeResourcePattern(myLoc.translate(1,-2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(1,2))) rc.completeResourcePattern(myLoc.translate(1,2));
                        break;
                    case 1:
                        if (rc.canCompleteResourcePattern(myLoc.translate(1,1))) rc.completeResourcePattern(myLoc.translate(1,1));
                        break;
                    case 2:
                        if (rc.canCompleteResourcePattern(myLoc.translate(1,0))) rc.completeResourcePattern(myLoc.translate(1,0));
                        break;
                    case 3:
                        if (rc.canCompleteResourcePattern(myLoc.translate(1,-1))) rc.completeResourcePattern(myLoc.translate(1,-1));
                        break;
                }
                break;
            case 2:
                switch(myLoc.y%4){
                    case 0:
                        if (rc.canCompleteResourcePattern(myLoc.translate(0,-2))) rc.completeResourcePattern(myLoc.translate(0,-2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(0,2))) rc.completeResourcePattern(myLoc.translate(0,2));
                        break;
                    case 1:
                        if (rc.canCompleteResourcePattern(myLoc.translate(0,1))) rc.completeResourcePattern(myLoc.translate(0,1));
                        break;
                    case 2:
                        if (rc.canCompleteResourcePattern(myLoc.translate(0,0))) rc.completeResourcePattern(myLoc.translate(0,0));
                        break;
                    case 3:
                        if (rc.canCompleteResourcePattern(myLoc.translate(0,-1))) rc.completeResourcePattern(myLoc.translate(0,-1));
                        break;
                }
                break;
            case 3:
                switch(myLoc.y%4){
                    case 0:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-1,-2))) rc.completeResourcePattern(myLoc.translate(-1,-2));
                        if (rc.canCompleteResourcePattern(myLoc.translate(-1,2))) rc.completeResourcePattern(myLoc.translate(-1,2));
                        break;
                    case 1:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-1,1))) rc.completeResourcePattern(myLoc.translate(-1,1));
                        break;
                    case 2:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-1,0))) rc.completeResourcePattern(myLoc.translate(-1,0));
                        break;
                    case 3:
                        if (rc.canCompleteResourcePattern(myLoc.translate(-1,-1))) rc.completeResourcePattern(myLoc.translate(-1,-1));
                        break;
                }
                break;
        }
        for (int i = 0; i < flagSize; ++i){
            MapLocation loc = flags[i];
            if (rc.canCompleteResourcePattern(loc)) rc.completeResourcePattern(loc);
        }
    }

}
