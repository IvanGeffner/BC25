package basic36;
import battlecode.common.*;
public class VisionManager {

    static RobotController rc;

    static void init(){
        rc = MyRobot.rc;
    }

    static MapLocation l14;
    static int v14;
    static Direction d14;
    static int p14;
    static MapInfo m14;

    static MapLocation l15;
    static int v15;
    static Direction d15;
    static int p15;
    static MapInfo m15;

    static MapLocation l16;
    static int v16;
    static Direction d16;
    static int p16;
    static MapInfo m16;

    static MapLocation l17;
    static int v17;
    static Direction d17;
    static int p17;
    static MapInfo m17;

    static MapLocation l18;
    static int v18;
    static Direction d18;
    static int p18;
    static MapInfo m18;

    static MapLocation l24;
    static int v24;
    static Direction d24;
    static int p24;
    static MapInfo m24;

    static MapLocation l25;
    static int v25;
    static Direction d25;
    static int p25;
    static MapInfo m25;

    static MapLocation l26;
    static int v26;
    static Direction d26;
    static int p26;
    static MapInfo m26;

    static MapLocation l27;
    static int v27;
    static Direction d27;
    static int p27;
    static MapInfo m27;

    static MapLocation l28;
    static int v28;
    static Direction d28;
    static int p28;
    static MapInfo m28;

    static MapLocation l29;
    static int v29;
    static Direction d29;
    static int p29;
    static MapInfo m29;

    static MapLocation l30;
    static int v30;
    static Direction d30;
    static int p30;
    static MapInfo m30;

    static MapLocation l34;
    static int v34;
    static Direction d34;
    static int p34;
    static MapInfo m34;

    static MapLocation l35;
    static int v35;
    static Direction d35;
    static int p35;
    static MapInfo m35;

    static MapLocation l36;
    static int v36;
    static Direction d36;
    static int p36;
    static MapInfo m36;

    static MapLocation l37;
    static int v37;
    static Direction d37;
    static int p37;
    static MapInfo m37;

    static MapLocation l38;
    static int v38;
    static Direction d38;
    static int p38;
    static MapInfo m38;

    static MapLocation l39;
    static int v39;
    static Direction d39;
    static int p39;
    static MapInfo m39;

    static MapLocation l40;
    static int v40;
    static Direction d40;
    static int p40;
    static MapInfo m40;

    static MapLocation l41;
    static int v41;
    static Direction d41;
    static int p41;
    static MapInfo m41;

    static MapLocation l42;
    static int v42;
    static Direction d42;
    static int p42;
    static MapInfo m42;

    static MapLocation l45;
    static int v45;
    static Direction d45;
    static int p45;
    static MapInfo m45;

    static MapLocation l46;
    static int v46;
    static Direction d46;
    static int p46;
    static MapInfo m46;

    static MapLocation l47;
    static int v47;
    static Direction d47;
    static int p47;
    static MapInfo m47;

    static MapLocation l48;
    static int v48;
    static Direction d48;
    static int p48;
    static MapInfo m48;

    static MapLocation l49;
    static int v49;
    static Direction d49;
    static int p49;
    static MapInfo m49;

    static MapLocation l50;
    static int v50;
    static Direction d50;
    static int p50;
    static MapInfo m50;

    static MapLocation l51;
    static int v51;
    static Direction d51;
    static int p51;
    static MapInfo m51;

    static MapLocation l52;
    static int v52;
    static Direction d52;
    static int p52;
    static MapInfo m52;

    static MapLocation l53;
    static int v53;
    static Direction d53;
    static int p53;
    static MapInfo m53;

    static MapLocation l56;
    static int v56;
    static Direction d56;
    static int p56;
    static MapInfo m56;

    static MapLocation l57;
    static int v57;
    static Direction d57;
    static int p57;
    static MapInfo m57;

    static MapLocation l58;
    static int v58;
    static Direction d58;
    static int p58;
    static MapInfo m58;

    static MapLocation l59;
    static int v59;
    static Direction d59;
    static int p59;
    static MapInfo m59;

    static MapLocation l60;
    static int v60;
    static Direction d60;
    static int p60;
    static MapInfo m60;

    static MapLocation l61;
    static int v61;
    static Direction d61;
    static int p61;
    static MapInfo m61;

    static MapLocation l62;
    static int v62;
    static Direction d62;
    static int p62;
    static MapInfo m62;

    static MapLocation l63;
    static int v63;
    static Direction d63;
    static int p63;
    static MapInfo m63;

    static MapLocation l64;
    static int v64;
    static Direction d64;
    static int p64;
    static MapInfo m64;

    static MapLocation l67;
    static int v67;
    static Direction d67;
    static int p67;
    static MapInfo m67;

    static MapLocation l68;
    static int v68;
    static Direction d68;
    static int p68;
    static MapInfo m68;

    static MapLocation l69;
    static int v69;
    static Direction d69;
    static int p69;
    static MapInfo m69;

    static MapLocation l70;
    static int v70;
    static Direction d70;
    static int p70;
    static MapInfo m70;

    static MapLocation l71;
    static int v71;
    static Direction d71;
    static int p71;
    static MapInfo m71;

    static MapLocation l72;
    static int v72;
    static Direction d72;
    static int p72;
    static MapInfo m72;

    static MapLocation l73;
    static int v73;
    static Direction d73;
    static int p73;
    static MapInfo m73;

    static MapLocation l74;
    static int v74;
    static Direction d74;
    static int p74;
    static MapInfo m74;

    static MapLocation l75;
    static int v75;
    static Direction d75;
    static int p75;
    static MapInfo m75;

    static MapLocation l78;
    static int v78;
    static Direction d78;
    static int p78;
    static MapInfo m78;

    static MapLocation l79;
    static int v79;
    static Direction d79;
    static int p79;
    static MapInfo m79;

    static MapLocation l80;
    static int v80;
    static Direction d80;
    static int p80;
    static MapInfo m80;

    static MapLocation l81;
    static int v81;
    static Direction d81;
    static int p81;
    static MapInfo m81;

    static MapLocation l82;
    static int v82;
    static Direction d82;
    static int p82;
    static MapInfo m82;

    static MapLocation l83;
    static int v83;
    static Direction d83;
    static int p83;
    static MapInfo m83;

    static MapLocation l84;
    static int v84;
    static Direction d84;
    static int p84;
    static MapInfo m84;

    static MapLocation l85;
    static int v85;
    static Direction d85;
    static int p85;
    static MapInfo m85;

    static MapLocation l86;
    static int v86;
    static Direction d86;
    static int p86;
    static MapInfo m86;

    static MapLocation l90;
    static int v90;
    static Direction d90;
    static int p90;
    static MapInfo m90;

    static MapLocation l91;
    static int v91;
    static Direction d91;
    static int p91;
    static MapInfo m91;

    static MapLocation l92;
    static int v92;
    static Direction d92;
    static int p92;
    static MapInfo m92;

    static MapLocation l93;
    static int v93;
    static Direction d93;
    static int p93;
    static MapInfo m93;

    static MapLocation l94;
    static int v94;
    static Direction d94;
    static int p94;
    static MapInfo m94;

    static MapLocation l95;
    static int v95;
    static Direction d95;
    static int p95;
    static MapInfo m95;

    static MapLocation l96;
    static int v96;
    static Direction d96;
    static int p96;
    static MapInfo m96;

    static MapLocation l102;
    static int v102;
    static Direction d102;
    static int p102;
    static MapInfo m102;

    static MapLocation l103;
    static int v103;
    static Direction d103;
    static int p103;
    static MapInfo m103;

    static MapLocation l104;
    static int v104;
    static Direction d104;
    static int p104;
    static MapInfo m104;

    static MapLocation l105;
    static int v105;
    static Direction d105;
    static int p105;
    static MapInfo m105;

    static MapLocation l106;
    static int v106;
    static Direction d106;
    static int p106;
    static MapInfo m106;


    static void makeAssignments() throws GameActionException {
        l60 = rc.getLocation();
        v60 = 0;
        l61 = l60.add(Direction.NORTH);
        v61 = 1000000;
        d61 = null;
        if (rc.onTheMap(l61)) m61 =  rc.senseMapInfo(l61);
        else m61 =  null;
        l50 = l61.add(Direction.WEST);
        v50 = 1000000;
        d50 = null;
        if (rc.onTheMap(l50)) m50 =  rc.senseMapInfo(l50);
        else m50 =  null;
        l49 = l50.add(Direction.SOUTH);
        v49 = 1000000;
        d49 = null;
        if (rc.onTheMap(l49)) m49 =  rc.senseMapInfo(l49);
        else m49 =  null;
        l48 = l49.add(Direction.SOUTH);
        v48 = 1000000;
        d48 = null;
        if (rc.onTheMap(l48)) m48 =  rc.senseMapInfo(l48);
        else m48 =  null;
        l59 = l48.add(Direction.EAST);
        v59 = 1000000;
        d59 = null;
        if (rc.onTheMap(l59)) m59 =  rc.senseMapInfo(l59);
        else m59 =  null;
        l70 = l59.add(Direction.EAST);
        v70 = 1000000;
        d70 = null;
        if (rc.onTheMap(l70)) m70 =  rc.senseMapInfo(l70);
        else m70 =  null;
        l71 = l70.add(Direction.NORTH);
        v71 = 1000000;
        d71 = null;
        if (rc.onTheMap(l71)) m71 =  rc.senseMapInfo(l71);
        else m71 =  null;
        l72 = l71.add(Direction.NORTH);
        v72 = 1000000;
        d72 = null;
        if (rc.onTheMap(l72)) m72 =  rc.senseMapInfo(l72);
        else m72 =  null;
        l73 = l72.add(Direction.NORTH);
        v73 = 1000000;
        d73 = null;
        if (rc.onTheMap(l73)) m73 =  rc.senseMapInfo(l73);
        else m73 =  null;
        l62 = l73.add(Direction.WEST);
        v62 = 1000000;
        d62 = null;
        if (rc.onTheMap(l62)) m62 =  rc.senseMapInfo(l62);
        else m62 =  null;
        l51 = l62.add(Direction.WEST);
        v51 = 1000000;
        d51 = null;
        if (rc.onTheMap(l51)) m51 =  rc.senseMapInfo(l51);
        else m51 =  null;
        l40 = l51.add(Direction.WEST);
        v40 = 1000000;
        d40 = null;
        if (rc.onTheMap(l40)) m40 =  rc.senseMapInfo(l40);
        else m40 =  null;
        l39 = l40.add(Direction.SOUTH);
        v39 = 1000000;
        d39 = null;
        if (rc.onTheMap(l39)) m39 =  rc.senseMapInfo(l39);
        else m39 =  null;
        l38 = l39.add(Direction.SOUTH);
        v38 = 1000000;
        d38 = null;
        if (rc.onTheMap(l38)) m38 =  rc.senseMapInfo(l38);
        else m38 =  null;
        l37 = l38.add(Direction.SOUTH);
        v37 = 1000000;
        d37 = null;
        if (rc.onTheMap(l37)) m37 =  rc.senseMapInfo(l37);
        else m37 =  null;
        l36 = l37.add(Direction.SOUTH);
        v36 = 1000000;
        d36 = null;
        if (rc.onTheMap(l36)) m36 =  rc.senseMapInfo(l36);
        else m36 =  null;
        l47 = l36.add(Direction.EAST);
        v47 = 1000000;
        d47 = null;
        if (rc.onTheMap(l47)) m47 =  rc.senseMapInfo(l47);
        else m47 =  null;
        l58 = l47.add(Direction.EAST);
        v58 = 1000000;
        d58 = null;
        if (rc.onTheMap(l58)) m58 =  rc.senseMapInfo(l58);
        else m58 =  null;
        l69 = l58.add(Direction.EAST);
        v69 = 1000000;
        d69 = null;
        if (rc.onTheMap(l69)) m69 =  rc.senseMapInfo(l69);
        else m69 =  null;
        l80 = l69.add(Direction.EAST);
        v80 = 1000000;
        d80 = null;
        if (rc.onTheMap(l80)) m80 =  rc.senseMapInfo(l80);
        else m80 =  null;
        l81 = l80.add(Direction.NORTH);
        v81 = 1000000;
        d81 = null;
        if (rc.onTheMap(l81)) m81 =  rc.senseMapInfo(l81);
        else m81 =  null;
        l82 = l81.add(Direction.NORTH);
        v82 = 1000000;
        d82 = null;
        if (rc.onTheMap(l82)) m82 =  rc.senseMapInfo(l82);
        else m82 =  null;
        l83 = l82.add(Direction.NORTH);
        v83 = 1000000;
        d83 = null;
        if (rc.onTheMap(l83)) m83 =  rc.senseMapInfo(l83);
        else m83 =  null;
        l84 = l83.add(Direction.NORTH);
        v84 = 1000000;
        d84 = null;
        if (rc.onTheMap(l84)) m84 =  rc.senseMapInfo(l84);
        else m84 =  null;
        l74 = l84.add(Direction.NORTHWEST);
        v74 = 1000000;
        d74 = null;
        if (rc.onTheMap(l74)) m74 =  rc.senseMapInfo(l74);
        else m74 =  null;
        l63 = l74.add(Direction.WEST);
        v63 = 1000000;
        d63 = null;
        if (rc.onTheMap(l63)) m63 =  rc.senseMapInfo(l63);
        else m63 =  null;
        l52 = l63.add(Direction.WEST);
        v52 = 1000000;
        d52 = null;
        if (rc.onTheMap(l52)) m52 =  rc.senseMapInfo(l52);
        else m52 =  null;
        l41 = l52.add(Direction.WEST);
        v41 = 1000000;
        d41 = null;
        if (rc.onTheMap(l41)) m41 =  rc.senseMapInfo(l41);
        else m41 =  null;
        l29 = l41.add(Direction.SOUTHWEST);
        v29 = 1000000;
        d29 = null;
        if (rc.onTheMap(l29)) m29 =  rc.senseMapInfo(l29);
        else m29 =  null;
        l28 = l29.add(Direction.SOUTH);
        v28 = 1000000;
        d28 = null;
        if (rc.onTheMap(l28)) m28 =  rc.senseMapInfo(l28);
        else m28 =  null;
        l27 = l28.add(Direction.SOUTH);
        v27 = 1000000;
        d27 = null;
        if (rc.onTheMap(l27)) m27 =  rc.senseMapInfo(l27);
        else m27 =  null;
        l26 = l27.add(Direction.SOUTH);
        v26 = 1000000;
        d26 = null;
        if (rc.onTheMap(l26)) m26 =  rc.senseMapInfo(l26);
        else m26 =  null;
        l25 = l26.add(Direction.SOUTH);
        v25 = 1000000;
        d25 = null;
        if (rc.onTheMap(l25)) m25 =  rc.senseMapInfo(l25);
        else m25 =  null;
        l35 = l25.add(Direction.SOUTHEAST);
        v35 = 1000000;
        d35 = null;
        if (rc.onTheMap(l35)) m35 =  rc.senseMapInfo(l35);
        else m35 =  null;
        l46 = l35.add(Direction.EAST);
        v46 = 1000000;
        d46 = null;
        if (rc.onTheMap(l46)) m46 =  rc.senseMapInfo(l46);
        else m46 =  null;
        l57 = l46.add(Direction.EAST);
        v57 = 1000000;
        d57 = null;
        if (rc.onTheMap(l57)) m57 =  rc.senseMapInfo(l57);
        else m57 =  null;
        l68 = l57.add(Direction.EAST);
        v68 = 1000000;
        d68 = null;
        if (rc.onTheMap(l68)) m68 =  rc.senseMapInfo(l68);
        else m68 =  null;
        l79 = l68.add(Direction.EAST);
        v79 = 1000000;
        d79 = null;
        if (rc.onTheMap(l79)) m79 =  rc.senseMapInfo(l79);
        else m79 =  null;
        l91 = l79.add(Direction.NORTHEAST);
        v91 = 1000000;
        d91 = null;
        if (rc.onTheMap(l91)) m91 =  rc.senseMapInfo(l91);
        else m91 =  null;
        l92 = l91.add(Direction.NORTH);
        v92 = 1000000;
        d92 = null;
        if (rc.onTheMap(l92)) m92 =  rc.senseMapInfo(l92);
        else m92 =  null;
        l93 = l92.add(Direction.NORTH);
        v93 = 1000000;
        d93 = null;
        if (rc.onTheMap(l93)) m93 =  rc.senseMapInfo(l93);
        else m93 =  null;
        l94 = l93.add(Direction.NORTH);
        v94 = 1000000;
        d94 = null;
        if (rc.onTheMap(l94)) m94 =  rc.senseMapInfo(l94);
        else m94 =  null;
        l95 = l94.add(Direction.NORTH);
        v95 = 1000000;
        d95 = null;
        if (rc.onTheMap(l95)) m95 =  rc.senseMapInfo(l95);
        else m95 =  null;
        l85 = l95.add(Direction.NORTHWEST);
        v85 = 1000000;
        d85 = null;
        if (rc.onTheMap(l85)) m85 =  rc.senseMapInfo(l85);
        else m85 =  null;
        l75 = l85.add(Direction.NORTHWEST);
        v75 = 1000000;
        d75 = null;
        if (rc.onTheMap(l75)) m75 =  rc.senseMapInfo(l75);
        else m75 =  null;
        l64 = l75.add(Direction.WEST);
        v64 = 1000000;
        d64 = null;
        if (rc.onTheMap(l64)) m64 =  rc.senseMapInfo(l64);
        else m64 =  null;
        l53 = l64.add(Direction.WEST);
        v53 = 1000000;
        d53 = null;
        if (rc.onTheMap(l53)) m53 =  rc.senseMapInfo(l53);
        else m53 =  null;
        l42 = l53.add(Direction.WEST);
        v42 = 1000000;
        d42 = null;
        if (rc.onTheMap(l42)) m42 =  rc.senseMapInfo(l42);
        else m42 =  null;
        l30 = l42.add(Direction.SOUTHWEST);
        v30 = 1000000;
        d30 = null;
        if (rc.onTheMap(l30)) m30 =  rc.senseMapInfo(l30);
        else m30 =  null;
        l18 = l30.add(Direction.SOUTHWEST);
        v18 = 1000000;
        d18 = null;
        if (rc.onTheMap(l18)) m18 =  rc.senseMapInfo(l18);
        else m18 =  null;
        l17 = l18.add(Direction.SOUTH);
        v17 = 1000000;
        d17 = null;
        if (rc.onTheMap(l17)) m17 =  rc.senseMapInfo(l17);
        else m17 =  null;
        l16 = l17.add(Direction.SOUTH);
        v16 = 1000000;
        d16 = null;
        if (rc.onTheMap(l16)) m16 =  rc.senseMapInfo(l16);
        else m16 =  null;
        l15 = l16.add(Direction.SOUTH);
        v15 = 1000000;
        d15 = null;
        if (rc.onTheMap(l15)) m15 =  rc.senseMapInfo(l15);
        else m15 =  null;
        l14 = l15.add(Direction.SOUTH);
        v14 = 1000000;
        d14 = null;
        if (rc.onTheMap(l14)) m14 =  rc.senseMapInfo(l14);
        else m14 =  null;
        l24 = l14.add(Direction.SOUTHEAST);
        v24 = 1000000;
        d24 = null;
        if (rc.onTheMap(l24)) m24 =  rc.senseMapInfo(l24);
        else m24 =  null;
        l34 = l24.add(Direction.SOUTHEAST);
        v34 = 1000000;
        d34 = null;
        if (rc.onTheMap(l34)) m34 =  rc.senseMapInfo(l34);
        else m34 =  null;
        l45 = l34.add(Direction.EAST);
        v45 = 1000000;
        d45 = null;
        if (rc.onTheMap(l45)) m45 =  rc.senseMapInfo(l45);
        else m45 =  null;
        l56 = l45.add(Direction.EAST);
        v56 = 1000000;
        d56 = null;
        if (rc.onTheMap(l56)) m56 =  rc.senseMapInfo(l56);
        else m56 =  null;
        l67 = l56.add(Direction.EAST);
        v67 = 1000000;
        d67 = null;
        if (rc.onTheMap(l67)) m67 =  rc.senseMapInfo(l67);
        else m67 =  null;
        l78 = l67.add(Direction.EAST);
        v78 = 1000000;
        d78 = null;
        if (rc.onTheMap(l78)) m78 =  rc.senseMapInfo(l78);
        else m78 =  null;
        l90 = l78.add(Direction.NORTHEAST);
        v90 = 1000000;
        d90 = null;
        if (rc.onTheMap(l90)) m90 =  rc.senseMapInfo(l90);
        else m90 =  null;
        l102 = l90.add(Direction.NORTHEAST);
        v102 = 1000000;
        d102 = null;
        if (rc.onTheMap(l102)) m102 =  rc.senseMapInfo(l102);
        else m102 =  null;
        l103 = l102.add(Direction.NORTH);
        v103 = 1000000;
        d103 = null;
        if (rc.onTheMap(l103)) m103 =  rc.senseMapInfo(l103);
        else m103 =  null;
        l104 = l103.add(Direction.NORTH);
        v104 = 1000000;
        d104 = null;
        if (rc.onTheMap(l104)) m104 =  rc.senseMapInfo(l104);
        else m104 =  null;
        l105 = l104.add(Direction.NORTH);
        v105 = 1000000;
        d105 = null;
        if (rc.onTheMap(l105)) m105 =  rc.senseMapInfo(l105);
        else m105 =  null;
        l106 = l105.add(Direction.NORTH);
        v106 = 1000000;
        d106 = null;
        if (rc.onTheMap(l106)) m106 =  rc.senseMapInfo(l106);
        else m106 =  null;
        l96 = l106.add(Direction.NORTHWEST);
        v96 = 1000000;
        d96 = null;
        if (rc.onTheMap(l96)) m96 =  rc.senseMapInfo(l96);
        else m96 =  null;
        l86 = l96.add(Direction.NORTHWEST);
        v86 = 1000000;
        d86 = null;
        if (rc.onTheMap(l86)) m86 =  rc.senseMapInfo(l86);
        else m86 =  null;
    }


    static void computeDistsUnit() throws GameActionException {
        if (MovementManager.canMove(Direction.WEST)){
            p49 = 10 + switch(m49.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p49 += 5*Util.getPaintLost(Direction.WEST);
            v49 = v60 + p49;
            d49 = Direction.WEST;
        }
        if (MovementManager.canMove(Direction.SOUTH)){
            p59 = 10 + switch(m59.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p59 += 5*Util.getPaintLost(Direction.SOUTH);
            if (v60 > v49) {
                v59 = v49 + p59;
                d59 = d49;
            }
            else {
                v59 = v60 + p59;
                d59 = Direction.SOUTH;
            }
        }
        if (MovementManager.canMove(Direction.NORTH)){
            p61 = 10 + switch(m61.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p61 += 5*Util.getPaintLost(Direction.NORTH);
            if (v60 > v49) {
                v61 = v49 + p61;
                d61 = d49;
            }
            else {
                v61 = v60 + p61;
                d61 = Direction.NORTH;
            }
        }
        if (MovementManager.canMove(Direction.EAST)){
            p71 = 10 + switch(m71.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p71 += 5*Util.getPaintLost(Direction.EAST);
            if (v60 > v61) {
                if (v61 > v59) {
                    v71 = v59 + p71;
                    d71 = d59;
                }
                else {
                    v71 = v61 + p71;
                    d71 = d61;
                }
            }
            else {
                if (v60 > v59) {
                    v71 = v59 + p71;
                    d71 = d59;
                }
                else {
                    v71 = v60 + p71;
                    d71 = Direction.EAST;
                }
            }
        }
        if (MovementManager.canMove(Direction.SOUTHWEST)){
            p48 = 10 + switch(m48.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p48 += 5*Util.getPaintLost(Direction.SOUTHWEST);
            if (v60 > v49) {
                if (v49 > v59) {
                    v48 = v59 + p48;
                    d48 = d59;
                }
                else {
                    v48 = v49 + p48;
                    d48 = d49;
                }
            }
            else {
                if (v60 > v59) {
                    v48 = v59 + p48;
                    d48 = d59;
                }
                else {
                    v48 = v60 + p48;
                    d48 = Direction.SOUTHWEST;
                }
            }
        }
        if (MovementManager.canMove(Direction.NORTHWEST)){
            p50 = 10 + switch(m50.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p50 += 5*Util.getPaintLost(Direction.NORTHWEST);
            if (v60 > v49) {
                if (v49 > v61) {
                    v50 = v61 + p50;
                    d50 = d61;
                }
                else {
                    v50 = v49 + p50;
                    d50 = d49;
                }
            }
            else {
                if (v60 > v61) {
                    v50 = v61 + p50;
                    d50 = d61;
                }
                else {
                    v50 = v60 + p50;
                    d50 = Direction.NORTHWEST;
                }
            }
        }
        if (MovementManager.canMove(Direction.SOUTHEAST)){
            p70 = 10 + switch(m70.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p70 += 5*Util.getPaintLost(Direction.SOUTHEAST);
            if (v60 > v71) {
                if (v71 > v59) {
                    v70 = v59 + p70;
                    d70 = d59;
                }
                else {
                    v70 = v71 + p70;
                    d70 = d71;
                }
            }
            else {
                if (v60 > v59) {
                    v70 = v59 + p70;
                    d70 = d59;
                }
                else {
                    v70 = v60 + p70;
                    d70 = Direction.SOUTHEAST;
                }
            }
        }
        if (MovementManager.canMove(Direction.NORTHEAST)){
            p72 = 10 + switch(m72.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p72 += 5*Util.getPaintLost(Direction.NORTHEAST);
            if (v60 > v61) {
                if (v61 > v71) {
                    v72 = v71 + p72;
                    d72 = d71;
                }
                else {
                    v72 = v61 + p72;
                    d72 = d61;
                }
            }
            else {
                if (v60 > v71) {
                    v72 = v71 + p72;
                    d72 = d71;
                }
                else {
                    v72 = v60 + p72;
                    d72 = Direction.NORTHEAST;
                }
            }
        }
        if (m38 != null && m38.isPassable()){
            p38 = 10 + switch(m38.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v48) {
                if (v48 > v50) {
                    v38 = v50 + p38;
                    d38 = d50;
                }
                else {
                    v38 = v48 + p38;
                    d38 = d48;
                }
            }
            else {
                if (v49 > v50) {
                    v38 = v50 + p38;
                    d38 = d50;
                }
                else {
                    v38 = v49 + p38;
                    d38 = d49;
                }
            }
        }
        if (m58 != null && m58.isPassable()){
            p58 = 10 + switch(m58.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v48) {
                if (v48 > v70) {
                    v58 = v70 + p58;
                    d58 = d70;
                }
                else {
                    v58 = v48 + p58;
                    d58 = d48;
                }
            }
            else {
                if (v59 > v70) {
                    v58 = v70 + p58;
                    d58 = d70;
                }
                else {
                    v58 = v59 + p58;
                    d58 = d59;
                }
            }
        }
        if (m62 != null && m62.isPassable()){
            p62 = 10 + switch(m62.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v50) {
                if (v50 > v72) {
                    v62 = v72 + p62;
                    d62 = d72;
                }
                else {
                    v62 = v50 + p62;
                    d62 = d50;
                }
            }
            else {
                if (v61 > v72) {
                    v62 = v72 + p62;
                    d62 = d72;
                }
                else {
                    v62 = v61 + p62;
                    d62 = d61;
                }
            }
        }
        if (m82 != null && m82.isPassable()){
            p82 = 10 + switch(m82.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v72) {
                if (v72 > v70) {
                    v82 = v70 + p82;
                    d82 = d70;
                }
                else {
                    v82 = v72 + p82;
                    d82 = d72;
                }
            }
            else {
                if (v71 > v70) {
                    v82 = v70 + p82;
                    d82 = d70;
                }
                else {
                    v82 = v71 + p82;
                    d82 = d71;
                }
            }
        }
        if (m37 != null && m37.isPassable()){
            p37 = 10 + switch(m37.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v48) {
                if (v48 > v38) {
                    v37 = v38 + p37;
                    d37 = d38;
                }
                else {
                    v37 = v48 + p37;
                    d37 = d48;
                }
            }
            else {
                if (v49 > v38) {
                    v37 = v38 + p37;
                    d37 = d38;
                }
                else {
                    v37 = v49 + p37;
                    d37 = d49;
                }
            }
        }
        if (m39 != null && m39.isPassable()){
            p39 = 10 + switch(m39.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v50) {
                if (v50 > v38) {
                    v39 = v38 + p39;
                    d39 = d38;
                }
                else {
                    v39 = v50 + p39;
                    d39 = d50;
                }
            }
            else {
                if (v49 > v38) {
                    v39 = v38 + p39;
                    d39 = d38;
                }
                else {
                    v39 = v49 + p39;
                    d39 = d49;
                }
            }
        }
        if (m47 != null && m47.isPassable()){
            p47 = 10 + switch(m47.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v48) {
                if (v48 > v58) {
                    if (v58 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v58 + p47;
                        d47 = d58;
                    }
                }
                else {
                    if (v48 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v48 + p47;
                        d47 = d48;
                    }
                }
            }
            else {
                if (v59 > v58) {
                    if (v58 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v58 + p47;
                        d47 = d58;
                    }
                }
                else {
                    if (v59 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v59 + p47;
                        d47 = d59;
                    }
                }
            }
        }
        if (m51 != null && m51.isPassable()){
            p51 = 10 + switch(m51.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v50) {
                if (v50 > v62) {
                    if (v62 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v62 + p51;
                        d51 = d62;
                    }
                }
                else {
                    if (v50 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v50 + p51;
                        d51 = d50;
                    }
                }
            }
            else {
                if (v61 > v62) {
                    if (v62 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v62 + p51;
                        d51 = d62;
                    }
                }
                else {
                    if (v61 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v61 + p51;
                        d51 = d61;
                    }
                }
            }
        }
        if (m69 != null && m69.isPassable()){
            p69 = 10 + switch(m69.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v70) {
                if (v70 > v58) {
                    v69 = v58 + p69;
                    d69 = d58;
                }
                else {
                    v69 = v70 + p69;
                    d69 = d70;
                }
            }
            else {
                if (v59 > v58) {
                    v69 = v58 + p69;
                    d69 = d58;
                }
                else {
                    v69 = v59 + p69;
                    d69 = d59;
                }
            }
        }
        if (m73 != null && m73.isPassable()){
            p73 = 10 + switch(m73.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v72) {
                if (v72 > v62) {
                    v73 = v62 + p73;
                    d73 = d62;
                }
                else {
                    v73 = v72 + p73;
                    d73 = d72;
                }
            }
            else {
                if (v61 > v62) {
                    v73 = v62 + p73;
                    d73 = d62;
                }
                else {
                    v73 = v61 + p73;
                    d73 = d61;
                }
            }
        }
        if (m81 != null && m81.isPassable()){
            p81 = 10 + switch(m81.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v70) {
                if (v70 > v82) {
                    if (v82 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v82 + p81;
                        d81 = d82;
                    }
                }
                else {
                    if (v70 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v70 + p81;
                        d81 = d70;
                    }
                }
            }
            else {
                if (v71 > v82) {
                    if (v82 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v82 + p81;
                        d81 = d82;
                    }
                }
                else {
                    if (v71 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v71 + p81;
                        d81 = d71;
                    }
                }
            }
        }
        if (m83 != null && m83.isPassable()){
            p83 = 10 + switch(m83.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v72) {
                if (v72 > v82) {
                    if (v82 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v82 + p83;
                        d83 = d82;
                    }
                }
                else {
                    if (v72 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v72 + p83;
                        d83 = d72;
                    }
                }
            }
            else {
                if (v71 > v82) {
                    if (v82 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v82 + p83;
                        d83 = d82;
                    }
                }
                else {
                    if (v71 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v71 + p83;
                        d83 = d71;
                    }
                }
            }
        }
        if (m36 != null && m36.isPassable()){
            p36 = 10 + switch(m36.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v48 > v37) {
                if (v37 > v47) {
                    v36 = v47 + p36;
                    d36 = d47;
                }
                else {
                    v36 = v37 + p36;
                    d36 = d37;
                }
            }
            else {
                if (v48 > v47) {
                    v36 = v47 + p36;
                    d36 = d47;
                }
                else {
                    v36 = v48 + p36;
                    d36 = d48;
                }
            }
        }
        if (m40 != null && m40.isPassable()){
            p40 = 10 + switch(m40.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v50 > v39) {
                if (v39 > v51) {
                    v40 = v51 + p40;
                    d40 = d51;
                }
                else {
                    v40 = v39 + p40;
                    d40 = d39;
                }
            }
            else {
                if (v50 > v51) {
                    v40 = v51 + p40;
                    d40 = d51;
                }
                else {
                    v40 = v50 + p40;
                    d40 = d50;
                }
            }
        }
        if (m80 != null && m80.isPassable()){
            p80 = 10 + switch(m80.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v70 > v81) {
                if (v81 > v69) {
                    v80 = v69 + p80;
                    d80 = d69;
                }
                else {
                    v80 = v81 + p80;
                    d80 = d81;
                }
            }
            else {
                if (v70 > v69) {
                    v80 = v69 + p80;
                    d80 = d69;
                }
                else {
                    v80 = v70 + p80;
                    d80 = d70;
                }
            }
        }
        if (m84 != null && m84.isPassable()){
            p84 = 10 + switch(m84.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v72 > v73) {
                if (v73 > v83) {
                    v84 = v83 + p84;
                    d84 = d83;
                }
                else {
                    v84 = v73 + p84;
                    d84 = d73;
                }
            }
            else {
                if (v72 > v83) {
                    v84 = v83 + p84;
                    d84 = d83;
                }
                else {
                    v84 = v72 + p84;
                    d84 = d72;
                }
            }
        }
        if (m27 != null && m27.isPassable()){
            p27 = 10 + switch(m27.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v37) {
                if (v37 > v39) {
                    v27 = v39 + p27;
                    d27 = d39;
                }
                else {
                    v27 = v37 + p27;
                    d27 = d37;
                }
            }
            else {
                if (v38 > v39) {
                    v27 = v39 + p27;
                    d27 = d39;
                }
                else {
                    v27 = v38 + p27;
                    d27 = d38;
                }
            }
        }
        if (m57 != null && m57.isPassable()){
            p57 = 10 + switch(m57.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v47) {
                if (v47 > v69) {
                    v57 = v69 + p57;
                    d57 = d69;
                }
                else {
                    v57 = v47 + p57;
                    d57 = d47;
                }
            }
            else {
                if (v58 > v69) {
                    v57 = v69 + p57;
                    d57 = d69;
                }
                else {
                    v57 = v58 + p57;
                    d57 = d58;
                }
            }
        }
        if (m63 != null && m63.isPassable()){
            p63 = 10 + switch(m63.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v51) {
                if (v51 > v73) {
                    v63 = v73 + p63;
                    d63 = d73;
                }
                else {
                    v63 = v51 + p63;
                    d63 = d51;
                }
            }
            else {
                if (v62 > v73) {
                    v63 = v73 + p63;
                    d63 = d73;
                }
                else {
                    v63 = v62 + p63;
                    d63 = d62;
                }
            }
        }
        if (m93 != null && m93.isPassable()){
            p93 = 10 + switch(m93.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v83) {
                if (v83 > v81) {
                    v93 = v81 + p93;
                    d93 = d81;
                }
                else {
                    v93 = v83 + p93;
                    d93 = d83;
                }
            }
            else {
                if (v82 > v81) {
                    v93 = v81 + p93;
                    d93 = d81;
                }
                else {
                    v93 = v82 + p93;
                    d93 = d82;
                }
            }
        }
        if (m26 != null && m26.isPassable()){
            p26 = 10 + switch(m26.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v37) {
                if (v37 > v36) {
                    if (v36 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v36 + p26;
                        d26 = d36;
                    }
                }
                else {
                    if (v37 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v37 + p26;
                        d26 = d37;
                    }
                }
            }
            else {
                if (v38 > v36) {
                    if (v36 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v36 + p26;
                        d26 = d36;
                    }
                }
                else {
                    if (v38 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v38 + p26;
                        d26 = d38;
                    }
                }
            }
        }
        if (m28 != null && m28.isPassable()){
            p28 = 10 + switch(m28.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v39) {
                if (v39 > v40) {
                    if (v40 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v40 + p28;
                        d28 = d40;
                    }
                }
                else {
                    if (v39 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v39 + p28;
                        d28 = d39;
                    }
                }
            }
            else {
                if (v38 > v40) {
                    if (v40 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v40 + p28;
                        d28 = d40;
                    }
                }
                else {
                    if (v38 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v38 + p28;
                        d28 = d38;
                    }
                }
            }
        }
        if (m46 != null && m46.isPassable()){
            p46 = 10 + switch(m46.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v47) {
                if (v47 > v36) {
                    if (v36 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v36 + p46;
                        d46 = d36;
                    }
                }
                else {
                    if (v47 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v47 + p46;
                        d46 = d47;
                    }
                }
            }
            else {
                if (v58 > v36) {
                    if (v36 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v36 + p46;
                        d46 = d36;
                    }
                }
                else {
                    if (v58 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v58 + p46;
                        d46 = d58;
                    }
                }
            }
        }
        if (m52 != null && m52.isPassable()){
            p52 = 10 + switch(m52.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v51) {
                if (v51 > v40) {
                    if (v40 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v40 + p52;
                        d52 = d40;
                    }
                }
                else {
                    if (v51 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v51 + p52;
                        d52 = d51;
                    }
                }
            }
            else {
                if (v62 > v40) {
                    if (v40 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v40 + p52;
                        d52 = d40;
                    }
                }
                else {
                    if (v62 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v62 + p52;
                        d52 = d62;
                    }
                }
            }
        }
        if (m68 != null && m68.isPassable()){
            p68 = 10 + switch(m68.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v69) {
                if (v69 > v80) {
                    if (v80 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v80 + p68;
                        d68 = d80;
                    }
                }
                else {
                    if (v69 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v69 + p68;
                        d68 = d69;
                    }
                }
            }
            else {
                if (v58 > v80) {
                    if (v80 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v80 + p68;
                        d68 = d80;
                    }
                }
                else {
                    if (v58 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v58 + p68;
                        d68 = d58;
                    }
                }
            }
        }
        if (m74 != null && m74.isPassable()){
            p74 = 10 + switch(m74.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v73) {
                if (v73 > v84) {
                    if (v84 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v84 + p74;
                        d74 = d84;
                    }
                }
                else {
                    if (v73 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v73 + p74;
                        d74 = d73;
                    }
                }
            }
            else {
                if (v62 > v84) {
                    if (v84 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v84 + p74;
                        d74 = d84;
                    }
                }
                else {
                    if (v62 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v62 + p74;
                        d74 = d62;
                    }
                }
            }
        }
        if (m92 != null && m92.isPassable()){
            p92 = 10 + switch(m92.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v81) {
                if (v81 > v80) {
                    if (v80 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v80 + p92;
                        d92 = d80;
                    }
                }
                else {
                    if (v81 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v81 + p92;
                        d92 = d81;
                    }
                }
            }
            else {
                if (v82 > v80) {
                    if (v80 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v80 + p92;
                        d92 = d80;
                    }
                }
                else {
                    if (v82 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v82 + p92;
                        d92 = d82;
                    }
                }
            }
        }
        if (m94 != null && m94.isPassable()){
            p94 = 10 + switch(m94.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v83) {
                if (v83 > v84) {
                    if (v84 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v84 + p94;
                        d94 = d84;
                    }
                }
                else {
                    if (v83 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v83 + p94;
                        d94 = d83;
                    }
                }
            }
            else {
                if (v82 > v84) {
                    if (v84 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v84 + p94;
                        d94 = d84;
                    }
                }
                else {
                    if (v82 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v82 + p94;
                        d94 = d82;
                    }
                }
            }
        }
        if (m25 != null && m25.isPassable()){
            p25 = 10 + switch(m25.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v37 > v36) {
                if (v36 > v26) {
                    v25 = v26 + p25;
                    d25 = d26;
                }
                else {
                    v25 = v36 + p25;
                    d25 = d36;
                }
            }
            else {
                if (v37 > v26) {
                    v25 = v26 + p25;
                    d25 = d26;
                }
                else {
                    v25 = v37 + p25;
                    d25 = d37;
                }
            }
        }
        if (m29 != null && m29.isPassable()){
            p29 = 10 + switch(m29.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v39 > v40) {
                if (v40 > v28) {
                    v29 = v28 + p29;
                    d29 = d28;
                }
                else {
                    v29 = v40 + p29;
                    d29 = d40;
                }
            }
            else {
                if (v39 > v28) {
                    v29 = v28 + p29;
                    d29 = d28;
                }
                else {
                    v29 = v39 + p29;
                    d29 = d39;
                }
            }
        }
        if (m35 != null && m35.isPassable()){
            p35 = 10 + switch(m35.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v47 > v36) {
                if (v36 > v46) {
                    if (v46 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v46 + p35;
                        d35 = d46;
                    }
                }
                else {
                    if (v36 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v36 + p35;
                        d35 = d36;
                    }
                }
            }
            else {
                if (v47 > v46) {
                    if (v46 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v46 + p35;
                        d35 = d46;
                    }
                }
                else {
                    if (v47 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v47 + p35;
                        d35 = d47;
                    }
                }
            }
        }
        if (m41 != null && m41.isPassable()){
            p41 = 10 + switch(m41.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v51 > v40) {
                if (v40 > v52) {
                    if (v52 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v52 + p41;
                        d41 = d52;
                    }
                }
                else {
                    if (v40 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v40 + p41;
                        d41 = d40;
                    }
                }
            }
            else {
                if (v51 > v52) {
                    if (v52 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v52 + p41;
                        d41 = d52;
                    }
                }
                else {
                    if (v51 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v51 + p41;
                        d41 = d51;
                    }
                }
            }
        }
        if (m79 != null && m79.isPassable()){
            p79 = 10 + switch(m79.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v69 > v80) {
                if (v80 > v68) {
                    v79 = v68 + p79;
                    d79 = d68;
                }
                else {
                    v79 = v80 + p79;
                    d79 = d80;
                }
            }
            else {
                if (v69 > v68) {
                    v79 = v68 + p79;
                    d79 = d68;
                }
                else {
                    v79 = v69 + p79;
                    d79 = d69;
                }
            }
        }
        if (m85 != null && m85.isPassable()){
            p85 = 10 + switch(m85.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v73 > v84) {
                if (v84 > v74) {
                    v85 = v74 + p85;
                    d85 = d74;
                }
                else {
                    v85 = v84 + p85;
                    d85 = d84;
                }
            }
            else {
                if (v73 > v74) {
                    v85 = v74 + p85;
                    d85 = d74;
                }
                else {
                    v85 = v73 + p85;
                    d85 = d73;
                }
            }
        }
        if (m91 != null && m91.isPassable()){
            p91 = 10 + switch(m91.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v81 > v80) {
                if (v80 > v92) {
                    if (v92 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v92 + p91;
                        d91 = d92;
                    }
                }
                else {
                    if (v80 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v80 + p91;
                        d91 = d80;
                    }
                }
            }
            else {
                if (v81 > v92) {
                    if (v92 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v92 + p91;
                        d91 = d92;
                    }
                }
                else {
                    if (v81 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v81 + p91;
                        d91 = d81;
                    }
                }
            }
        }
        if (m95 != null && m95.isPassable()){
            p95 = 10 + switch(m95.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v83 > v84) {
                if (v84 > v94) {
                    if (v94 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v94 + p95;
                        d95 = d94;
                    }
                }
                else {
                    if (v84 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v84 + p95;
                        d95 = d84;
                    }
                }
            }
            else {
                if (v83 > v94) {
                    if (v94 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v94 + p95;
                        d95 = d94;
                    }
                }
                else {
                    if (v83 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v83 + p95;
                        d95 = d83;
                    }
                }
            }
        }
        if (m16 != null && m16.isPassable()){
            p16 = 10 + switch(m16.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v26) {
                if (v26 > v28) {
                    v16 = v28 + p16;
                    d16 = d28;
                }
                else {
                    v16 = v26 + p16;
                    d16 = d26;
                }
            }
            else {
                if (v27 > v28) {
                    v16 = v28 + p16;
                    d16 = d28;
                }
                else {
                    v16 = v27 + p16;
                    d16 = d27;
                }
            }
        }
        if (m56 != null && m56.isPassable()){
            p56 = 10 + switch(m56.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v46) {
                if (v46 > v68) {
                    v56 = v68 + p56;
                    d56 = d68;
                }
                else {
                    v56 = v46 + p56;
                    d56 = d46;
                }
            }
            else {
                if (v57 > v68) {
                    v56 = v68 + p56;
                    d56 = d68;
                }
                else {
                    v56 = v57 + p56;
                    d56 = d57;
                }
            }
        }
        if (m64 != null && m64.isPassable()){
            p64 = 10 + switch(m64.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v52) {
                if (v52 > v74) {
                    v64 = v74 + p64;
                    d64 = d74;
                }
                else {
                    v64 = v52 + p64;
                    d64 = d52;
                }
            }
            else {
                if (v63 > v74) {
                    v64 = v74 + p64;
                    d64 = d74;
                }
                else {
                    v64 = v63 + p64;
                    d64 = d63;
                }
            }
        }
        if (m104 != null && m104.isPassable()){
            p104 = 10 + switch(m104.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v94) {
                if (v94 > v92) {
                    v104 = v92 + p104;
                    d104 = d92;
                }
                else {
                    v104 = v94 + p104;
                    d104 = d94;
                }
            }
            else {
                if (v93 > v92) {
                    v104 = v92 + p104;
                    d104 = d92;
                }
                else {
                    v104 = v93 + p104;
                    d104 = d93;
                }
            }
        }
        if (m15 != null && m15.isPassable()){
            p15 = 10 + switch(m15.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v26) {
                if (v26 > v25) {
                    if (v25 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v25 + p15;
                        d15 = d25;
                    }
                }
                else {
                    if (v26 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v26 + p15;
                        d15 = d26;
                    }
                }
            }
            else {
                if (v27 > v25) {
                    if (v25 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v25 + p15;
                        d15 = d25;
                    }
                }
                else {
                    if (v27 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v27 + p15;
                        d15 = d27;
                    }
                }
            }
        }
        if (m17 != null && m17.isPassable()){
            p17 = 10 + switch(m17.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v28) {
                if (v28 > v29) {
                    if (v29 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v29 + p17;
                        d17 = d29;
                    }
                }
                else {
                    if (v28 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v28 + p17;
                        d17 = d28;
                    }
                }
            }
            else {
                if (v27 > v29) {
                    if (v29 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v29 + p17;
                        d17 = d29;
                    }
                }
                else {
                    if (v27 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v27 + p17;
                        d17 = d27;
                    }
                }
            }
        }
        if (m45 != null && m45.isPassable()){
            p45 = 10 + switch(m45.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v46) {
                if (v46 > v35) {
                    if (v35 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v35 + p45;
                        d45 = d35;
                    }
                }
                else {
                    if (v46 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v46 + p45;
                        d45 = d46;
                    }
                }
            }
            else {
                if (v57 > v35) {
                    if (v35 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v35 + p45;
                        d45 = d35;
                    }
                }
                else {
                    if (v57 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v57 + p45;
                        d45 = d57;
                    }
                }
            }
        }
        if (m53 != null && m53.isPassable()){
            p53 = 10 + switch(m53.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v52) {
                if (v52 > v41) {
                    if (v41 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v41 + p53;
                        d53 = d41;
                    }
                }
                else {
                    if (v52 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v52 + p53;
                        d53 = d52;
                    }
                }
            }
            else {
                if (v63 > v41) {
                    if (v41 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v41 + p53;
                        d53 = d41;
                    }
                }
                else {
                    if (v63 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v63 + p53;
                        d53 = d63;
                    }
                }
            }
        }
        if (m67 != null && m67.isPassable()){
            p67 = 10 + switch(m67.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v68) {
                if (v68 > v79) {
                    if (v79 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v79 + p67;
                        d67 = d79;
                    }
                }
                else {
                    if (v68 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v68 + p67;
                        d67 = d68;
                    }
                }
            }
            else {
                if (v57 > v79) {
                    if (v79 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v79 + p67;
                        d67 = d79;
                    }
                }
                else {
                    if (v57 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v57 + p67;
                        d67 = d57;
                    }
                }
            }
        }
        if (m75 != null && m75.isPassable()){
            p75 = 10 + switch(m75.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v74) {
                if (v74 > v85) {
                    if (v85 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v85 + p75;
                        d75 = d85;
                    }
                }
                else {
                    if (v74 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v74 + p75;
                        d75 = d74;
                    }
                }
            }
            else {
                if (v63 > v85) {
                    if (v85 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v85 + p75;
                        d75 = d85;
                    }
                }
                else {
                    if (v63 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v63 + p75;
                        d75 = d63;
                    }
                }
            }
        }
        if (m103 != null && m103.isPassable()){
            p103 = 10 + switch(m103.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v92) {
                if (v92 > v91) {
                    if (v91 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v91 + p103;
                        d103 = d91;
                    }
                }
                else {
                    if (v92 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v92 + p103;
                        d103 = d92;
                    }
                }
            }
            else {
                if (v93 > v91) {
                    if (v91 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v91 + p103;
                        d103 = d91;
                    }
                }
                else {
                    if (v93 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v93 + p103;
                        d103 = d93;
                    }
                }
            }
        }
        if (m105 != null && m105.isPassable()){
            p105 = 10 + switch(m105.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v94) {
                if (v94 > v95) {
                    if (v95 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v95 + p105;
                        d105 = d95;
                    }
                }
                else {
                    if (v94 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v94 + p105;
                        d105 = d94;
                    }
                }
            }
            else {
                if (v93 > v95) {
                    if (v95 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v95 + p105;
                        d105 = d95;
                    }
                }
                else {
                    if (v93 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v93 + p105;
                        d105 = d93;
                    }
                }
            }
        }
        if (m24 != null && m24.isPassable()){
            p24 = 10 + switch(m24.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v36 > v25) {
                if (v25 > v35) {
                    v24 = v35 + p24;
                    d24 = d35;
                }
                else {
                    v24 = v25 + p24;
                    d24 = d25;
                }
            }
            else {
                if (v36 > v35) {
                    v24 = v35 + p24;
                    d24 = d35;
                }
                else {
                    v24 = v36 + p24;
                    d24 = d36;
                }
            }
        }
        if (m30 != null && m30.isPassable()){
            p30 = 10 + switch(m30.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v40 > v29) {
                if (v29 > v41) {
                    v30 = v41 + p30;
                    d30 = d41;
                }
                else {
                    v30 = v29 + p30;
                    d30 = d29;
                }
            }
            else {
                if (v40 > v41) {
                    v30 = v41 + p30;
                    d30 = d41;
                }
                else {
                    v30 = v40 + p30;
                    d30 = d40;
                }
            }
        }
        if (m90 != null && m90.isPassable()){
            p90 = 10 + switch(m90.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v80 > v91) {
                if (v91 > v79) {
                    v90 = v79 + p90;
                    d90 = d79;
                }
                else {
                    v90 = v91 + p90;
                    d90 = d91;
                }
            }
            else {
                if (v80 > v79) {
                    v90 = v79 + p90;
                    d90 = d79;
                }
                else {
                    v90 = v80 + p90;
                    d90 = d80;
                }
            }
        }
        if (m96 != null && m96.isPassable()){
            p96 = 10 + switch(m96.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v84 > v85) {
                if (v85 > v95) {
                    v96 = v95 + p96;
                    d96 = d95;
                }
                else {
                    v96 = v85 + p96;
                    d96 = d85;
                }
            }
            else {
                if (v84 > v95) {
                    v96 = v95 + p96;
                    d96 = d95;
                }
                else {
                    v96 = v84 + p96;
                    d96 = d84;
                }
            }
        }
        if (m14 != null && m14.isPassable()){
            p14 = 10 + switch(m14.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v26 > v25) {
                if (v25 > v15) {
                    if (v15 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v15 + p14;
                        d14 = d15;
                    }
                }
                else {
                    if (v25 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v25 + p14;
                        d14 = d25;
                    }
                }
            }
            else {
                if (v26 > v15) {
                    if (v15 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v15 + p14;
                        d14 = d15;
                    }
                }
                else {
                    if (v26 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v26 + p14;
                        d14 = d26;
                    }
                }
            }
        }
        if (m18 != null && m18.isPassable()){
            p18 = 10 + switch(m18.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v28 > v29) {
                if (v29 > v17) {
                    if (v17 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v17 + p18;
                        d18 = d17;
                    }
                }
                else {
                    if (v29 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v29 + p18;
                        d18 = d29;
                    }
                }
            }
            else {
                if (v28 > v17) {
                    if (v17 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v17 + p18;
                        d18 = d17;
                    }
                }
                else {
                    if (v28 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v28 + p18;
                        d18 = d28;
                    }
                }
            }
        }
        if (m34 != null && m34.isPassable()){
            p34 = 10 + switch(m34.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v46 > v35) {
                if (v35 > v45) {
                    if (v45 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v45 + p34;
                        d34 = d45;
                    }
                }
                else {
                    if (v35 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v35 + p34;
                        d34 = d35;
                    }
                }
            }
            else {
                if (v46 > v45) {
                    if (v45 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v45 + p34;
                        d34 = d45;
                    }
                }
                else {
                    if (v46 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v46 + p34;
                        d34 = d46;
                    }
                }
            }
        }
        if (m42 != null && m42.isPassable()){
            p42 = 10 + switch(m42.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v52 > v41) {
                if (v41 > v53) {
                    if (v53 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v53 + p42;
                        d42 = d53;
                    }
                }
                else {
                    if (v41 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v41 + p42;
                        d42 = d41;
                    }
                }
            }
            else {
                if (v52 > v53) {
                    if (v53 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v53 + p42;
                        d42 = d53;
                    }
                }
                else {
                    if (v52 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v52 + p42;
                        d42 = d52;
                    }
                }
            }
        }
        if (m78 != null && m78.isPassable()){
            p78 = 10 + switch(m78.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v68 > v79) {
                if (v79 > v67) {
                    if (v67 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v67 + p78;
                        d78 = d67;
                    }
                }
                else {
                    if (v79 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v79 + p78;
                        d78 = d79;
                    }
                }
            }
            else {
                if (v68 > v67) {
                    if (v67 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v67 + p78;
                        d78 = d67;
                    }
                }
                else {
                    if (v68 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v68 + p78;
                        d78 = d68;
                    }
                }
            }
        }
        if (m86 != null && m86.isPassable()){
            p86 = 10 + switch(m86.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v74 > v85) {
                if (v85 > v75) {
                    if (v75 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v75 + p86;
                        d86 = d75;
                    }
                }
                else {
                    if (v85 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v85 + p86;
                        d86 = d85;
                    }
                }
            }
            else {
                if (v74 > v75) {
                    if (v75 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v75 + p86;
                        d86 = d75;
                    }
                }
                else {
                    if (v74 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v74 + p86;
                        d86 = d74;
                    }
                }
            }
        }
        if (m102 != null && m102.isPassable()){
            p102 = 10 + switch(m102.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v92 > v91) {
                if (v91 > v103) {
                    if (v103 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v103 + p102;
                        d102 = d103;
                    }
                }
                else {
                    if (v91 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v91 + p102;
                        d102 = d91;
                    }
                }
            }
            else {
                if (v92 > v103) {
                    if (v103 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v103 + p102;
                        d102 = d103;
                    }
                }
                else {
                    if (v92 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v92 + p102;
                        d102 = d92;
                    }
                }
            }
        }
        if (m106 != null && m106.isPassable()){
            p106 = 10 + switch(m106.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v94 > v95) {
                if (v95 > v105) {
                    if (v105 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v105 + p106;
                        d106 = d105;
                    }
                }
                else {
                    if (v95 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v95 + p106;
                        d106 = d95;
                    }
                }
            }
            else {
                if (v94 > v105) {
                    if (v105 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v105 + p106;
                        d106 = d105;
                    }
                }
                else {
                    if (v94 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v94 + p106;
                        d106 = d94;
                    }
                }
            }
        }
    }

    static void computeDistsTower() throws GameActionException {
        if (m49 != null && m49.isPassable()){
            p49 = 10 + switch(m49.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p49 += 5*Util.getPaintLost(Direction.WEST);
            v49 = v60 + p49;
            d49 = Direction.WEST;
        }
        if (m59 != null && m59.isPassable()){
            p59 = 10 + switch(m59.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p59 += 5*Util.getPaintLost(Direction.SOUTH);
            if (v60 > v49) {
                v59 = v49 + p59;
                d59 = d49;
            }
            else {
                v59 = v60 + p59;
                d59 = Direction.SOUTH;
            }
        }
        if (m61 != null && m61.isPassable()){
            p61 = 10 + switch(m61.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p61 += 5*Util.getPaintLost(Direction.NORTH);
            if (v60 > v49) {
                v61 = v49 + p61;
                d61 = d49;
            }
            else {
                v61 = v60 + p61;
                d61 = Direction.NORTH;
            }
        }
        if (m71 != null && m71.isPassable()){
            p71 = 10 + switch(m71.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p71 += 5*Util.getPaintLost(Direction.EAST);
            if (v60 > v61) {
                if (v61 > v59) {
                    v71 = v59 + p71;
                    d71 = d59;
                }
                else {
                    v71 = v61 + p71;
                    d71 = d61;
                }
            }
            else {
                if (v60 > v59) {
                    v71 = v59 + p71;
                    d71 = d59;
                }
                else {
                    v71 = v60 + p71;
                    d71 = Direction.EAST;
                }
            }
        }
        if (m48 != null && m48.isPassable()){
            p48 = 10 + switch(m48.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p48 += 5*Util.getPaintLost(Direction.SOUTHWEST);
            if (v60 > v49) {
                if (v49 > v59) {
                    v48 = v59 + p48;
                    d48 = d59;
                }
                else {
                    v48 = v49 + p48;
                    d48 = d49;
                }
            }
            else {
                if (v60 > v59) {
                    v48 = v59 + p48;
                    d48 = d59;
                }
                else {
                    v48 = v60 + p48;
                    d48 = Direction.SOUTHWEST;
                }
            }
        }
        if (m50 != null && m50.isPassable()){
            p50 = 10 + switch(m50.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p50 += 5*Util.getPaintLost(Direction.NORTHWEST);
            if (v60 > v49) {
                if (v49 > v61) {
                    v50 = v61 + p50;
                    d50 = d61;
                }
                else {
                    v50 = v49 + p50;
                    d50 = d49;
                }
            }
            else {
                if (v60 > v61) {
                    v50 = v61 + p50;
                    d50 = d61;
                }
                else {
                    v50 = v60 + p50;
                    d50 = Direction.NORTHWEST;
                }
            }
        }
        if (m70 != null && m70.isPassable()){
            p70 = 10 + switch(m70.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p70 += 5*Util.getPaintLost(Direction.SOUTHEAST);
            if (v60 > v71) {
                if (v71 > v59) {
                    v70 = v59 + p70;
                    d70 = d59;
                }
                else {
                    v70 = v71 + p70;
                    d70 = d71;
                }
            }
            else {
                if (v60 > v59) {
                    v70 = v59 + p70;
                    d70 = d59;
                }
                else {
                    v70 = v60 + p70;
                    d70 = Direction.SOUTHEAST;
                }
            }
        }
        if (m72 != null && m72.isPassable()){
            p72 = 10 + switch(m72.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            p72 += 5*Util.getPaintLost(Direction.NORTHEAST);
            if (v60 > v61) {
                if (v61 > v71) {
                    v72 = v71 + p72;
                    d72 = d71;
                }
                else {
                    v72 = v61 + p72;
                    d72 = d61;
                }
            }
            else {
                if (v60 > v71) {
                    v72 = v71 + p72;
                    d72 = d71;
                }
                else {
                    v72 = v60 + p72;
                    d72 = Direction.NORTHEAST;
                }
            }
        }
        if (m38 != null && m38.isPassable()){
            p38 = 10 + switch(m38.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v48) {
                if (v48 > v50) {
                    v38 = v50 + p38;
                    d38 = d50;
                }
                else {
                    v38 = v48 + p38;
                    d38 = d48;
                }
            }
            else {
                if (v49 > v50) {
                    v38 = v50 + p38;
                    d38 = d50;
                }
                else {
                    v38 = v49 + p38;
                    d38 = d49;
                }
            }
        }
        if (m58 != null && m58.isPassable()){
            p58 = 10 + switch(m58.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v48) {
                if (v48 > v70) {
                    v58 = v70 + p58;
                    d58 = d70;
                }
                else {
                    v58 = v48 + p58;
                    d58 = d48;
                }
            }
            else {
                if (v59 > v70) {
                    v58 = v70 + p58;
                    d58 = d70;
                }
                else {
                    v58 = v59 + p58;
                    d58 = d59;
                }
            }
        }
        if (m62 != null && m62.isPassable()){
            p62 = 10 + switch(m62.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v50) {
                if (v50 > v72) {
                    v62 = v72 + p62;
                    d62 = d72;
                }
                else {
                    v62 = v50 + p62;
                    d62 = d50;
                }
            }
            else {
                if (v61 > v72) {
                    v62 = v72 + p62;
                    d62 = d72;
                }
                else {
                    v62 = v61 + p62;
                    d62 = d61;
                }
            }
        }
        if (m82 != null && m82.isPassable()){
            p82 = 10 + switch(m82.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v72) {
                if (v72 > v70) {
                    v82 = v70 + p82;
                    d82 = d70;
                }
                else {
                    v82 = v72 + p82;
                    d82 = d72;
                }
            }
            else {
                if (v71 > v70) {
                    v82 = v70 + p82;
                    d82 = d70;
                }
                else {
                    v82 = v71 + p82;
                    d82 = d71;
                }
            }
        }
        if (m37 != null && m37.isPassable()){
            p37 = 10 + switch(m37.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v48) {
                if (v48 > v38) {
                    v37 = v38 + p37;
                    d37 = d38;
                }
                else {
                    v37 = v48 + p37;
                    d37 = d48;
                }
            }
            else {
                if (v49 > v38) {
                    v37 = v38 + p37;
                    d37 = d38;
                }
                else {
                    v37 = v49 + p37;
                    d37 = d49;
                }
            }
        }
        if (m39 != null && m39.isPassable()){
            p39 = 10 + switch(m39.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v49 > v50) {
                if (v50 > v38) {
                    v39 = v38 + p39;
                    d39 = d38;
                }
                else {
                    v39 = v50 + p39;
                    d39 = d50;
                }
            }
            else {
                if (v49 > v38) {
                    v39 = v38 + p39;
                    d39 = d38;
                }
                else {
                    v39 = v49 + p39;
                    d39 = d49;
                }
            }
        }
        if (m47 != null && m47.isPassable()){
            p47 = 10 + switch(m47.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v48) {
                if (v48 > v58) {
                    if (v58 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v58 + p47;
                        d47 = d58;
                    }
                }
                else {
                    if (v48 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v48 + p47;
                        d47 = d48;
                    }
                }
            }
            else {
                if (v59 > v58) {
                    if (v58 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v58 + p47;
                        d47 = d58;
                    }
                }
                else {
                    if (v59 > v37) {
                        v47 = v37 + p47;
                        d47 = d37;
                    }
                    else {
                        v47 = v59 + p47;
                        d47 = d59;
                    }
                }
            }
        }
        if (m51 != null && m51.isPassable()){
            p51 = 10 + switch(m51.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v50) {
                if (v50 > v62) {
                    if (v62 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v62 + p51;
                        d51 = d62;
                    }
                }
                else {
                    if (v50 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v50 + p51;
                        d51 = d50;
                    }
                }
            }
            else {
                if (v61 > v62) {
                    if (v62 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v62 + p51;
                        d51 = d62;
                    }
                }
                else {
                    if (v61 > v39) {
                        v51 = v39 + p51;
                        d51 = d39;
                    }
                    else {
                        v51 = v61 + p51;
                        d51 = d61;
                    }
                }
            }
        }
        if (m69 != null && m69.isPassable()){
            p69 = 10 + switch(m69.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v59 > v70) {
                if (v70 > v58) {
                    v69 = v58 + p69;
                    d69 = d58;
                }
                else {
                    v69 = v70 + p69;
                    d69 = d70;
                }
            }
            else {
                if (v59 > v58) {
                    v69 = v58 + p69;
                    d69 = d58;
                }
                else {
                    v69 = v59 + p69;
                    d69 = d59;
                }
            }
        }
        if (m73 != null && m73.isPassable()){
            p73 = 10 + switch(m73.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v61 > v72) {
                if (v72 > v62) {
                    v73 = v62 + p73;
                    d73 = d62;
                }
                else {
                    v73 = v72 + p73;
                    d73 = d72;
                }
            }
            else {
                if (v61 > v62) {
                    v73 = v62 + p73;
                    d73 = d62;
                }
                else {
                    v73 = v61 + p73;
                    d73 = d61;
                }
            }
        }
        if (m81 != null && m81.isPassable()){
            p81 = 10 + switch(m81.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v70) {
                if (v70 > v82) {
                    if (v82 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v82 + p81;
                        d81 = d82;
                    }
                }
                else {
                    if (v70 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v70 + p81;
                        d81 = d70;
                    }
                }
            }
            else {
                if (v71 > v82) {
                    if (v82 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v82 + p81;
                        d81 = d82;
                    }
                }
                else {
                    if (v71 > v69) {
                        v81 = v69 + p81;
                        d81 = d69;
                    }
                    else {
                        v81 = v71 + p81;
                        d81 = d71;
                    }
                }
            }
        }
        if (m83 != null && m83.isPassable()){
            p83 = 10 + switch(m83.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v71 > v72) {
                if (v72 > v82) {
                    if (v82 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v82 + p83;
                        d83 = d82;
                    }
                }
                else {
                    if (v72 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v72 + p83;
                        d83 = d72;
                    }
                }
            }
            else {
                if (v71 > v82) {
                    if (v82 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v82 + p83;
                        d83 = d82;
                    }
                }
                else {
                    if (v71 > v73) {
                        v83 = v73 + p83;
                        d83 = d73;
                    }
                    else {
                        v83 = v71 + p83;
                        d83 = d71;
                    }
                }
            }
        }
        if (m36 != null && m36.isPassable()){
            p36 = 10 + switch(m36.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v48 > v37) {
                if (v37 > v47) {
                    v36 = v47 + p36;
                    d36 = d47;
                }
                else {
                    v36 = v37 + p36;
                    d36 = d37;
                }
            }
            else {
                if (v48 > v47) {
                    v36 = v47 + p36;
                    d36 = d47;
                }
                else {
                    v36 = v48 + p36;
                    d36 = d48;
                }
            }
        }
        if (m40 != null && m40.isPassable()){
            p40 = 10 + switch(m40.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v50 > v39) {
                if (v39 > v51) {
                    v40 = v51 + p40;
                    d40 = d51;
                }
                else {
                    v40 = v39 + p40;
                    d40 = d39;
                }
            }
            else {
                if (v50 > v51) {
                    v40 = v51 + p40;
                    d40 = d51;
                }
                else {
                    v40 = v50 + p40;
                    d40 = d50;
                }
            }
        }
        if (m80 != null && m80.isPassable()){
            p80 = 10 + switch(m80.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v70 > v81) {
                if (v81 > v69) {
                    v80 = v69 + p80;
                    d80 = d69;
                }
                else {
                    v80 = v81 + p80;
                    d80 = d81;
                }
            }
            else {
                if (v70 > v69) {
                    v80 = v69 + p80;
                    d80 = d69;
                }
                else {
                    v80 = v70 + p80;
                    d80 = d70;
                }
            }
        }
        if (m84 != null && m84.isPassable()){
            p84 = 10 + switch(m84.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v72 > v73) {
                if (v73 > v83) {
                    v84 = v83 + p84;
                    d84 = d83;
                }
                else {
                    v84 = v73 + p84;
                    d84 = d73;
                }
            }
            else {
                if (v72 > v83) {
                    v84 = v83 + p84;
                    d84 = d83;
                }
                else {
                    v84 = v72 + p84;
                    d84 = d72;
                }
            }
        }
        if (m27 != null && m27.isPassable()){
            p27 = 10 + switch(m27.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v37) {
                if (v37 > v39) {
                    v27 = v39 + p27;
                    d27 = d39;
                }
                else {
                    v27 = v37 + p27;
                    d27 = d37;
                }
            }
            else {
                if (v38 > v39) {
                    v27 = v39 + p27;
                    d27 = d39;
                }
                else {
                    v27 = v38 + p27;
                    d27 = d38;
                }
            }
        }
        if (m57 != null && m57.isPassable()){
            p57 = 10 + switch(m57.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v47) {
                if (v47 > v69) {
                    v57 = v69 + p57;
                    d57 = d69;
                }
                else {
                    v57 = v47 + p57;
                    d57 = d47;
                }
            }
            else {
                if (v58 > v69) {
                    v57 = v69 + p57;
                    d57 = d69;
                }
                else {
                    v57 = v58 + p57;
                    d57 = d58;
                }
            }
        }
        if (m63 != null && m63.isPassable()){
            p63 = 10 + switch(m63.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v51) {
                if (v51 > v73) {
                    v63 = v73 + p63;
                    d63 = d73;
                }
                else {
                    v63 = v51 + p63;
                    d63 = d51;
                }
            }
            else {
                if (v62 > v73) {
                    v63 = v73 + p63;
                    d63 = d73;
                }
                else {
                    v63 = v62 + p63;
                    d63 = d62;
                }
            }
        }
        if (m93 != null && m93.isPassable()){
            p93 = 10 + switch(m93.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v83) {
                if (v83 > v81) {
                    v93 = v81 + p93;
                    d93 = d81;
                }
                else {
                    v93 = v83 + p93;
                    d93 = d83;
                }
            }
            else {
                if (v82 > v81) {
                    v93 = v81 + p93;
                    d93 = d81;
                }
                else {
                    v93 = v82 + p93;
                    d93 = d82;
                }
            }
        }
        if (m26 != null && m26.isPassable()){
            p26 = 10 + switch(m26.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v37) {
                if (v37 > v36) {
                    if (v36 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v36 + p26;
                        d26 = d36;
                    }
                }
                else {
                    if (v37 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v37 + p26;
                        d26 = d37;
                    }
                }
            }
            else {
                if (v38 > v36) {
                    if (v36 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v36 + p26;
                        d26 = d36;
                    }
                }
                else {
                    if (v38 > v27) {
                        v26 = v27 + p26;
                        d26 = d27;
                    }
                    else {
                        v26 = v38 + p26;
                        d26 = d38;
                    }
                }
            }
        }
        if (m28 != null && m28.isPassable()){
            p28 = 10 + switch(m28.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v38 > v39) {
                if (v39 > v40) {
                    if (v40 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v40 + p28;
                        d28 = d40;
                    }
                }
                else {
                    if (v39 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v39 + p28;
                        d28 = d39;
                    }
                }
            }
            else {
                if (v38 > v40) {
                    if (v40 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v40 + p28;
                        d28 = d40;
                    }
                }
                else {
                    if (v38 > v27) {
                        v28 = v27 + p28;
                        d28 = d27;
                    }
                    else {
                        v28 = v38 + p28;
                        d28 = d38;
                    }
                }
            }
        }
        if (m46 != null && m46.isPassable()){
            p46 = 10 + switch(m46.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v47) {
                if (v47 > v36) {
                    if (v36 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v36 + p46;
                        d46 = d36;
                    }
                }
                else {
                    if (v47 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v47 + p46;
                        d46 = d47;
                    }
                }
            }
            else {
                if (v58 > v36) {
                    if (v36 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v36 + p46;
                        d46 = d36;
                    }
                }
                else {
                    if (v58 > v57) {
                        v46 = v57 + p46;
                        d46 = d57;
                    }
                    else {
                        v46 = v58 + p46;
                        d46 = d58;
                    }
                }
            }
        }
        if (m52 != null && m52.isPassable()){
            p52 = 10 + switch(m52.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v51) {
                if (v51 > v40) {
                    if (v40 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v40 + p52;
                        d52 = d40;
                    }
                }
                else {
                    if (v51 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v51 + p52;
                        d52 = d51;
                    }
                }
            }
            else {
                if (v62 > v40) {
                    if (v40 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v40 + p52;
                        d52 = d40;
                    }
                }
                else {
                    if (v62 > v63) {
                        v52 = v63 + p52;
                        d52 = d63;
                    }
                    else {
                        v52 = v62 + p52;
                        d52 = d62;
                    }
                }
            }
        }
        if (m68 != null && m68.isPassable()){
            p68 = 10 + switch(m68.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v58 > v69) {
                if (v69 > v80) {
                    if (v80 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v80 + p68;
                        d68 = d80;
                    }
                }
                else {
                    if (v69 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v69 + p68;
                        d68 = d69;
                    }
                }
            }
            else {
                if (v58 > v80) {
                    if (v80 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v80 + p68;
                        d68 = d80;
                    }
                }
                else {
                    if (v58 > v57) {
                        v68 = v57 + p68;
                        d68 = d57;
                    }
                    else {
                        v68 = v58 + p68;
                        d68 = d58;
                    }
                }
            }
        }
        if (m74 != null && m74.isPassable()){
            p74 = 10 + switch(m74.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v62 > v73) {
                if (v73 > v84) {
                    if (v84 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v84 + p74;
                        d74 = d84;
                    }
                }
                else {
                    if (v73 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v73 + p74;
                        d74 = d73;
                    }
                }
            }
            else {
                if (v62 > v84) {
                    if (v84 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v84 + p74;
                        d74 = d84;
                    }
                }
                else {
                    if (v62 > v63) {
                        v74 = v63 + p74;
                        d74 = d63;
                    }
                    else {
                        v74 = v62 + p74;
                        d74 = d62;
                    }
                }
            }
        }
        if (m92 != null && m92.isPassable()){
            p92 = 10 + switch(m92.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v81) {
                if (v81 > v80) {
                    if (v80 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v80 + p92;
                        d92 = d80;
                    }
                }
                else {
                    if (v81 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v81 + p92;
                        d92 = d81;
                    }
                }
            }
            else {
                if (v82 > v80) {
                    if (v80 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v80 + p92;
                        d92 = d80;
                    }
                }
                else {
                    if (v82 > v93) {
                        v92 = v93 + p92;
                        d92 = d93;
                    }
                    else {
                        v92 = v82 + p92;
                        d92 = d82;
                    }
                }
            }
        }
        if (m94 != null && m94.isPassable()){
            p94 = 10 + switch(m94.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v82 > v83) {
                if (v83 > v84) {
                    if (v84 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v84 + p94;
                        d94 = d84;
                    }
                }
                else {
                    if (v83 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v83 + p94;
                        d94 = d83;
                    }
                }
            }
            else {
                if (v82 > v84) {
                    if (v84 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v84 + p94;
                        d94 = d84;
                    }
                }
                else {
                    if (v82 > v93) {
                        v94 = v93 + p94;
                        d94 = d93;
                    }
                    else {
                        v94 = v82 + p94;
                        d94 = d82;
                    }
                }
            }
        }
        if (m25 != null && m25.isPassable()){
            p25 = 10 + switch(m25.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v37 > v36) {
                if (v36 > v26) {
                    v25 = v26 + p25;
                    d25 = d26;
                }
                else {
                    v25 = v36 + p25;
                    d25 = d36;
                }
            }
            else {
                if (v37 > v26) {
                    v25 = v26 + p25;
                    d25 = d26;
                }
                else {
                    v25 = v37 + p25;
                    d25 = d37;
                }
            }
        }
        if (m29 != null && m29.isPassable()){
            p29 = 10 + switch(m29.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v39 > v40) {
                if (v40 > v28) {
                    v29 = v28 + p29;
                    d29 = d28;
                }
                else {
                    v29 = v40 + p29;
                    d29 = d40;
                }
            }
            else {
                if (v39 > v28) {
                    v29 = v28 + p29;
                    d29 = d28;
                }
                else {
                    v29 = v39 + p29;
                    d29 = d39;
                }
            }
        }
        if (m35 != null && m35.isPassable()){
            p35 = 10 + switch(m35.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v47 > v36) {
                if (v36 > v46) {
                    if (v46 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v46 + p35;
                        d35 = d46;
                    }
                }
                else {
                    if (v36 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v36 + p35;
                        d35 = d36;
                    }
                }
            }
            else {
                if (v47 > v46) {
                    if (v46 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v46 + p35;
                        d35 = d46;
                    }
                }
                else {
                    if (v47 > v25) {
                        v35 = v25 + p35;
                        d35 = d25;
                    }
                    else {
                        v35 = v47 + p35;
                        d35 = d47;
                    }
                }
            }
        }
        if (m41 != null && m41.isPassable()){
            p41 = 10 + switch(m41.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v51 > v40) {
                if (v40 > v52) {
                    if (v52 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v52 + p41;
                        d41 = d52;
                    }
                }
                else {
                    if (v40 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v40 + p41;
                        d41 = d40;
                    }
                }
            }
            else {
                if (v51 > v52) {
                    if (v52 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v52 + p41;
                        d41 = d52;
                    }
                }
                else {
                    if (v51 > v29) {
                        v41 = v29 + p41;
                        d41 = d29;
                    }
                    else {
                        v41 = v51 + p41;
                        d41 = d51;
                    }
                }
            }
        }
        if (m79 != null && m79.isPassable()){
            p79 = 10 + switch(m79.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v69 > v80) {
                if (v80 > v68) {
                    v79 = v68 + p79;
                    d79 = d68;
                }
                else {
                    v79 = v80 + p79;
                    d79 = d80;
                }
            }
            else {
                if (v69 > v68) {
                    v79 = v68 + p79;
                    d79 = d68;
                }
                else {
                    v79 = v69 + p79;
                    d79 = d69;
                }
            }
        }
        if (m85 != null && m85.isPassable()){
            p85 = 10 + switch(m85.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v73 > v84) {
                if (v84 > v74) {
                    v85 = v74 + p85;
                    d85 = d74;
                }
                else {
                    v85 = v84 + p85;
                    d85 = d84;
                }
            }
            else {
                if (v73 > v74) {
                    v85 = v74 + p85;
                    d85 = d74;
                }
                else {
                    v85 = v73 + p85;
                    d85 = d73;
                }
            }
        }
        if (m91 != null && m91.isPassable()){
            p91 = 10 + switch(m91.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v81 > v80) {
                if (v80 > v92) {
                    if (v92 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v92 + p91;
                        d91 = d92;
                    }
                }
                else {
                    if (v80 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v80 + p91;
                        d91 = d80;
                    }
                }
            }
            else {
                if (v81 > v92) {
                    if (v92 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v92 + p91;
                        d91 = d92;
                    }
                }
                else {
                    if (v81 > v79) {
                        v91 = v79 + p91;
                        d91 = d79;
                    }
                    else {
                        v91 = v81 + p91;
                        d91 = d81;
                    }
                }
            }
        }
        if (m95 != null && m95.isPassable()){
            p95 = 10 + switch(m95.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v83 > v84) {
                if (v84 > v94) {
                    if (v94 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v94 + p95;
                        d95 = d94;
                    }
                }
                else {
                    if (v84 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v84 + p95;
                        d95 = d84;
                    }
                }
            }
            else {
                if (v83 > v94) {
                    if (v94 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v94 + p95;
                        d95 = d94;
                    }
                }
                else {
                    if (v83 > v85) {
                        v95 = v85 + p95;
                        d95 = d85;
                    }
                    else {
                        v95 = v83 + p95;
                        d95 = d83;
                    }
                }
            }
        }
        if (m16 != null && m16.isPassable()){
            p16 = 10 + switch(m16.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v26) {
                if (v26 > v28) {
                    v16 = v28 + p16;
                    d16 = d28;
                }
                else {
                    v16 = v26 + p16;
                    d16 = d26;
                }
            }
            else {
                if (v27 > v28) {
                    v16 = v28 + p16;
                    d16 = d28;
                }
                else {
                    v16 = v27 + p16;
                    d16 = d27;
                }
            }
        }
        if (m56 != null && m56.isPassable()){
            p56 = 10 + switch(m56.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v46) {
                if (v46 > v68) {
                    v56 = v68 + p56;
                    d56 = d68;
                }
                else {
                    v56 = v46 + p56;
                    d56 = d46;
                }
            }
            else {
                if (v57 > v68) {
                    v56 = v68 + p56;
                    d56 = d68;
                }
                else {
                    v56 = v57 + p56;
                    d56 = d57;
                }
            }
        }
        if (m64 != null && m64.isPassable()){
            p64 = 10 + switch(m64.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v52) {
                if (v52 > v74) {
                    v64 = v74 + p64;
                    d64 = d74;
                }
                else {
                    v64 = v52 + p64;
                    d64 = d52;
                }
            }
            else {
                if (v63 > v74) {
                    v64 = v74 + p64;
                    d64 = d74;
                }
                else {
                    v64 = v63 + p64;
                    d64 = d63;
                }
            }
        }
        if (m104 != null && m104.isPassable()){
            p104 = 10 + switch(m104.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v94) {
                if (v94 > v92) {
                    v104 = v92 + p104;
                    d104 = d92;
                }
                else {
                    v104 = v94 + p104;
                    d104 = d94;
                }
            }
            else {
                if (v93 > v92) {
                    v104 = v92 + p104;
                    d104 = d92;
                }
                else {
                    v104 = v93 + p104;
                    d104 = d93;
                }
            }
        }
        if (m15 != null && m15.isPassable()){
            p15 = 10 + switch(m15.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v26) {
                if (v26 > v25) {
                    if (v25 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v25 + p15;
                        d15 = d25;
                    }
                }
                else {
                    if (v26 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v26 + p15;
                        d15 = d26;
                    }
                }
            }
            else {
                if (v27 > v25) {
                    if (v25 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v25 + p15;
                        d15 = d25;
                    }
                }
                else {
                    if (v27 > v16) {
                        v15 = v16 + p15;
                        d15 = d16;
                    }
                    else {
                        v15 = v27 + p15;
                        d15 = d27;
                    }
                }
            }
        }
        if (m17 != null && m17.isPassable()){
            p17 = 10 + switch(m17.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v27 > v28) {
                if (v28 > v29) {
                    if (v29 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v29 + p17;
                        d17 = d29;
                    }
                }
                else {
                    if (v28 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v28 + p17;
                        d17 = d28;
                    }
                }
            }
            else {
                if (v27 > v29) {
                    if (v29 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v29 + p17;
                        d17 = d29;
                    }
                }
                else {
                    if (v27 > v16) {
                        v17 = v16 + p17;
                        d17 = d16;
                    }
                    else {
                        v17 = v27 + p17;
                        d17 = d27;
                    }
                }
            }
        }
        if (m45 != null && m45.isPassable()){
            p45 = 10 + switch(m45.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v46) {
                if (v46 > v35) {
                    if (v35 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v35 + p45;
                        d45 = d35;
                    }
                }
                else {
                    if (v46 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v46 + p45;
                        d45 = d46;
                    }
                }
            }
            else {
                if (v57 > v35) {
                    if (v35 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v35 + p45;
                        d45 = d35;
                    }
                }
                else {
                    if (v57 > v56) {
                        v45 = v56 + p45;
                        d45 = d56;
                    }
                    else {
                        v45 = v57 + p45;
                        d45 = d57;
                    }
                }
            }
        }
        if (m53 != null && m53.isPassable()){
            p53 = 10 + switch(m53.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v52) {
                if (v52 > v41) {
                    if (v41 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v41 + p53;
                        d53 = d41;
                    }
                }
                else {
                    if (v52 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v52 + p53;
                        d53 = d52;
                    }
                }
            }
            else {
                if (v63 > v41) {
                    if (v41 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v41 + p53;
                        d53 = d41;
                    }
                }
                else {
                    if (v63 > v64) {
                        v53 = v64 + p53;
                        d53 = d64;
                    }
                    else {
                        v53 = v63 + p53;
                        d53 = d63;
                    }
                }
            }
        }
        if (m67 != null && m67.isPassable()){
            p67 = 10 + switch(m67.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v57 > v68) {
                if (v68 > v79) {
                    if (v79 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v79 + p67;
                        d67 = d79;
                    }
                }
                else {
                    if (v68 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v68 + p67;
                        d67 = d68;
                    }
                }
            }
            else {
                if (v57 > v79) {
                    if (v79 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v79 + p67;
                        d67 = d79;
                    }
                }
                else {
                    if (v57 > v56) {
                        v67 = v56 + p67;
                        d67 = d56;
                    }
                    else {
                        v67 = v57 + p67;
                        d67 = d57;
                    }
                }
            }
        }
        if (m75 != null && m75.isPassable()){
            p75 = 10 + switch(m75.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v63 > v74) {
                if (v74 > v85) {
                    if (v85 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v85 + p75;
                        d75 = d85;
                    }
                }
                else {
                    if (v74 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v74 + p75;
                        d75 = d74;
                    }
                }
            }
            else {
                if (v63 > v85) {
                    if (v85 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v85 + p75;
                        d75 = d85;
                    }
                }
                else {
                    if (v63 > v64) {
                        v75 = v64 + p75;
                        d75 = d64;
                    }
                    else {
                        v75 = v63 + p75;
                        d75 = d63;
                    }
                }
            }
        }
        if (m103 != null && m103.isPassable()){
            p103 = 10 + switch(m103.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v92) {
                if (v92 > v91) {
                    if (v91 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v91 + p103;
                        d103 = d91;
                    }
                }
                else {
                    if (v92 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v92 + p103;
                        d103 = d92;
                    }
                }
            }
            else {
                if (v93 > v91) {
                    if (v91 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v91 + p103;
                        d103 = d91;
                    }
                }
                else {
                    if (v93 > v104) {
                        v103 = v104 + p103;
                        d103 = d104;
                    }
                    else {
                        v103 = v93 + p103;
                        d103 = d93;
                    }
                }
            }
        }
        if (m105 != null && m105.isPassable()){
            p105 = 10 + switch(m105.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v93 > v94) {
                if (v94 > v95) {
                    if (v95 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v95 + p105;
                        d105 = d95;
                    }
                }
                else {
                    if (v94 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v94 + p105;
                        d105 = d94;
                    }
                }
            }
            else {
                if (v93 > v95) {
                    if (v95 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v95 + p105;
                        d105 = d95;
                    }
                }
                else {
                    if (v93 > v104) {
                        v105 = v104 + p105;
                        d105 = d104;
                    }
                    else {
                        v105 = v93 + p105;
                        d105 = d93;
                    }
                }
            }
        }
        if (m24 != null && m24.isPassable()){
            p24 = 10 + switch(m24.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v36 > v25) {
                if (v25 > v35) {
                    v24 = v35 + p24;
                    d24 = d35;
                }
                else {
                    v24 = v25 + p24;
                    d24 = d25;
                }
            }
            else {
                if (v36 > v35) {
                    v24 = v35 + p24;
                    d24 = d35;
                }
                else {
                    v24 = v36 + p24;
                    d24 = d36;
                }
            }
        }
        if (m30 != null && m30.isPassable()){
            p30 = 10 + switch(m30.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v40 > v29) {
                if (v29 > v41) {
                    v30 = v41 + p30;
                    d30 = d41;
                }
                else {
                    v30 = v29 + p30;
                    d30 = d29;
                }
            }
            else {
                if (v40 > v41) {
                    v30 = v41 + p30;
                    d30 = d41;
                }
                else {
                    v30 = v40 + p30;
                    d30 = d40;
                }
            }
        }
        if (m90 != null && m90.isPassable()){
            p90 = 10 + switch(m90.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v80 > v91) {
                if (v91 > v79) {
                    v90 = v79 + p90;
                    d90 = d79;
                }
                else {
                    v90 = v91 + p90;
                    d90 = d91;
                }
            }
            else {
                if (v80 > v79) {
                    v90 = v79 + p90;
                    d90 = d79;
                }
                else {
                    v90 = v80 + p90;
                    d90 = d80;
                }
            }
        }
        if (m96 != null && m96.isPassable()){
            p96 = 10 + switch(m96.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v84 > v85) {
                if (v85 > v95) {
                    v96 = v95 + p96;
                    d96 = d95;
                }
                else {
                    v96 = v85 + p96;
                    d96 = d85;
                }
            }
            else {
                if (v84 > v95) {
                    v96 = v95 + p96;
                    d96 = d95;
                }
                else {
                    v96 = v84 + p96;
                    d96 = d84;
                }
            }
        }
        if (m14 != null && m14.isPassable()){
            p14 = 10 + switch(m14.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v26 > v25) {
                if (v25 > v15) {
                    if (v15 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v15 + p14;
                        d14 = d15;
                    }
                }
                else {
                    if (v25 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v25 + p14;
                        d14 = d25;
                    }
                }
            }
            else {
                if (v26 > v15) {
                    if (v15 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v15 + p14;
                        d14 = d15;
                    }
                }
                else {
                    if (v26 > v24) {
                        v14 = v24 + p14;
                        d14 = d24;
                    }
                    else {
                        v14 = v26 + p14;
                        d14 = d26;
                    }
                }
            }
        }
        if (m18 != null && m18.isPassable()){
            p18 = 10 + switch(m18.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v28 > v29) {
                if (v29 > v17) {
                    if (v17 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v17 + p18;
                        d18 = d17;
                    }
                }
                else {
                    if (v29 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v29 + p18;
                        d18 = d29;
                    }
                }
            }
            else {
                if (v28 > v17) {
                    if (v17 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v17 + p18;
                        d18 = d17;
                    }
                }
                else {
                    if (v28 > v30) {
                        v18 = v30 + p18;
                        d18 = d30;
                    }
                    else {
                        v18 = v28 + p18;
                        d18 = d28;
                    }
                }
            }
        }
        if (m34 != null && m34.isPassable()){
            p34 = 10 + switch(m34.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v46 > v35) {
                if (v35 > v45) {
                    if (v45 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v45 + p34;
                        d34 = d45;
                    }
                }
                else {
                    if (v35 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v35 + p34;
                        d34 = d35;
                    }
                }
            }
            else {
                if (v46 > v45) {
                    if (v45 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v45 + p34;
                        d34 = d45;
                    }
                }
                else {
                    if (v46 > v24) {
                        v34 = v24 + p34;
                        d34 = d24;
                    }
                    else {
                        v34 = v46 + p34;
                        d34 = d46;
                    }
                }
            }
        }
        if (m42 != null && m42.isPassable()){
            p42 = 10 + switch(m42.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v52 > v41) {
                if (v41 > v53) {
                    if (v53 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v53 + p42;
                        d42 = d53;
                    }
                }
                else {
                    if (v41 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v41 + p42;
                        d42 = d41;
                    }
                }
            }
            else {
                if (v52 > v53) {
                    if (v53 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v53 + p42;
                        d42 = d53;
                    }
                }
                else {
                    if (v52 > v30) {
                        v42 = v30 + p42;
                        d42 = d30;
                    }
                    else {
                        v42 = v52 + p42;
                        d42 = d52;
                    }
                }
            }
        }
        if (m78 != null && m78.isPassable()){
            p78 = 10 + switch(m78.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v68 > v79) {
                if (v79 > v67) {
                    if (v67 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v67 + p78;
                        d78 = d67;
                    }
                }
                else {
                    if (v79 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v79 + p78;
                        d78 = d79;
                    }
                }
            }
            else {
                if (v68 > v67) {
                    if (v67 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v67 + p78;
                        d78 = d67;
                    }
                }
                else {
                    if (v68 > v90) {
                        v78 = v90 + p78;
                        d78 = d90;
                    }
                    else {
                        v78 = v68 + p78;
                        d78 = d68;
                    }
                }
            }
        }
        if (m86 != null && m86.isPassable()){
            p86 = 10 + switch(m86.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v74 > v85) {
                if (v85 > v75) {
                    if (v75 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v75 + p86;
                        d86 = d75;
                    }
                }
                else {
                    if (v85 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v85 + p86;
                        d86 = d85;
                    }
                }
            }
            else {
                if (v74 > v75) {
                    if (v75 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v75 + p86;
                        d86 = d75;
                    }
                }
                else {
                    if (v74 > v96) {
                        v86 = v96 + p86;
                        d86 = d96;
                    }
                    else {
                        v86 = v74 + p86;
                        d86 = d74;
                    }
                }
            }
        }
        if (m102 != null && m102.isPassable()){
            p102 = 10 + switch(m102.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v92 > v91) {
                if (v91 > v103) {
                    if (v103 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v103 + p102;
                        d102 = d103;
                    }
                }
                else {
                    if (v91 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v91 + p102;
                        d102 = d91;
                    }
                }
            }
            else {
                if (v92 > v103) {
                    if (v103 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v103 + p102;
                        d102 = d103;
                    }
                }
                else {
                    if (v92 > v90) {
                        v102 = v90 + p102;
                        d102 = d90;
                    }
                    else {
                        v102 = v92 + p102;
                        d102 = d92;
                    }
                }
            }
        }
        if (m106 != null && m106.isPassable()){
            p106 = 10 + switch(m106.getPaint()){
                case ENEMY_PRIMARY, ENEMY_SECONDARY -> 10;
                case EMPTY -> 5;
                default -> 0;
            };
            if (v94 > v95) {
                if (v95 > v105) {
                    if (v105 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v105 + p106;
                        d106 = d105;
                    }
                }
                else {
                    if (v95 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v95 + p106;
                        d106 = d95;
                    }
                }
            }
            else {
                if (v94 > v105) {
                    if (v105 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v105 + p106;
                        d106 = d105;
                    }
                }
                else {
                    if (v94 > v96) {
                        v106 = v96 + p106;
                        d106 = d96;
                    }
                    else {
                        v106 = v94 + p106;
                        d106 = d94;
                    }
                }
            }
        }
    }

    static Direction getBestDirection(MapLocation target){
        int dx = target.x - l60.x;
        int dy = target.y - l60.y;
        switch(dx){
            case -4:
                switch(dy){
                    case -2: return d14;
                    case -1: return d15;
                    case 0: return d16;
                    case 1: return d17;
                    case 2: return d18;
                }
                break;
            case -3:
                switch(dy){
                    case -3: return d24;
                    case -2: return d25;
                    case -1: return d26;
                    case 0: return d27;
                    case 1: return d28;
                    case 2: return d29;
                    case 3: return d30;
                }
                break;
            case -2:
                switch(dy){
                    case -4: return d34;
                    case -3: return d35;
                    case -2: return d36;
                    case -1: return d37;
                    case 0: return d38;
                    case 1: return d39;
                    case 2: return d40;
                    case 3: return d41;
                    case 4: return d42;
                }
                break;
            case -1:
                switch(dy){
                    case -4: return d45;
                    case -3: return d46;
                    case -2: return d47;
                    case -1: return d48;
                    case 0: return d49;
                    case 1: return d50;
                    case 2: return d51;
                    case 3: return d52;
                    case 4: return d53;
                }
                break;
            case 0:
                switch(dy){
                    case -4: return d56;
                    case -3: return d57;
                    case -2: return d58;
                    case -1: return d59;
                    case 0: return d60;
                    case 1: return d61;
                    case 2: return d62;
                    case 3: return d63;
                    case 4: return d64;
                }
                break;
            case 1:
                switch(dy){
                    case -4: return d67;
                    case -3: return d68;
                    case -2: return d69;
                    case -1: return d70;
                    case 0: return d71;
                    case 1: return d72;
                    case 2: return d73;
                    case 3: return d74;
                    case 4: return d75;
                }
                break;
            case 2:
                switch(dy){
                    case -4: return d78;
                    case -3: return d79;
                    case -2: return d80;
                    case -1: return d81;
                    case 0: return d82;
                    case 1: return d83;
                    case 2: return d84;
                    case 3: return d85;
                    case 4: return d86;
                }
                break;
            case 3:
                switch(dy){
                    case -3: return d90;
                    case -2: return d91;
                    case -1: return d92;
                    case 0: return d93;
                    case 1: return d94;
                    case 2: return d95;
                    case 3: return d96;
                }
                break;
            case 4:
                switch(dy){
                    case -2: return d102;
                    case -1: return d103;
                    case 0: return d104;
                    case 1: return d105;
                    case 2: return d106;
                }
                break;
        }

        Direction ans = null;
        double bestEstimation = 0;
        double initialDist = Math.sqrt(l60.distanceSquaredTo(target));

        double dist14 = (initialDist - Math.sqrt(l14.distanceSquaredTo(target)))/v14;
        if (dist14 > bestEstimation) {
            bestEstimation = dist14;
            ans = d14;
        }
        double dist15 = (initialDist - Math.sqrt(l15.distanceSquaredTo(target)))/v15;
        if (dist15 > bestEstimation) {
            bestEstimation = dist15;
            ans = d15;
        }
        double dist16 = (initialDist - Math.sqrt(l16.distanceSquaredTo(target)))/v16;
        if (dist16 > bestEstimation) {
            bestEstimation = dist16;
            ans = d16;
        }
        double dist17 = (initialDist - Math.sqrt(l17.distanceSquaredTo(target)))/v17;
        if (dist17 > bestEstimation) {
            bestEstimation = dist17;
            ans = d17;
        }
        double dist18 = (initialDist - Math.sqrt(l18.distanceSquaredTo(target)))/v18;
        if (dist18 > bestEstimation) {
            bestEstimation = dist18;
            ans = d18;
        }
        double dist24 = (initialDist - Math.sqrt(l24.distanceSquaredTo(target)))/v24;
        if (dist24 > bestEstimation) {
            bestEstimation = dist24;
            ans = d24;
        }
        double dist25 = (initialDist - Math.sqrt(l25.distanceSquaredTo(target)))/v25;
        if (dist25 > bestEstimation) {
            bestEstimation = dist25;
            ans = d25;
        }
        double dist29 = (initialDist - Math.sqrt(l29.distanceSquaredTo(target)))/v29;
        if (dist29 > bestEstimation) {
            bestEstimation = dist29;
            ans = d29;
        }
        double dist30 = (initialDist - Math.sqrt(l30.distanceSquaredTo(target)))/v30;
        if (dist30 > bestEstimation) {
            bestEstimation = dist30;
            ans = d30;
        }
        double dist34 = (initialDist - Math.sqrt(l34.distanceSquaredTo(target)))/v34;
        if (dist34 > bestEstimation) {
            bestEstimation = dist34;
            ans = d34;
        }
        double dist35 = (initialDist - Math.sqrt(l35.distanceSquaredTo(target)))/v35;
        if (dist35 > bestEstimation) {
            bestEstimation = dist35;
            ans = d35;
        }
        double dist41 = (initialDist - Math.sqrt(l41.distanceSquaredTo(target)))/v41;
        if (dist41 > bestEstimation) {
            bestEstimation = dist41;
            ans = d41;
        }
        double dist42 = (initialDist - Math.sqrt(l42.distanceSquaredTo(target)))/v42;
        if (dist42 > bestEstimation) {
            bestEstimation = dist42;
            ans = d42;
        }
        double dist45 = (initialDist - Math.sqrt(l45.distanceSquaredTo(target)))/v45;
        if (dist45 > bestEstimation) {
            bestEstimation = dist45;
            ans = d45;
        }
        double dist53 = (initialDist - Math.sqrt(l53.distanceSquaredTo(target)))/v53;
        if (dist53 > bestEstimation) {
            bestEstimation = dist53;
            ans = d53;
        }
        double dist56 = (initialDist - Math.sqrt(l56.distanceSquaredTo(target)))/v56;
        if (dist56 > bestEstimation) {
            bestEstimation = dist56;
            ans = d56;
        }
        double dist64 = (initialDist - Math.sqrt(l64.distanceSquaredTo(target)))/v64;
        if (dist64 > bestEstimation) {
            bestEstimation = dist64;
            ans = d64;
        }
        double dist67 = (initialDist - Math.sqrt(l67.distanceSquaredTo(target)))/v67;
        if (dist67 > bestEstimation) {
            bestEstimation = dist67;
            ans = d67;
        }
        double dist75 = (initialDist - Math.sqrt(l75.distanceSquaredTo(target)))/v75;
        if (dist75 > bestEstimation) {
            bestEstimation = dist75;
            ans = d75;
        }
        double dist78 = (initialDist - Math.sqrt(l78.distanceSquaredTo(target)))/v78;
        if (dist78 > bestEstimation) {
            bestEstimation = dist78;
            ans = d78;
        }
        double dist79 = (initialDist - Math.sqrt(l79.distanceSquaredTo(target)))/v79;
        if (dist79 > bestEstimation) {
            bestEstimation = dist79;
            ans = d79;
        }
        double dist85 = (initialDist - Math.sqrt(l85.distanceSquaredTo(target)))/v85;
        if (dist85 > bestEstimation) {
            bestEstimation = dist85;
            ans = d85;
        }
        double dist86 = (initialDist - Math.sqrt(l86.distanceSquaredTo(target)))/v86;
        if (dist86 > bestEstimation) {
            bestEstimation = dist86;
            ans = d86;
        }
        double dist90 = (initialDist - Math.sqrt(l90.distanceSquaredTo(target)))/v90;
        if (dist90 > bestEstimation) {
            bestEstimation = dist90;
            ans = d90;
        }
        double dist91 = (initialDist - Math.sqrt(l91.distanceSquaredTo(target)))/v91;
        if (dist91 > bestEstimation) {
            bestEstimation = dist91;
            ans = d91;
        }
        double dist95 = (initialDist - Math.sqrt(l95.distanceSquaredTo(target)))/v95;
        if (dist95 > bestEstimation) {
            bestEstimation = dist95;
            ans = d95;
        }
        double dist96 = (initialDist - Math.sqrt(l96.distanceSquaredTo(target)))/v96;
        if (dist96 > bestEstimation) {
            bestEstimation = dist96;
            ans = d96;
        }
        double dist102 = (initialDist - Math.sqrt(l102.distanceSquaredTo(target)))/v102;
        if (dist102 > bestEstimation) {
            bestEstimation = dist102;
            ans = d102;
        }
        double dist103 = (initialDist - Math.sqrt(l103.distanceSquaredTo(target)))/v103;
        if (dist103 > bestEstimation) {
            bestEstimation = dist103;
            ans = d103;
        }
        double dist104 = (initialDist - Math.sqrt(l104.distanceSquaredTo(target)))/v104;
        if (dist104 > bestEstimation) {
            bestEstimation = dist104;
            ans = d104;
        }
        double dist105 = (initialDist - Math.sqrt(l105.distanceSquaredTo(target)))/v105;
        if (dist105 > bestEstimation) {
            bestEstimation = dist105;
            ans = d105;
        }
        double dist106 = (initialDist - Math.sqrt(l106.distanceSquaredTo(target)))/v106;
        if (dist106 > bestEstimation) {
            bestEstimation = dist106;
            ans = d106;
        }
        return ans;
    }

    static int computeDistance(MapLocation target){
        int dx = target.x - rc.getLocation().x;
        int dy = target.y - rc.getLocation().y;
        switch(dx){
            case -4:
                switch(dy){
                    case -2: return v14;
                    case -1: return v15;
                    case 0: return v16;
                    case 1: return v17;
                    case 2: return v18;
                }
                break;
            case -3:
                switch(dy){
                    case -3: return v24;
                    case -2: return v25;
                    case -1: return v26;
                    case 0: return v27;
                    case 1: return v28;
                    case 2: return v29;
                    case 3: return v30;
                }
                break;
            case -2:
                switch(dy){
                    case -4: return v34;
                    case -3: return v35;
                    case -2: return v36;
                    case -1: return v37;
                    case 0: return v38;
                    case 1: return v39;
                    case 2: return v40;
                    case 3: return v41;
                    case 4: return v42;
                }
                break;
            case -1:
                switch(dy){
                    case -4: return v45;
                    case -3: return v46;
                    case -2: return v47;
                    case -1: return v48;
                    case 0: return v49;
                    case 1: return v50;
                    case 2: return v51;
                    case 3: return v52;
                    case 4: return v53;
                }
                break;
            case 0:
                switch(dy){
                    case -4: return v56;
                    case -3: return v57;
                    case -2: return v58;
                    case -1: return v59;
                    case 0: return v60;
                    case 1: return v61;
                    case 2: return v62;
                    case 3: return v63;
                    case 4: return v64;
                }
                break;
            case 1:
                switch(dy){
                    case -4: return v67;
                    case -3: return v68;
                    case -2: return v69;
                    case -1: return v70;
                    case 0: return v71;
                    case 1: return v72;
                    case 2: return v73;
                    case 3: return v74;
                    case 4: return v75;
                }
                break;
            case 2:
                switch(dy){
                    case -4: return v78;
                    case -3: return v79;
                    case -2: return v80;
                    case -1: return v81;
                    case 0: return v82;
                    case 1: return v83;
                    case 2: return v84;
                    case 3: return v85;
                    case 4: return v86;
                }
                break;
            case 3:
                switch(dy){
                    case -3: return v90;
                    case -2: return v91;
                    case -1: return v92;
                    case 0: return v93;
                    case 1: return v94;
                    case 2: return v95;
                    case 3: return v96;
                }
                break;
            case 4:
                switch(dy){
                    case -2: return v102;
                    case -1: return v103;
                    case 0: return v104;
                    case 1: return v105;
                    case 2: return v106;
                }
                break;
        }
        return 1000000;
    }
    static boolean maxT;
    static MapLocation bestSRPSpot;
    static MapLocation myLoc;
    static MapLocation emptyLoc;
    static MapLocation bestCenter;
    static MapLocation bestSpot0;
    static MapLocation bestSpot1;
    static MapLocation bestSpot2;
    static MapLocation bestSpot3;
    static MapLocation bestSpot4;
    static MapLocation bestSpot5;
    static MapLocation bestSpot6;
    static MapLocation bestSpot7;
    static MapLocation bestSpot8;
    static MapLocation bestSpot9;
    static MapLocation bestSpot10;
    static MapLocation bestSpot11;
    static MapLocation bestSpot12;
    static MapLocation bestSpot13;
    static MapLocation bestSpot14;
    static MapLocation bestSpot15;


    static void scanRSPs () throws GameActionException {

        maxT = Util.towerMax();

        myLoc = rc.getLocation();
        emptyLoc = null;
        bestSRPSpot = null;
        bestCenter = null;

        int dx = myLoc.x%4, dy = myLoc.y%4;
        int dencode = dx*4 + dy;
        switch(dencode){
            case 0:
                scan0();
                break;
            case 1:
                scan1();
                break;
            case 2:
                scan2();
                break;
            case 3:
                scan3();
                break;
            case 4:
                scan4();
                break;
            case 5:
                scan5();
                break;
            case 6:
                scan6();
                break;
            case 7:
                scan7();
                break;
            case 8:
                scan8();
                break;
            case 9:
                scan9();
                break;
            case 10:
                scan10();
                break;
            case 11:
                scan11();
                break;
            case 12:
                scan12();
                break;
            case 13:
                scan13();
                break;
            case 14:
                scan14();
                break;
            case 15:
                scan15();
                break;
        }
    }


    static void scan0() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 2056;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 2056;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2056;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 2056;
                        bestSpot3 = l106;
                        bestSpot11 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 514;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 514;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 514;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 514;
                        bestSpot1 = l102;
                        bestSpot9 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 40;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l86;
                        bestSpot5 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 130;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l78;
                        bestSpot7 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 20;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l42;
                        bestSpot4 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 65;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l34;
                        bestSpot6 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 1028;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 1028;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1028;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 1028;
                        bestSpot2 = l18;
                        bestSpot10 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 257;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 257;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 257;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 257;
                        bestSpot0 = l14;
                        bestSpot8 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 2;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 4;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 1;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 2056;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 2056;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2056;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 2056;
                        bestSpot3 = l105;
                        bestSpot11 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 514;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 514;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 514;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 514;
                        bestSpot1 = l103;
                        bestSpot9 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 40;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l75;
                        bestSpot5 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 130;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l67;
                        bestSpot7 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 20;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l53;
                        bestSpot4 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 65;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l45;
                        bestSpot6 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 1028;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 1028;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1028;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 1028;
                        bestSpot2 = l17;
                        bestSpot10 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 257;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 257;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 257;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 257;
                        bestSpot0 = l15;
                        bestSpot8 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 2570;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 2570;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2570;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 2570;
                        bestSpot1 = l104;
                        bestSpot3 = l104;
                        bestSpot9 = l104;
                        bestSpot11 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 60;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 60;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 60;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 60;
                        bestSpot2 = l64;
                        bestSpot3 = l64;
                        bestSpot4 = l64;
                        bestSpot5 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 195;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 195;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 195;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 195;
                        bestSpot0 = l56;
                        bestSpot1 = l56;
                        bestSpot6 = l56;
                        bestSpot7 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 1285;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 1285;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1285;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 1285;
                        bestSpot0 = l16;
                        bestSpot2 = l16;
                        bestSpot8 = l16;
                        bestSpot10 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 2;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 2;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 1;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 1;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 8;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 1;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 10;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l93;
                        bestSpot3 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 12;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l63;
                        bestSpot3 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 3;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l57;
                        bestSpot1 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 5;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l27;
                        bestSpot2 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 8;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 8;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 4;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 4;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 10;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l82;
                        bestSpot3 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 12;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l62;
                        bestSpot3 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 3;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l58;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l38;
                        bestSpot2 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 8;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 4;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 10;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l71;
                        bestSpot3 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 12;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l61;
                        bestSpot3 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 5;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l49;
                        bestSpot2 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 15;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                        bestSpot2 = l60;
                        bestSpot3 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 22) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 20) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan1() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 130;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l106;
                        bestSpot7 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 520;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 520;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 520;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 520;
                        bestSpot3 = l102;
                        bestSpot9 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 4;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 65;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l18;
                        bestSpot6 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 260;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l14;
                        bestSpot8 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 34;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l96;
                        bestSpot5 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 17;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l30;
                        bestSpot4 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 130;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l105;
                        bestSpot7 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 650;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 650;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 650;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 650;
                        bestSpot1 = l103;
                        bestSpot3 = l103;
                        bestSpot7 = l103;
                        bestSpot9 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 8;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 4;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 65;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l17;
                        bestSpot6 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 325;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 325;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 325;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 325;
                        bestSpot0 = l15;
                        bestSpot2 = l15;
                        bestSpot6 = l15;
                        bestSpot8 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l104;
                        bestSpot7 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 48;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l64;
                        bestSpot5 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 12;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l56;
                        bestSpot3 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l16;
                        bestSpot6 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 2;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l85;
                        bestSpot5 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 17;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l41;
                        bestSpot4 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 1;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 10;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l92;
                        bestSpot3 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 34;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l74;
                        bestSpot5 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 8;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l52;
                        bestSpot4 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 4;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 1;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 5;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l26;
                        bestSpot2 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 51;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 51;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 51;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 51;
                        bestSpot0 = l63;
                        bestSpot1 = l63;
                        bestSpot4 = l63;
                        bestSpot5 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 12;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l57;
                        bestSpot3 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 2;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 4;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 10;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l81;
                        bestSpot3 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 8;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 4;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l37;
                        bestSpot2 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 3;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l62;
                        bestSpot1 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 12;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l58;
                        bestSpot3 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 10;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l70;
                        bestSpot3 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 5;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l48;
                        bestSpot2 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l61;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 15;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                        bestSpot2 = l59;
                        bestSpot3 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan2() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 2210;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 2210;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2210;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 2210;
                        bestSpot1 = l106;
                        bestSpot5 = l106;
                        bestSpot7 = l106;
                        bestSpot11 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 650;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 650;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 650;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 650;
                        bestSpot1 = l102;
                        bestSpot3 = l102;
                        bestSpot7 = l102;
                        bestSpot9 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 4;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 1105;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 1105;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1105;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 1105;
                        bestSpot0 = l18;
                        bestSpot4 = l18;
                        bestSpot6 = l18;
                        bestSpot10 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 325;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 325;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 325;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 325;
                        bestSpot0 = l14;
                        bestSpot2 = l14;
                        bestSpot6 = l14;
                        bestSpot8 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 130;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l105;
                        bestSpot7 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 130;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l103;
                        bestSpot7 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 8;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 4;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 65;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l17;
                        bestSpot6 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 65;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l15;
                        bestSpot6 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l104;
                        bestSpot7 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 48;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l64;
                        bestSpot5 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 12;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l56;
                        bestSpot3 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l16;
                        bestSpot6 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 34;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l95;
                        bestSpot5 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 10;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l91;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 32;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 16;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 17;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l29;
                        bestSpot4 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 5;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l25;
                        bestSpot2 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 32;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 8;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 16;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 4;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 1;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 48;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l63;
                        bestSpot5 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 12;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l57;
                        bestSpot3 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l84;
                        bestSpot5 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 10;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l80;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 17;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l40;
                        bestSpot4 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l36;
                        bestSpot2 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 34;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l73;
                        bestSpot5 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l69;
                        bestSpot3 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 17;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l51;
                        bestSpot4 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 5;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l47;
                        bestSpot2 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 51;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 51;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 51;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 51;
                        bestSpot0 = l62;
                        bestSpot1 = l62;
                        bestSpot4 = l62;
                        bestSpot5 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 15;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l58;
                        bestSpot1 = l58;
                        bestSpot2 = l58;
                        bestSpot3 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l61;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 22) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 20) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan3() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 520;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 520;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 520;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 520;
                        bestSpot3 = l106;
                        bestSpot9 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 130;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l102;
                        bestSpot7 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 32;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 4;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 260;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l18;
                        bestSpot8 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 65;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l14;
                        bestSpot6 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 34;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l90;
                        bestSpot5 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 4;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 17;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l24;
                        bestSpot4 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 650;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 650;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 650;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 650;
                        bestSpot1 = l105;
                        bestSpot3 = l105;
                        bestSpot7 = l105;
                        bestSpot9 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 130;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l103;
                        bestSpot7 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 32;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 4;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 325;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 325;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 325;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 325;
                        bestSpot0 = l17;
                        bestSpot2 = l17;
                        bestSpot6 = l17;
                        bestSpot8 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 65;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l15;
                        bestSpot6 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 130;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l104;
                        bestSpot7 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 12;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l64;
                        bestSpot3 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 48;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l56;
                        bestSpot5 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 65;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l16;
                        bestSpot6 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 2;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 34;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l79;
                        bestSpot5 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 17;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l35;
                        bestSpot4 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 1;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 10;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l94;
                        bestSpot3 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 34;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l68;
                        bestSpot5 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 17;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l46;
                        bestSpot4 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 5;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l28;
                        bestSpot2 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 1;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 12;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l63;
                        bestSpot3 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 51;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 51;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 51;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 51;
                        bestSpot0 = l57;
                        bestSpot1 = l57;
                        bestSpot4 = l57;
                        bestSpot5 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 1;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 10;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l83;
                        bestSpot3 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 8;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 4;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 5;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l39;
                        bestSpot2 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 12;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l62;
                        bestSpot3 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 3;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l58;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 10;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l72;
                        bestSpot3 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 2;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 5;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l50;
                        bestSpot2 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 2;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 15;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l61;
                        bestSpot1 = l61;
                        bestSpot2 = l61;
                        bestSpot3 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(6,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(6,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-6,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(2,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-2,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan4() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 16;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 130;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l86;
                        bestSpot7 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 65;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l78;
                        bestSpot6 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 520;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 520;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 520;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 520;
                        bestSpot3 = l42;
                        bestSpot9 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 260;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l34;
                        bestSpot8 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 8;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 34;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l96;
                        bestSpot5 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 17;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l90;
                        bestSpot4 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 8;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 16;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 130;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l75;
                        bestSpot7 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 65;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l67;
                        bestSpot6 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 650;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 650;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 650;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 650;
                        bestSpot1 = l53;
                        bestSpot3 = l53;
                        bestSpot7 = l53;
                        bestSpot9 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 325;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 325;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 325;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 325;
                        bestSpot0 = l45;
                        bestSpot2 = l45;
                        bestSpot6 = l45;
                        bestSpot8 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 8;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 48;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l104;
                        bestSpot5 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 130;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l64;
                        bestSpot7 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 65;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l56;
                        bestSpot6 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 12;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l16;
                        bestSpot3 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 34;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l95;
                        bestSpot5 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 17;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l91;
                        bestSpot4 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 2;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 1;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 8;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 4;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 8;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 34;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l94;
                        bestSpot5 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 17;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l92;
                        bestSpot4 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 1;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 10;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l52;
                        bestSpot3 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 5;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l46;
                        bestSpot2 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 8;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 51;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 51;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 51;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 51;
                        bestSpot0 = l93;
                        bestSpot1 = l93;
                        bestSpot4 = l93;
                        bestSpot5 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 1;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 12;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l27;
                        bestSpot3 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 2;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 1;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 8;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 4;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 10;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l51;
                        bestSpot3 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 5;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l47;
                        bestSpot2 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 8;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 4;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 3;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l82;
                        bestSpot1 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 12;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l38;
                        bestSpot3 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 10;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l50;
                        bestSpot3 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 5;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l48;
                        bestSpot2 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l71;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 2;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 15;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l49;
                        bestSpot1 = l49;
                        bestSpot2 = l49;
                        bestSpot3 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-3,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan5() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 16;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 64;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 32;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 2;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 128;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 128;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 128;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 128;
                        bestSpot7 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 8;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 4;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 8;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 305;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 305;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 305;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 305;
                        bestSpot0 = l96;
                        bestSpot4 = l96;
                        bestSpot5 = l96;
                        bestSpot8 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 66;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l90;
                        bestSpot6 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l30;
                        bestSpot7 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 8;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 16;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 80;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 80;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 80;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 80;
                        bestSpot4 = l103;
                        bestSpot6 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 32;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 2;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 160;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 160;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 160;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 160;
                        bestSpot5 = l53;
                        bestSpot7 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 10;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l45;
                        bestSpot3 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 4;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 12;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l15;
                        bestSpot3 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 16;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 32;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 17;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l95;
                        bestSpot4 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 66;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l91;
                        bestSpot6 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 33;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l85;
                        bestSpot5 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 2;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 132;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l41;
                        bestSpot7 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 8;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 8;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 17;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l94;
                        bestSpot4 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 83;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 83;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 83;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 83;
                        bestSpot0 = l92;
                        bestSpot1 = l92;
                        bestSpot4 = l92;
                        bestSpot6 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 33;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l74;
                        bestSpot5 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 165;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 165;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 165;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 165;
                        bestSpot0 = l52;
                        bestSpot2 = l52;
                        bestSpot5 = l52;
                        bestSpot7 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 10;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l46;
                        bestSpot3 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 12;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l26;
                        bestSpot3 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 17;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l93;
                        bestSpot4 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 33;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l63;
                        bestSpot5 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 1;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 2;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 4;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 8;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 1;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 3;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l81;
                        bestSpot1 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 1;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 5;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l51;
                        bestSpot2 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 10;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l47;
                        bestSpot3 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 4;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 12;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l37;
                        bestSpot3 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 4;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l70;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 5;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l50;
                        bestSpot2 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 15;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l48;
                        bestSpot1 = l48;
                        bestSpot2 = l48;
                        bestSpot3 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 5;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l49;
                        bestSpot2 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan6() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 288;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 288;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 288;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 288;
                        bestSpot5 = l106;
                        bestSpot8 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 160;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 160;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 160;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 160;
                        bestSpot5 = l102;
                        bestSpot7 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 4;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 64;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 66;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l18;
                        bestSpot6 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 18;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l14;
                        bestSpot4 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 264;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 264;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 264;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 264;
                        bestSpot3 = l96;
                        bestSpot8 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 132;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l90;
                        bestSpot7 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 64;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 16;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 32;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 4;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 72;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l53;
                        bestSpot6 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 20;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l45;
                        bestSpot4 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 2;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 32;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 8;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 4;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 297;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 297;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 297;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 297;
                        bestSpot0 = l95;
                        bestSpot3 = l95;
                        bestSpot5 = l95;
                        bestSpot8 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 165;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 165;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 165;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 165;
                        bestSpot0 = l91;
                        bestSpot2 = l91;
                        bestSpot5 = l91;
                        bestSpot7 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 4;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 64;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 16;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 66;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l29;
                        bestSpot6 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 18;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l25;
                        bestSpot4 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 33;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l94;
                        bestSpot5 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 33;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l92;
                        bestSpot5 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 4;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 72;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l52;
                        bestSpot6 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 20;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l46;
                        bestSpot4 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 2;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 33;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l93;
                        bestSpot5 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 8;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 4;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 9;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l84;
                        bestSpot3 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 5;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l80;
                        bestSpot2 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 66;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l40;
                        bestSpot6 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 18;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l36;
                        bestSpot4 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 1;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 9;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l73;
                        bestSpot3 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 5;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l69;
                        bestSpot2 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 75;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 75;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 75;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 75;
                        bestSpot0 = l51;
                        bestSpot1 = l51;
                        bestSpot3 = l51;
                        bestSpot6 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 23;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 23;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 23;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 23;
                        bestSpot0 = l47;
                        bestSpot1 = l47;
                        bestSpot2 = l47;
                        bestSpot4 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 2;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 9;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l62;
                        bestSpot3 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 5;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l58;
                        bestSpot2 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 2;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l50;
                        bestSpot1 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l48;
                        bestSpot1 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l49;
                        bestSpot1 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan7() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 128;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 128;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 128;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 128;
                        bestSpot7 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 32;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 4;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 16;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 8;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 64;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 8;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 2;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 132;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l96;
                        bestSpot7 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 305;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 305;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 305;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 305;
                        bestSpot0 = l90;
                        bestSpot4 = l90;
                        bestSpot5 = l90;
                        bestSpot8 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 8;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 66;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l24;
                        bestSpot6 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 160;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 160;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 160;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 160;
                        bestSpot5 = l105;
                        bestSpot7 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 32;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 4;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 16;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 12;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l53;
                        bestSpot3 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 80;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 80;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 80;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 80;
                        bestSpot4 = l45;
                        bestSpot6 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 10;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l17;
                        bestSpot3 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 32;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 4;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 132;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l95;
                        bestSpot7 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 33;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l91;
                        bestSpot5 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 4;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 17;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l79;
                        bestSpot4 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 8;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 66;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l35;
                        bestSpot6 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 8;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 2;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 165;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 165;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 165;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 165;
                        bestSpot0 = l94;
                        bestSpot2 = l94;
                        bestSpot5 = l94;
                        bestSpot7 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 33;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l92;
                        bestSpot5 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 4;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 17;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l68;
                        bestSpot4 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 12;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l52;
                        bestSpot3 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 83;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 83;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 83;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 83;
                        bestSpot0 = l46;
                        bestSpot1 = l46;
                        bestSpot4 = l46;
                        bestSpot6 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 10;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l28;
                        bestSpot3 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 33;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l93;
                        bestSpot5 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 4;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 17;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l57;
                        bestSpot4 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 1;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 8;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 5;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l83;
                        bestSpot2 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 1;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 4;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 12;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l51;
                        bestSpot3 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 3;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l47;
                        bestSpot1 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 10;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l39;
                        bestSpot3 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 1;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 4;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 2;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l72;
                        bestSpot2 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 15;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l50;
                        bestSpot1 = l50;
                        bestSpot2 = l50;
                        bestSpot3 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l48;
                        bestSpot1 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 5;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l61;
                        bestSpot2 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l49;
                        bestSpot1 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(5,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(5,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-3,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(1,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan8() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        bestSpot10 = null;
        bestSpot11 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 610;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 610;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 610;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 610;
                        bestSpot1 = l86;
                        bestSpot5 = l86;
                        bestSpot6 = l86;
                        bestSpot9 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 2185;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 2185;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2185;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 2185;
                        bestSpot0 = l78;
                        bestSpot3 = l78;
                        bestSpot7 = l78;
                        bestSpot11 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 338;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 338;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 338;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 338;
                        bestSpot1 = l42;
                        bestSpot4 = l42;
                        bestSpot6 = l42;
                        bestSpot8 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 1157;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 1157;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1157;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 1157;
                        bestSpot0 = l34;
                        bestSpot2 = l34;
                        bestSpot7 = l34;
                        bestSpot10 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 4;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 32;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 66;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l75;
                        bestSpot6 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 129;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 129;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 129;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 129;
                        bestSpot0 = l67;
                        bestSpot7 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 66;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l53;
                        bestSpot6 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 129;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 129;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 129;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 129;
                        bestSpot0 = l45;
                        bestSpot7 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 16;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 40;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l104;
                        bestSpot5 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 66;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l64;
                        bestSpot6 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 129;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 129;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 129;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 129;
                        bestSpot0 = l56;
                        bestSpot7 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 20;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l16;
                        bestSpot4 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 32;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l85;
                        bestSpot5 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 9;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l79;
                        bestSpot3 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 18;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l41;
                        bestSpot4 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 5;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l35;
                        bestSpot2 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 16;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 32;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 1;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 1;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 16;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 40;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l93;
                        bestSpot5 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 1;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 20;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l27;
                        bestSpot4 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l84;
                        bestSpot5 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 9;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l80;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 18;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l40;
                        bestSpot4 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l36;
                        bestSpot2 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 34;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l83;
                        bestSpot5 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 9;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l81;
                        bestSpot3 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 18;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l39;
                        bestSpot4 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l37;
                        bestSpot2 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 43;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 43;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 43;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 43;
                        bestSpot0 = l82;
                        bestSpot1 = l82;
                        bestSpot3 = l82;
                        bestSpot5 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 23;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 23;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 23;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 23;
                        bestSpot0 = l38;
                        bestSpot1 = l38;
                        bestSpot2 = l38;
                        bestSpot4 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 2;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 2;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l71;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 2;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l49;
                        bestSpot1 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2048) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2048) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 22) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot11;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1024) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1024) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 20) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot10;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan9() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 8;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 64;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 272;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 272;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 272;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 272;
                        bestSpot4 = l86;
                        bestSpot8 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 66;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l78;
                        bestSpot6 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 144;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 144;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 144;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 144;
                        bestSpot4 = l42;
                        bestSpot7 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 34;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l34;
                        bestSpot5 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 4;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 264;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 264;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 264;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 264;
                        bestSpot3 = l96;
                        bestSpot8 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 64;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l30;
                        bestSpot7 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 32;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 8;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 72;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l103;
                        bestSpot6 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 16;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 2;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 2;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 4;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 36;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 36;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 36;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 36;
                        bestSpot2 = l15;
                        bestSpot5 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 8;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 16;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 64;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 281;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 281;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 281;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 281;
                        bestSpot0 = l85;
                        bestSpot3 = l85;
                        bestSpot4 = l85;
                        bestSpot8 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 66;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l79;
                        bestSpot6 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 149;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 149;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 149;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 149;
                        bestSpot0 = l41;
                        bestSpot2 = l41;
                        bestSpot4 = l41;
                        bestSpot7 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 34;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l35;
                        bestSpot5 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 4;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 32;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 8;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 72;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l92;
                        bestSpot6 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 17;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l74;
                        bestSpot4 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 2;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l52;
                        bestSpot4 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 4;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 36;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 36;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 36;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 36;
                        bestSpot2 = l26;
                        bestSpot5 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 8;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 17;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l63;
                        bestSpot4 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 9;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l84;
                        bestSpot3 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 66;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l80;
                        bestSpot6 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 5;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l40;
                        bestSpot2 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 34;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l36;
                        bestSpot5 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 9;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l83;
                        bestSpot3 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 75;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 75;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 75;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 75;
                        bestSpot0 = l81;
                        bestSpot1 = l81;
                        bestSpot3 = l81;
                        bestSpot6 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 1;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 2;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 5;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l39;
                        bestSpot2 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 39;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 39;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 39;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 39;
                        bestSpot0 = l37;
                        bestSpot1 = l37;
                        bestSpot2 = l37;
                        bestSpot5 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 9;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l82;
                        bestSpot3 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l38;
                        bestSpot2 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l70;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l48;
                        bestSpot1 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan10() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 68;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 68;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 68;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 68;
                        bestSpot2 = l106;
                        bestSpot6 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 260;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l102;
                        bestSpot8 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 72;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l86;
                        bestSpot6 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 272;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 272;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 272;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 272;
                        bestSpot4 = l78;
                        bestSpot8 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 40;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l42;
                        bestSpot5 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 144;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 144;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 144;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 144;
                        bestSpot4 = l34;
                        bestSpot7 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 34;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l18;
                        bestSpot5 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 130;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l14;
                        bestSpot7 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 64;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 256;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 256;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 256;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 256;
                        bestSpot8 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 32;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 128;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 128;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 128;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 128;
                        bestSpot7 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 4;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 8;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 16;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 8;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 2;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 2;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 8;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 2;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 68;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 68;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 68;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 68;
                        bestSpot2 = l95;
                        bestSpot6 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 260;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l91;
                        bestSpot8 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 72;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 72;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 72;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 72;
                        bestSpot3 = l85;
                        bestSpot6 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 272;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 272;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 272;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 272;
                        bestSpot4 = l79;
                        bestSpot8 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 40;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l41;
                        bestSpot5 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 144;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 144;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 144;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 144;
                        bestSpot4 = l35;
                        bestSpot7 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 34;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l29;
                        bestSpot5 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 130;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l25;
                        bestSpot7 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 4;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 8;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 16;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 8;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 16;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 2;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 2;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 8;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 16;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 2;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 77;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 77;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 77;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 77;
                        bestSpot0 = l84;
                        bestSpot2 = l84;
                        bestSpot3 = l84;
                        bestSpot6 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 277;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 277;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 277;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 277;
                        bestSpot0 = l80;
                        bestSpot2 = l80;
                        bestSpot4 = l80;
                        bestSpot8 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 43;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 43;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 43;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 43;
                        bestSpot0 = l40;
                        bestSpot1 = l40;
                        bestSpot3 = l40;
                        bestSpot5 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 147;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 147;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 147;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 147;
                        bestSpot0 = l36;
                        bestSpot1 = l36;
                        bestSpot4 = l36;
                        bestSpot7 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 5;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l83;
                        bestSpot2 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 5;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l81;
                        bestSpot2 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 9;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l73;
                        bestSpot3 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 17;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l69;
                        bestSpot4 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 9;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l51;
                        bestSpot3 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 17;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l47;
                        bestSpot4 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 3;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l39;
                        bestSpot1 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 3;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l37;
                        bestSpot1 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 5;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l82;
                        bestSpot2 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 9;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l62;
                        bestSpot3 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 17;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l58;
                        bestSpot4 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 3;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l38;
                        bestSpot1 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 1;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan11() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 32;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 34;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l86;
                        bestSpot5 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 320;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 320;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 320;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 320;
                        bestSpot6 = l78;
                        bestSpot8 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 18;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l42;
                        bestSpot4 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 192;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 192;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 192;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 192;
                        bestSpot6 = l34;
                        bestSpot7 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 4;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 32;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 264;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 264;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 264;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 264;
                        bestSpot3 = l90;
                        bestSpot8 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 16;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 132;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l24;
                        bestSpot7 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 40;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l105;
                        bestSpot5 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 2;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 64;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 2;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 64;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 20;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l17;
                        bestSpot4 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 4;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 8;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 2;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 64;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 4;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 32;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 34;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l85;
                        bestSpot5 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 329;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 329;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 329;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 329;
                        bestSpot0 = l79;
                        bestSpot3 = l79;
                        bestSpot6 = l79;
                        bestSpot8 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 18;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l41;
                        bestSpot4 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 197;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 197;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 197;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 197;
                        bestSpot0 = l35;
                        bestSpot2 = l35;
                        bestSpot6 = l35;
                        bestSpot7 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 16;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 4;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 40;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l94;
                        bestSpot5 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 2;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 65;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l68;
                        bestSpot6 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 65;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l46;
                        bestSpot6 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 20;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l28;
                        bestSpot4 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 4;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 8;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 65;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l57;
                        bestSpot6 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 4;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 34;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l84;
                        bestSpot5 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 9;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l80;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 18;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l40;
                        bestSpot4 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 5;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l36;
                        bestSpot2 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 43;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 43;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 43;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 43;
                        bestSpot0 = l83;
                        bestSpot1 = l83;
                        bestSpot3 = l83;
                        bestSpot5 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 9;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l81;
                        bestSpot3 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 2;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 1;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 23;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 23;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 23;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 23;
                        bestSpot0 = l39;
                        bestSpot1 = l39;
                        bestSpot2 = l39;
                        bestSpot4 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 5;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l37;
                        bestSpot2 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 9;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l82;
                        bestSpot3 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 5;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l38;
                        bestSpot2 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 3;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l72;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 1;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l50;
                        bestSpot1 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 1;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l61;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(4,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(4,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-4,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(0,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan12() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        bestSpot9 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 4;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 260;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 260;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 260;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 260;
                        bestSpot2 = l86;
                        bestSpot8 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 520;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 520;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 520;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 520;
                        bestSpot3 = l78;
                        bestSpot9 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 65;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l42;
                        bestSpot6 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 130;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l34;
                        bestSpot7 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 16;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 4;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 17;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l30;
                        bestSpot4 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 34;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l24;
                        bestSpot5 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 8;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 325;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 325;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 325;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 325;
                        bestSpot0 = l75;
                        bestSpot2 = l75;
                        bestSpot6 = l75;
                        bestSpot8 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 650;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 650;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 650;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 650;
                        bestSpot1 = l67;
                        bestSpot3 = l67;
                        bestSpot7 = l67;
                        bestSpot9 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 65;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l53;
                        bestSpot6 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 130;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l45;
                        bestSpot7 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 16;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 32;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 12;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l104;
                        bestSpot3 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 65;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l64;
                        bestSpot6 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 130;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l56;
                        bestSpot7 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 48;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 48;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 48;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 48;
                        bestSpot4 = l16;
                        bestSpot5 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 4;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 4;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 1;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 2;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 17;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l29;
                        bestSpot4 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 34;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l25;
                        bestSpot5 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 8;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 5;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l74;
                        bestSpot2 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 10;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l68;
                        bestSpot3 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 1;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 17;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l28;
                        bestSpot4 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 34;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l26;
                        bestSpot5 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 12;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l93;
                        bestSpot3 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 1;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 51;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 51;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 51;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 51;
                        bestSpot0 = l27;
                        bestSpot1 = l27;
                        bestSpot4 = l27;
                        bestSpot5 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 4;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 8;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 5;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l73;
                        bestSpot2 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l69;
                        bestSpot3 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 2;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 12;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l82;
                        bestSpot3 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 3;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l38;
                        bestSpot1 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l72;
                        bestSpot2 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 10;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l70;
                        bestSpot3 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 2;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 15;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l71;
                        bestSpot1 = l71;
                        bestSpot2 = l71;
                        bestSpot3 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 2;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 3;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l49;
                        bestSpot1 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 3;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l60;
                        bestSpot1 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(3,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 512) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 512) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 18) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot9;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,6);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,2);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan13() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 4;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 8;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 64;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 8;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 16;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 2;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 32;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 128;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 128;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 128;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 128;
                        bestSpot7 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 68;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 68;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 68;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 68;
                        bestSpot2 = l96;
                        bestSpot6 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 8;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 305;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 305;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 305;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 305;
                        bestSpot0 = l30;
                        bestSpot4 = l30;
                        bestSpot5 = l30;
                        bestSpot8 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 130;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l24;
                        bestSpot7 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 4;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 12;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l103;
                        bestSpot3 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 80;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 80;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 80;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 80;
                        bestSpot4 = l75;
                        bestSpot6 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 10;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l67;
                        bestSpot3 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 16;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 2;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 32;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 160;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 160;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 160;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 160;
                        bestSpot5 = l15;
                        bestSpot7 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 16;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 2;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 32;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 4;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 8;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 68;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 68;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 68;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 68;
                        bestSpot2 = l85;
                        bestSpot6 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 8;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 17;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l41;
                        bestSpot4 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 2;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 33;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l29;
                        bestSpot5 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 130;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 130;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 130;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 130;
                        bestSpot1 = l25;
                        bestSpot7 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 4;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 12;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l92;
                        bestSpot3 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 85;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 85;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 85;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 85;
                        bestSpot0 = l74;
                        bestSpot2 = l74;
                        bestSpot4 = l74;
                        bestSpot6 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 10;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l68;
                        bestSpot3 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 17;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l52;
                        bestSpot4 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 2;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 33;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l28;
                        bestSpot5 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 163;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 163;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 163;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 163;
                        bestSpot0 = l26;
                        bestSpot1 = l26;
                        bestSpot5 = l26;
                        bestSpot7 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 17;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l63;
                        bestSpot4 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 2;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 33;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l27;
                        bestSpot5 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 4;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 8;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 1;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 2;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 4;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 12;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l81;
                        bestSpot3 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 5;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l73;
                        bestSpot2 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 10;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l69;
                        bestSpot3 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 1;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 2;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 3;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l37;
                        bestSpot1 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 4;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 1;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 2;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 5;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l72;
                        bestSpot2 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 15;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l70;
                        bestSpot1 = l70;
                        bestSpot2 = l70;
                        bestSpot3 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 3;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l48;
                        bestSpot1 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 5;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l71;
                        bestSpot2 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 3;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l59;
                        bestSpot1 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan14() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 18;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l106;
                        bestSpot4 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 34;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l102;
                        bestSpot5 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 16;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 32;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 4;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 8;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 192;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 192;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 192;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 192;
                        bestSpot6 = l18;
                        bestSpot7 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 320;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 320;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 320;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 320;
                        bestSpot6 = l14;
                        bestSpot8 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 16;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 32;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 132;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l30;
                        bestSpot7 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 264;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 264;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 264;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 264;
                        bestSpot3 = l24;
                        bestSpot8 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 2;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 2;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 20;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l75;
                        bestSpot4 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 40;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l67;
                        bestSpot5 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 4;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 8;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 64;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 64;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 2;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 4;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 8;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 64;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 18;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l95;
                        bestSpot4 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 34;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l91;
                        bestSpot5 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 16;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 32;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 4;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 8;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 197;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 197;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 197;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 197;
                        bestSpot0 = l29;
                        bestSpot2 = l29;
                        bestSpot6 = l29;
                        bestSpot7 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 329;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 329;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 329;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 329;
                        bestSpot0 = l25;
                        bestSpot3 = l25;
                        bestSpot6 = l25;
                        bestSpot8 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 2;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 2;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 20;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 20;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 20;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 20;
                        bestSpot2 = l74;
                        bestSpot4 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 40;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 40;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 40;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 40;
                        bestSpot3 = l68;
                        bestSpot5 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 4;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 8;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 65;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l28;
                        bestSpot6 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 65;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l26;
                        bestSpot6 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 2;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 4;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 8;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 65;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 65;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 65;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 65;
                        bestSpot0 = l27;
                        bestSpot6 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 18;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 18;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 18;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 18;
                        bestSpot1 = l84;
                        bestSpot4 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 34;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 34;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 34;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 34;
                        bestSpot1 = l80;
                        bestSpot5 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 5;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l40;
                        bestSpot2 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 9;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l36;
                        bestSpot3 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 2;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 2;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 23;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 23;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 23;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 23;
                        bestSpot0 = l73;
                        bestSpot1 = l73;
                        bestSpot2 = l73;
                        bestSpot4 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 43;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 43;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 43;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 43;
                        bestSpot0 = l69;
                        bestSpot1 = l69;
                        bestSpot3 = l69;
                        bestSpot5 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 5;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l51;
                        bestSpot2 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 9;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l47;
                        bestSpot3 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 1;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 2;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 5;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l62;
                        bestSpot2 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 9;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 9;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 9;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 9;
                        bestSpot0 = l58;
                        bestSpot3 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 3;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l72;
                        bestSpot1 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 3;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l70;
                        bestSpot1 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 1;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 3;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l71;
                        bestSpot1 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 1;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,4);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,0);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }



    static void scan15() throws GameActionException {
        int obstructedCenters = 0;
        int unavailableCenters = 0;
        int targetCenters = 0;
        bestSpot0 = null;
        bestSpot1 = null;
        bestSpot2 = null;
        bestSpot3 = null;
        bestSpot4 = null;
        bestSpot5 = null;
        bestSpot6 = null;
        bestSpot7 = null;
        bestSpot8 = null;
        if (m106 != null){
            if (!m106.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l106) && !maxT) unavailableCenters |= 8;
            else{
                switch(m106.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l106;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l106;
                }
            }
        }
        if (m102 != null){
            if (!m102.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l102) && !maxT) unavailableCenters |= 4;
            else{
                switch(m102.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l102;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l102;
                }
            }
        }
        if (m86 != null){
            if (!m86.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l86) && !maxT) unavailableCenters |= 8;
            else{
                switch(m86.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l86;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l86;
                }
            }
        }
        if (m78 != null){
            if (!m78.isPassable()) obstructedCenters |= 128;
            else if (Map.isNearRuin(l78) && !maxT) unavailableCenters |= 128;
            else{
                switch(m78.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 128;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l78;
                    default:
                        targetCenters |= 128;
                        bestSpot7 = l78;
                }
            }
        }
        if (m42 != null){
            if (!m42.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l42) && !maxT) unavailableCenters |= 2;
            else{
                switch(m42.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l42;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l42;
                }
            }
        }
        if (m34 != null){
            if (!m34.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l34) && !maxT) unavailableCenters |= 16;
            else{
                switch(m34.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l34;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l34;
                }
            }
        }
        if (m18 != null){
            if (!m18.isPassable()) obstructedCenters |= 64;
            else if (Map.isNearRuin(l18) && !maxT) unavailableCenters |= 64;
            else{
                switch(m18.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 64;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l18;
                    default:
                        targetCenters |= 64;
                        bestSpot6 = l18;
                }
            }
        }
        if (m14 != null){
            if (!m14.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l14) && !maxT) unavailableCenters |= 32;
            else{
                switch(m14.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l14;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l14;
                }
            }
        }
        if (m96 != null){
            if (!m96.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l96) && !maxT) unavailableCenters |= 8;
            else{
                switch(m96.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l96;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l96;
                }
            }
        }
        if (m90 != null){
            if (!m90.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l90) && !maxT) unavailableCenters |= 132;
            else{
                switch(m90.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l90;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l90;
                        bestSpot7 = l90;
                }
            }
        }
        if (m30 != null){
            if (!m30.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l30) && !maxT) unavailableCenters |= 66;
            else{
                switch(m30.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l30;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l30;
                        bestSpot6 = l30;
                }
            }
        }
        if (m24 != null){
            if (!m24.isPassable()) obstructedCenters |= 305;
            else if (Map.isNearRuin(l24) && !maxT) unavailableCenters |= 305;
            else{
                switch(m24.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 305;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l24;
                    default:
                        targetCenters |= 305;
                        bestSpot0 = l24;
                        bestSpot4 = l24;
                        bestSpot5 = l24;
                        bestSpot8 = l24;
                }
            }
        }
        if (m105 != null){
            if (!m105.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l105) && !maxT) unavailableCenters |= 12;
            else{
                switch(m105.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l105;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l105;
                        bestSpot3 = l105;
                }
            }
        }
        if (m103 != null){
            if (!m103.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l103) && !maxT) unavailableCenters |= 4;
            else{
                switch(m103.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l103;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l103;
                }
            }
        }
        if (m75 != null){
            if (!m75.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l75) && !maxT) unavailableCenters |= 10;
            else{
                switch(m75.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l75;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l75;
                        bestSpot3 = l75;
                }
            }
        }
        if (m67 != null){
            if (!m67.isPassable()) obstructedCenters |= 144;
            else if (Map.isNearRuin(l67) && !maxT) unavailableCenters |= 144;
            else{
                switch(m67.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 144;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l67;
                    default:
                        targetCenters |= 144;
                        bestSpot4 = l67;
                        bestSpot7 = l67;
                }
            }
        }
        if (m53 != null){
            if (!m53.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l53) && !maxT) unavailableCenters |= 2;
            else{
                switch(m53.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l53;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l53;
                }
            }
        }
        if (m45 != null){
            if (!m45.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l45) && !maxT) unavailableCenters |= 16;
            else{
                switch(m45.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l45;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l45;
                }
            }
        }
        if (m17 != null){
            if (!m17.isPassable()) obstructedCenters |= 96;
            else if (Map.isNearRuin(l17) && !maxT) unavailableCenters |= 96;
            else{
                switch(m17.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 96;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l17;
                    default:
                        targetCenters |= 96;
                        bestSpot5 = l17;
                        bestSpot6 = l17;
                }
            }
        }
        if (m15 != null){
            if (!m15.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l15) && !maxT) unavailableCenters |= 32;
            else{
                switch(m15.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l15;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l15;
                }
            }
        }
        if (m104 != null){
            if (!m104.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l104) && !maxT) unavailableCenters |= 4;
            else{
                switch(m104.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l104;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l104;
                }
            }
        }
        if (m64 != null){
            if (!m64.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l64) && !maxT) unavailableCenters |= 2;
            else{
                switch(m64.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l64;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l64;
                }
            }
        }
        if (m56 != null){
            if (!m56.isPassable()) obstructedCenters |= 16;
            else if (Map.isNearRuin(l56) && !maxT) unavailableCenters |= 16;
            else{
                switch(m56.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 16;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l56;
                    default:
                        targetCenters |= 16;
                        bestSpot4 = l56;
                }
            }
        }
        if (m16 != null){
            if (!m16.isPassable()) obstructedCenters |= 32;
            else if (Map.isNearRuin(l16) && !maxT) unavailableCenters |= 32;
            else{
                switch(m16.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 32;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l16;
                    default:
                        targetCenters |= 32;
                        bestSpot5 = l16;
                }
            }
        }
        if (m95 != null){
            if (!m95.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l95) && !maxT) unavailableCenters |= 8;
            else{
                switch(m95.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l95;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l95;
                }
            }
        }
        if (m91 != null){
            if (!m91.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l91) && !maxT) unavailableCenters |= 4;
            else{
                switch(m91.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l91;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l91;
                }
            }
        }
        if (m85 != null){
            if (!m85.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l85) && !maxT) unavailableCenters |= 8;
            else{
                switch(m85.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l85;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l85;
                }
            }
        }
        if (m79 != null){
            if (!m79.isPassable()) obstructedCenters |= 132;
            else if (Map.isNearRuin(l79) && !maxT) unavailableCenters |= 132;
            else{
                switch(m79.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 132;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l79;
                    default:
                        targetCenters |= 132;
                        bestSpot2 = l79;
                        bestSpot7 = l79;
                }
            }
        }
        if (m41 != null){
            if (!m41.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l41) && !maxT) unavailableCenters |= 2;
            else{
                switch(m41.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l41;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l41;
                }
            }
        }
        if (m35 != null){
            if (!m35.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l35) && !maxT) unavailableCenters |= 17;
            else{
                switch(m35.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l35;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l35;
                        bestSpot4 = l35;
                }
            }
        }
        if (m29 != null){
            if (!m29.isPassable()) obstructedCenters |= 66;
            else if (Map.isNearRuin(l29) && !maxT) unavailableCenters |= 66;
            else{
                switch(m29.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 66;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l29;
                    default:
                        targetCenters |= 66;
                        bestSpot1 = l29;
                        bestSpot6 = l29;
                }
            }
        }
        if (m25 != null){
            if (!m25.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l25) && !maxT) unavailableCenters |= 33;
            else{
                switch(m25.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l25;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l25;
                        bestSpot5 = l25;
                }
            }
        }
        if (m94 != null){
            if (!m94.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l94) && !maxT) unavailableCenters |= 12;
            else{
                switch(m94.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l94;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l94;
                        bestSpot3 = l94;
                }
            }
        }
        if (m92 != null){
            if (!m92.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l92) && !maxT) unavailableCenters |= 4;
            else{
                switch(m92.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l92;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l92;
                }
            }
        }
        if (m74 != null){
            if (!m74.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l74) && !maxT) unavailableCenters |= 10;
            else{
                switch(m74.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l74;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l74;
                        bestSpot3 = l74;
                }
            }
        }
        if (m68 != null){
            if (!m68.isPassable()) obstructedCenters |= 149;
            else if (Map.isNearRuin(l68) && !maxT) unavailableCenters |= 149;
            else{
                switch(m68.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 149;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l68;
                    default:
                        targetCenters |= 149;
                        bestSpot0 = l68;
                        bestSpot2 = l68;
                        bestSpot4 = l68;
                        bestSpot7 = l68;
                }
            }
        }
        if (m52 != null){
            if (!m52.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l52) && !maxT) unavailableCenters |= 2;
            else{
                switch(m52.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l52;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l52;
                }
            }
        }
        if (m46 != null){
            if (!m46.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l46) && !maxT) unavailableCenters |= 17;
            else{
                switch(m46.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l46;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l46;
                        bestSpot4 = l46;
                }
            }
        }
        if (m28 != null){
            if (!m28.isPassable()) obstructedCenters |= 99;
            else if (Map.isNearRuin(l28) && !maxT) unavailableCenters |= 99;
            else{
                switch(m28.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 99;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l28;
                    default:
                        targetCenters |= 99;
                        bestSpot0 = l28;
                        bestSpot1 = l28;
                        bestSpot5 = l28;
                        bestSpot6 = l28;
                }
            }
        }
        if (m26 != null){
            if (!m26.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l26) && !maxT) unavailableCenters |= 33;
            else{
                switch(m26.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l26;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l26;
                        bestSpot5 = l26;
                }
            }
        }
        if (m93 != null){
            if (!m93.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l93) && !maxT) unavailableCenters |= 4;
            else{
                switch(m93.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l93;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l93;
                }
            }
        }
        if (m63 != null){
            if (!m63.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l63) && !maxT) unavailableCenters |= 2;
            else{
                switch(m63.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l63;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l63;
                }
            }
        }
        if (m57 != null){
            if (!m57.isPassable()) obstructedCenters |= 17;
            else if (Map.isNearRuin(l57) && !maxT) unavailableCenters |= 17;
            else{
                switch(m57.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 17;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l57;
                    default:
                        targetCenters |= 17;
                        bestSpot0 = l57;
                        bestSpot4 = l57;
                }
            }
        }
        if (m27 != null){
            if (!m27.isPassable()) obstructedCenters |= 33;
            else if (Map.isNearRuin(l27) && !maxT) unavailableCenters |= 33;
            else{
                switch(m27.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 33;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l27;
                    default:
                        targetCenters |= 33;
                        bestSpot0 = l27;
                        bestSpot5 = l27;
                }
            }
        }
        if (m84 != null){
            if (!m84.isPassable()) obstructedCenters |= 8;
            else if (Map.isNearRuin(l84) && !maxT) unavailableCenters |= 8;
            else{
                switch(m84.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 8;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l84;
                    default:
                        targetCenters |= 8;
                        bestSpot3 = l84;
                }
            }
        }
        if (m80 != null){
            if (!m80.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l80) && !maxT) unavailableCenters |= 4;
            else{
                switch(m80.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l80;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l80;
                }
            }
        }
        if (m40 != null){
            if (!m40.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l40) && !maxT) unavailableCenters |= 2;
            else{
                switch(m40.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l40;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l40;
                }
            }
        }
        if (m36 != null){
            if (!m36.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l36) && !maxT) unavailableCenters |= 1;
            else{
                switch(m36.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l36;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l36;
                }
            }
        }
        if (m83 != null){
            if (!m83.isPassable()) obstructedCenters |= 12;
            else if (Map.isNearRuin(l83) && !maxT) unavailableCenters |= 12;
            else{
                switch(m83.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 12;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l83;
                    default:
                        targetCenters |= 12;
                        bestSpot2 = l83;
                        bestSpot3 = l83;
                }
            }
        }
        if (m81 != null){
            if (!m81.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l81) && !maxT) unavailableCenters |= 4;
            else{
                switch(m81.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l81;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l81;
                }
            }
        }
        if (m73 != null){
            if (!m73.isPassable()) obstructedCenters |= 10;
            else if (Map.isNearRuin(l73) && !maxT) unavailableCenters |= 10;
            else{
                switch(m73.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 10;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l73;
                    default:
                        targetCenters |= 10;
                        bestSpot1 = l73;
                        bestSpot3 = l73;
                }
            }
        }
        if (m69 != null){
            if (!m69.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l69) && !maxT) unavailableCenters |= 5;
            else{
                switch(m69.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l69;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l69;
                        bestSpot2 = l69;
                }
            }
        }
        if (m51 != null){
            if (!m51.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l51) && !maxT) unavailableCenters |= 2;
            else{
                switch(m51.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l51;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l51;
                }
            }
        }
        if (m47 != null){
            if (!m47.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l47) && !maxT) unavailableCenters |= 1;
            else{
                switch(m47.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l47;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l47;
                }
            }
        }
        if (m39 != null){
            if (!m39.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l39) && !maxT) unavailableCenters |= 3;
            else{
                switch(m39.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l39;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l39;
                        bestSpot1 = l39;
                }
            }
        }
        if (m37 != null){
            if (!m37.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l37) && !maxT) unavailableCenters |= 1;
            else{
                switch(m37.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l37;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l37;
                }
            }
        }
        if (m82 != null){
            if (!m82.isPassable()) obstructedCenters |= 4;
            else if (Map.isNearRuin(l82) && !maxT) unavailableCenters |= 4;
            else{
                switch(m82.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 4;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l82;
                    default:
                        targetCenters |= 4;
                        bestSpot2 = l82;
                }
            }
        }
        if (m62 != null){
            if (!m62.isPassable()) obstructedCenters |= 2;
            else if (Map.isNearRuin(l62) && !maxT) unavailableCenters |= 2;
            else{
                switch(m62.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 2;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l62;
                    default:
                        targetCenters |= 2;
                        bestSpot1 = l62;
                }
            }
        }
        if (m58 != null){
            if (!m58.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l58) && !maxT) unavailableCenters |= 1;
            else{
                switch(m58.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l58;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l58;
                }
            }
        }
        if (m38 != null){
            if (!m38.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l38) && !maxT) unavailableCenters |= 1;
            else{
                switch(m38.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l38;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l38;
                }
            }
        }
        if (m72 != null){
            if (!m72.isPassable()) obstructedCenters |= 15;
            else if (Map.isNearRuin(l72) && !maxT) unavailableCenters |= 15;
            else{
                switch(m72.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 15;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l72;
                    default:
                        targetCenters |= 15;
                        bestSpot0 = l72;
                        bestSpot1 = l72;
                        bestSpot2 = l72;
                        bestSpot3 = l72;
                }
            }
        }
        if (m70 != null){
            if (!m70.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l70) && !maxT) unavailableCenters |= 5;
            else{
                switch(m70.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l70;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l70;
                        bestSpot2 = l70;
                }
            }
        }
        if (m50 != null){
            if (!m50.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l50) && !maxT) unavailableCenters |= 3;
            else{
                switch(m50.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l50;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l50;
                        bestSpot1 = l50;
                }
            }
        }
        if (m48 != null){
            if (!m48.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l48) && !maxT) unavailableCenters |= 1;
            else{
                switch(m48.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l48;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l48;
                }
            }
        }
        if (m71 != null){
            if (!m71.isPassable()) obstructedCenters |= 5;
            else if (Map.isNearRuin(l71) && !maxT) unavailableCenters |= 5;
            else{
                switch(m71.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 5;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l71;
                    default:
                        targetCenters |= 5;
                        bestSpot0 = l71;
                        bestSpot2 = l71;
                }
            }
        }
        if (m61 != null){
            if (!m61.isPassable()) obstructedCenters |= 3;
            else if (Map.isNearRuin(l61) && !maxT) unavailableCenters |= 3;
            else{
                switch(m61.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 3;
                        break;
                    case ALLY_SECONDARY:
                        break;
                    case EMPTY:
                        emptyLoc = l61;
                    default:
                        targetCenters |= 3;
                        bestSpot0 = l61;
                        bestSpot1 = l61;
                }
            }
        }
        if (m59 != null){
            if (!m59.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l59) && !maxT) unavailableCenters |= 1;
            else{
                switch(m59.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l59;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l59;
                }
            }
        }
        if (m49 != null){
            if (!m49.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l49) && !maxT) unavailableCenters |= 1;
            else{
                switch(m49.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l49;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l49;
                }
            }
        }
        if (m60 != null){
            if (!m60.isPassable()) obstructedCenters |= 1;
            else if (Map.isNearRuin(l60) && !maxT) unavailableCenters |= 1;
            else{
                switch(m60.getPaint()){
                    case ENEMY_PRIMARY, ENEMY_SECONDARY:
                        unavailableCenters |= 1;
                        break;
                    case ALLY_PRIMARY:
                        break;
                    case EMPTY:
                        emptyLoc = l60;
                    default:
                        targetCenters |= 1;
                        bestSpot0 = l60;
                }
            }
        }

        MapLocation center;
        center = myLoc.translate(-5,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 256) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 256) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 16) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot8;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 128) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 128) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 14) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot7;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 64) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 64) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 12) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot6;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-5,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 32) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 32) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 10) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot5;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-5);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 16) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 16) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 8) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot4;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 8) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 8) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 6) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot3;
                bestCenter = center;
            }
        }
        center = myLoc.translate(3,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 4) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 4) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 4) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot2;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,3);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 2) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 2) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 2) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot1;
                bestCenter = center;
            }
        }
        center = myLoc.translate(-1,-1);
        if (Map.canBeCenter(center)){
            if ((obstructedCenters & 1) > 0) Map.markObstructed(center);
            else if ((unavailableCenters & 1) > 0) Map.markCenterNearRuins(center);
            else if ((targetCenters >>> 0) > 0 && Map.canBeCenterNoCheck(center)){
                bestSRPSpot = bestSpot0;
                bestCenter = center;
            }
        }
    }
}
